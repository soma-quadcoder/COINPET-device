
coinPet.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
       6:	00 00       	nop
       8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
       a:	00 00       	nop
       c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
       e:	00 00       	nop
      10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
      12:	00 00       	nop
      14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
      16:	00 00       	nop
      18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
      22:	00 00       	nop
      24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
      26:	00 00       	nop
      28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
      32:	00 00       	nop
      34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
      36:	00 00       	nop
      38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f0 c4       	rjmp	.+2528   	; 0xa1e <__vector_15>
      3e:	00 00       	nop
      40:	b6 c2       	rjmp	.+1388   	; 0x5ae <__vector_16>
      42:	00 00       	nop
      44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
      46:	00 00       	nop
      48:	d1 c2       	rjmp	.+1442   	; 0x5ec <__vector_18>
      4a:	00 00       	nop
      4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c5       	rjmp	.+2742   	; 0xb08 <__vector_20>
      52:	00 00       	nop
      54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
      56:	00 00       	nop
      58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
      62:	00 00       	nop
      64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
      66:	00 00       	nop
      68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a1 c5       	rjmp	.+2882   	; 0xbb4 <__vector_28>
      72:	00 00       	nop
      74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
      76:	00 00       	nop
      78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	13 e0       	ldi	r17, 0x03	; 3
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ee e7       	ldi	r30, 0x7E	; 126
      90:	f6 e1       	ldi	r31, 0x16	; 22
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ac 3c       	cpi	r26, 0xCC	; 204
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	13 e0       	ldi	r17, 0x03	; 3
      a0:	ac ec       	ldi	r26, 0xCC	; 204
      a2:	b3 e0       	ldi	r27, 0x03	; 3
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a1 3f       	cpi	r26, 0xF1	; 241
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	03 d0       	rcall	.+6      	; 0xb6 <main>
      b0:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <_exit>

000000b4 <__bad_interrupt>:
      b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <main>:

#define GAMEBOARD_DETEC_PIN     PA0


int main(void)
{
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e1 e6       	ldi	r30, 0x61	; 97
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__prologue_saves__+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c2:	2f e7       	ldi	r18, 0x7F	; 127
      c4:	84 e8       	ldi	r24, 0x84	; 132
      c6:	9e e1       	ldi	r25, 0x1E	; 30
      c8:	21 50       	subi	r18, 0x01	; 1
      ca:	80 40       	sbci	r24, 0x00	; 0
      cc:	90 40       	sbci	r25, 0x00	; 0
      ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x12>
      d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x1c>
      d2:	00 00       	nop
    unsigned char percent;
    int k = 0;
    
    _delay_ms(500);
    
    init_oled();
      d4:	03 d4       	rcall	.+2054   	; 0x8dc <init_oled>
      d6:	c8 d5       	rcall	.+2960   	; 0xc68 <init_uart>
    init_uart();
      d8:	0e 94 3d 09 	call	0x127a	; 0x127a <init_adc>
    init_adc();
      dc:	bc d4       	rcall	.+2424   	; 0xa56 <init_interaction>
      de:	c3 d1       	rcall	.+902    	; 0x466 <init_i2c>
    init_interaction();
      e0:	71 d2       	rcall	.+1250   	; 0x5c4 <init_motor>
      e2:	1e d1       	rcall	.+572    	; 0x320 <get_eeprom_data>
    init_i2c();
      e4:	78 94       	sei
      e6:	08 98       	cbi	0x01, 0	; 1
    init_motor();
      e8:	2b 98       	cbi	0x05, 3	; 5
      ea:	13 b8       	out	0x03, r1	; 3
    get_eeprom_data();  // EEPROM으로 부터 데이터 획득
      ec:	10 b8       	out	0x00, r1	; 0
      ee:	80 e0       	ldi	r24, 0x00	; 0
    
    
    sei();
      f0:	4a d4       	rcall	.+2196   	; 0x986 <draw_edge>
    DDRA &= ~(1<<GAMEBOARD_DETEC_PIN);
      f2:	80 91 d2 03 	lds	r24, 0x03D2
    PORTB &=0xf7;
    PINB = 0x00;
      f6:	87 ff       	sbrs	r24, 7
    PINA = 0x00;
      f8:	07 c0       	rjmp	.+14     	; 0x108 <main+0x52>
    
    draw_edge(0);
      fa:	40 e2       	ldi	r20, 0x20	; 32
      fc:	e4 2e       	mov	r14, r20
      fe:	42 e0       	ldi	r20, 0x02	; 2

    // P/N 인증 과정
    while(1)
    {
        //P/N 미인증 상태일경우
        if((s_flag&CONFIRM)!=CONFIRM)
     100:	f4 2e       	mov	r15, r20
     102:	c0 e0       	ldi	r28, 0x00	; 0
     104:	d0 e0       	ldi	r29, 0x00	; 0
     106:	28 c0       	rjmp	.+80     	; 0x158 <main+0xa2>
     108:	30 ef       	ldi	r19, 0xF0	; 240
     10a:	e3 2e       	mov	r14, r19
     10c:	32 e0       	ldi	r19, 0x02	; 2
     10e:	f3 2e       	mov	r15, r19
     110:	c0 e0       	ldi	r28, 0x00	; 0
     112:	d0 e0       	ldi	r29, 0x00	; 0
     114:	ae 01       	movw	r20, r28
     116:	42 5e       	subi	r20, 0xE2	; 226
     118:	5f 4f       	sbci	r21, 0xFF	; 255
     11a:	87 01       	movw	r16, r14
     11c:	22 e0       	ldi	r18, 0x02	; 2
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	60 e1       	ldi	r22, 0x10	; 16
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	88 e0       	ldi	r24, 0x08	; 8
     126:	90 e0       	ldi	r25, 0x00	; 0
        {
            // 제품등록 문구 출력
            for(k=0;k<6;k++)
                draw_char(8,16,30+(k*10),2,font_register[k]);
     128:	b2 d2       	rcall	.+1380   	; 0x68e <draw_char>
     12a:	2a 96       	adiw	r28, 0x0a	; 10
     12c:	20 e1       	ldi	r18, 0x10	; 16
     12e:	e2 0e       	add	r14, r18
     130:	f1 1c       	adc	r15, r1
     132:	cc 33       	cpi	r28, 0x3C	; 60
     134:	d1 05       	cpc	r29, r1
     136:	71 f7       	brne	.-36     	; 0x114 <main+0x5e>
     138:	80 91 d2 03 	lds	r24, 0x03D2
     13c:	87 fd       	sbrc	r24, 7
     13e:	dd cf       	rjmp	.-70     	; 0xfa <main+0x44>
     140:	8f e0       	ldi	r24, 0x0F	; 15
    {
        //P/N 미인증 상태일경우
        if((s_flag&CONFIRM)!=CONFIRM)
        {
            // 제품등록 문구 출력
            for(k=0;k<6;k++)
     142:	97 e2       	ldi	r25, 0x27	; 39
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <main+0x8e>
     148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x94>
     14a:	00 00       	nop
     14c:	80 91 d2 03 	lds	r24, 0x03D2
     150:	81 ff       	sbrs	r24, 1
     152:	f2 cf       	rjmp	.-28     	; 0x138 <main+0x82>
     154:	d3 d6       	rcall	.+3494   	; 0xefc <proccess_instruction>
     156:	f0 cf       	rjmp	.-32     	; 0x138 <main+0x82>
     158:	ae 01       	movw	r20, r28
     15a:	42 5e       	subi	r20, 0xE2	; 226
            
            //인증완료될때까지 대기
            while(!(s_flag&CONFIRM))
            {
                _delay_ms(2);
                if(s_flag&GET_INSTRUCTION)
     15c:	5f 4f       	sbci	r21, 0xFF	; 255
     15e:	87 01       	movw	r16, r14
     160:	22 e0       	ldi	r18, 0x02	; 2
     162:	30 e0       	ldi	r19, 0x00	; 0
                    proccess_instruction();
     164:	60 e1       	ldi	r22, 0x10	; 16
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	88 e0       	ldi	r24, 0x08	; 8
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	90 d2       	rcall	.+1312   	; 0x68e <draw_char>
     16e:	2a 96       	adiw	r28, 0x0a	; 10
        //P/N 인증 상태일경우
        else break;
    }
    
    for(k=0;k<6;k++)
        draw_char(8,16,30+(k*10),2,font_money[k]);
     170:	90 e1       	ldi	r25, 0x10	; 16
     172:	e9 0e       	add	r14, r25
     174:	f1 1c       	adc	r15, r1
     176:	cc 33       	cpi	r28, 0x3C	; 60
     178:	d1 05       	cpc	r29, r1
     17a:	71 f7       	brne	.-36     	; 0x158 <main+0xa2>
     17c:	60 91 df 03 	lds	r22, 0x03DF
     180:	70 91 e0 03 	lds	r23, 0x03E0
     184:	80 91 e1 03 	lds	r24, 0x03E1
     188:	90 91 e2 03 	lds	r25, 0x03E2
        
        //P/N 인증 상태일경우
        else break;
    }
    
    for(k=0;k<6;k++)
     18c:	13 d3       	rcall	.+1574   	; 0x7b4 <write_num_to_oled>
     18e:	80 91 d2 03 	lds	r24, 0x03D2
        draw_char(8,16,30+(k*10),2,font_money[k]);
    
    write_num_to_oled(current_money);
     192:	83 ff       	sbrs	r24, 3
     194:	1a c0       	rjmp	.+52     	; 0x1ca <main+0x114>
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	f6 d3       	rcall	.+2028   	; 0x986 <draw_edge>
     19a:	20 91 df 03 	lds	r18, 0x03DF
     19e:	30 91 e0 03 	lds	r19, 0x03E0
     1a2:	40 91 e1 03 	lds	r20, 0x03E1
    
    
    if(s_flag&ISGOAL)
     1a6:	50 91 e2 03 	lds	r21, 0x03E2
     1aa:	a0 e7       	ldi	r26, 0x70	; 112
    {
        draw_edge(1);
     1ac:	b0 e0       	ldi	r27, 0x00	; 0
     1ae:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__muluhisi3>
        percent = (current_money*112)/goal_money;
     1b2:	20 91 d8 03 	lds	r18, 0x03D8
     1b6:	30 91 d9 03 	lds	r19, 0x03D9
     1ba:	40 91 da 03 	lds	r20, 0x03DA
     1be:	50 91 db 03 	lds	r21, 0x03DB
     1c2:	0e 94 bf 0a 	call	0x157e	; 0x157e <__udivmodsi4>
     1c6:	82 2f       	mov	r24, r18
     1c8:	c3 d3       	rcall	.+1926   	; 0x950 <draw_percentage>
     1ca:	93 e6       	ldi	r25, 0x63	; 99
     1cc:	b9 2e       	mov	r11, r25
     1ce:	c1 2c       	mov	r12, r1
     1d0:	24 e0       	ldi	r18, 0x04	; 4
     1d2:	d2 2e       	mov	r13, r18
     1d4:	80 91 d2 03 	lds	r24, 0x03D2
     1d8:	80 ff       	sbrs	r24, 0
     1da:	07 c0       	rjmp	.+14     	; 0x1ea <main+0x134>
     1dc:	0e 94 4f 09 	call	0x129e	; 0x129e <proccess_coin>
        draw_percentage(percent);
     1e0:	d0 92 dd 03 	sts	0x03DD, r13
        else if(s_flag&ISGAME)
        {
            unsigned isconnected;
            
            // 게임보드 연결확인 패킷 전송
            UDR1 = ISCONNECTED;
     1e4:	c0 92 dc 03 	sts	0x03DC, r12
    while(1)
    {
        if(s_flag&INPUT_COIN)
        {
            proccess_coin();
            adc_max=1024;
     1e8:	f5 cf       	rjmp	.-22     	; 0x1d4 <main+0x11e>
     1ea:	81 ff       	sbrs	r24, 1
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <main+0x13c>
        draw_percentage(percent);
    }

    while(1)
    {
        if(s_flag&INPUT_COIN)
     1ee:	86 d6       	rcall	.+3340   	; 0xefc <proccess_instruction>
     1f0:	f1 cf       	rjmp	.-30     	; 0x1d4 <main+0x11e>
     1f2:	18 99       	sbic	0x03, 0	; 3
     1f4:	32 c0       	rjmp	.+100    	; 0x25a <main+0x1a4>
        {
            proccess_coin();
     1f6:	22 e4       	ldi	r18, 0x42	; 66
     1f8:	2a 95       	dec	r18
            adc_max=1024;
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x142>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x148>
     1fe:	20 91 78 00 	lds	r18, 0x0078
     202:	30 91 79 00 	lds	r19, 0x0079
        }
        
        // 명령어가 전송되었을경우
        else if(s_flag&GET_INSTRUCTION)
     206:	80 91 dc 03 	lds	r24, 0x03DC
            proccess_instruction();
     20a:	90 91 dd 03 	lds	r25, 0x03DD
     20e:	28 17       	cp	r18, r24
     210:	39 07       	cpc	r19, r25
     212:	48 f4       	brcc	.+18     	; 0x226 <main+0x170>
     214:	80 91 78 00 	lds	r24, 0x0078
     218:	90 91 79 00 	lds	r25, 0x0079
        {
            while(1)
            {
               
                _delay_us(10);
                if(ADC < adc_max)
     21c:	90 93 dd 03 	sts	0x03DD, r25
     220:	80 93 dc 03 	sts	0x03DC, r24
     224:	04 c0       	rjmp	.+8      	; 0x22e <main+0x178>
     226:	86 e0       	ldi	r24, 0x06	; 6
     228:	8a 95       	dec	r24
     22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x172>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x178>
     22e:	18 9b       	sbis	0x03, 0	; 3
     230:	0f c0       	rjmp	.+30     	; 0x250 <main+0x19a>
     232:	92 e4       	ldi	r25, 0x42	; 66
     234:	9a 95       	dec	r25
     236:	f1 f7       	brne	.-4      	; 0x234 <main+0x17e>
     238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x184>
     23a:	80 91 dc 03 	lds	r24, 0x03DC
     23e:	90 91 dd 03 	lds	r25, 0x03DD
     242:	88 3e       	cpi	r24, 0xE8	; 232
     244:	93 40       	sbci	r25, 0x03	; 3
     246:	30 f6       	brcc	.-116    	; 0x1d4 <main+0x11e>
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	01 d1       	rcall	.+514    	; 0x450 <change_bit_val>
     24e:	c2 cf       	rjmp	.-124    	; 0x1d4 <main+0x11e>
     250:	86 e0       	ldi	r24, 0x06	; 6
     252:	8a 95       	dec	r24
     254:	f1 f7       	brne	.-4      	; 0x252 <main+0x19c>
                
                // 동전인식이 종료 & 처리
                if(PINB & 0x01)
                {
                    _delay_us(10);
                    if(adc_max<1000)
     256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x1a2>
     258:	ce cf       	rjmp	.-100    	; 0x1f6 <main+0x140>
     25a:	84 ff       	sbrs	r24, 4
     25c:	bb cf       	rjmp	.-138    	; 0x1d4 <main+0x11e>
     25e:	b0 92 ce 00 	sts	0x00CE, r11
     262:	80 91 c8 00 	lds	r24, 0x00C8
                    {
                        change_bit_val(INPUT_COIN,1);
     266:	85 ff       	sbrs	r24, 5
     268:	fc cf       	rjmp	.-8      	; 0x262 <main+0x1ac>
     26a:	87 ea       	ldi	r24, 0xA7	; 167
     26c:	91 e6       	ldi	r25, 0x61	; 97
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <main+0x1b8>
     272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x1be>
     274:	00 00       	nop
     276:	f1 d4       	rcall	.+2530   	; 0xc5a <check_gameboard_connect>
                    _delay_us(1);
            }
        }
        
        // 게임보드와 연결되었던 상태일경우
        else if(s_flag&ISGAME)
     278:	81 11       	cpse	r24, r1
     27a:	ac cf       	rjmp	.-168    	; 0x1d4 <main+0x11e>
        {
            unsigned isconnected;
            
            // 게임보드 연결확인 패킷 전송
            UDR1 = ISCONNECTED;
     27c:	00 e0       	ldi	r16, 0x00	; 0
     27e:	22 e0       	ldi	r18, 0x02	; 2
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	45 e0       	ldi	r20, 0x05	; 5
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	6c e2       	ldi	r22, 0x2C	; 44
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	87 e7       	ldi	r24, 0x77	; 119
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	47 d2       	rcall	.+1166   	; 0x71e <draw_data>
     290:	80 91 d2 03 	lds	r24, 0x03D2
            while(!(UCSR1A&(1<<UDRE1)));
            
            _delay_ms(5);

            if(!check_gameboard_connect())
     294:	83 ff       	sbrs	r24, 3
     296:	1a c0       	rjmp	.+52     	; 0x2cc <main+0x216>
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	75 d3       	rcall	.+1770   	; 0x986 <draw_edge>
            {

                // 이전에 그려져있던 그림 클리어
                draw_data(119,44,5,2,0x00);
     29c:	20 91 df 03 	lds	r18, 0x03DF
     2a0:	30 91 e0 03 	lds	r19, 0x03E0
     2a4:	40 91 e1 03 	lds	r20, 0x03E1
     2a8:	50 91 e2 03 	lds	r21, 0x03E2
     2ac:	a0 e7       	ldi	r26, 0x70	; 112
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__muluhisi3>
                if(s_flag&ISGOAL)
     2b4:	20 91 d8 03 	lds	r18, 0x03D8
     2b8:	30 91 d9 03 	lds	r19, 0x03D9
                {
                    draw_edge(1);
     2bc:	40 91 da 03 	lds	r20, 0x03DA
                    percent = (current_money*112)/goal_money;
     2c0:	50 91 db 03 	lds	r21, 0x03DB
     2c4:	0e 94 bf 0a 	call	0x157e	; 0x157e <__udivmodsi4>
     2c8:	82 2f       	mov	r24, r18
     2ca:	42 d3       	rcall	.+1668   	; 0x950 <draw_percentage>
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	e8 2e       	mov	r14, r24
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	f8 2e       	mov	r15, r24
     2d4:	c0 e0       	ldi	r28, 0x00	; 0
     2d6:	d0 e0       	ldi	r29, 0x00	; 0
     2d8:	ae 01       	movw	r20, r28
     2da:	42 5e       	subi	r20, 0xE2	; 226
     2dc:	5f 4f       	sbci	r21, 0xFF	; 255
     2de:	87 01       	movw	r16, r14
     2e0:	22 e0       	ldi	r18, 0x02	; 2
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	60 e1       	ldi	r22, 0x10	; 16
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	88 e0       	ldi	r24, 0x08	; 8
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	d0 d1       	rcall	.+928    	; 0x68e <draw_char>
                    draw_percentage(percent);
     2ee:	2a 96       	adiw	r28, 0x0a	; 10
     2f0:	90 e1       	ldi	r25, 0x10	; 16

    // P/N 인증 과정
    while(1)
    {
        //P/N 미인증 상태일경우
        if((s_flag&CONFIRM)!=CONFIRM)
     2f2:	e9 0e       	add	r14, r25
     2f4:	f1 1c       	adc	r15, r1
     2f6:	cc 33       	cpi	r28, 0x3C	; 60
     2f8:	d1 05       	cpc	r29, r1
     2fa:	71 f7       	brne	.-36     	; 0x2d8 <main+0x222>
     2fc:	60 91 df 03 	lds	r22, 0x03DF
     300:	70 91 e0 03 	lds	r23, 0x03E0
                    percent = (current_money*112)/goal_money;
                    draw_percentage(percent);
                }
                
                for(k=0;k<6;k++)
                    draw_char(8,16,30+(k*10),2,font_money[k]);
     304:	80 91 e1 03 	lds	r24, 0x03E1
     308:	90 91 e2 03 	lds	r25, 0x03E2
     30c:	53 d2       	rcall	.+1190   	; 0x7b4 <write_num_to_oled>
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	80 e1       	ldi	r24, 0x10	; 16
     312:	9e d0       	rcall	.+316    	; 0x450 <change_bit_val>
     314:	41 ec       	ldi	r20, 0xC1	; 193
     316:	53 e0       	ldi	r21, 0x03	; 3
     318:	61 e0       	ldi	r22, 0x01	; 1
     31a:	83 e1       	ldi	r24, 0x13	; 19
     31c:	c0 d4       	rcall	.+2432   	; 0xc9e <make_packet>
                    draw_edge(1);
                    percent = (current_money*112)/goal_money;
                    draw_percentage(percent);
                }
                
                for(k=0;k<6;k++)
     31e:	5a cf       	rjmp	.-332    	; 0x1d4 <main+0x11e>

00000320 <get_eeprom_data>:
#include "eeprom.h"
#include "flowControl.h"
#include "coinCheck.h"

void get_eeprom_data()
{
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 27 0b 	call	0x164e	; 0x164e <__eerd_byte_m324p>
     000 0000 ~ 000 0000	 (s_flag)데이터
     */
    
    // s_flag 데이터를 eeprom으로 부터 가져온다
    // 인증여부 & 쌓여있는 데이터유무를 알기위해서
    s_flag = eeprom_read(S_FLAG_ADDRESS);
     32c:	80 93 d2 03 	sts	0x03D2, r24
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     330:	87 e0       	ldi	r24, 0x07	; 7
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 27 0b 	call	0x164e	; 0x164e <__eerd_byte_m324p>
    // 인증여부 & 쌓여있는 데이터유무를 알기위해서
    s_flag = eeprom_read(S_FLAG_ADDRESS);
    //eeprom_write(S_FLAG_ADDRESS,0x00);
    
    // 블루투스 미연결때 저장되어있던 동전갯수를 eeprom으로 부터 얻는다
    saved_coin_cnt  = eeprom_read(UNCONNECT_COIN_CNT_ADD);
     338:	80 93 ed 03 	sts	0x03ED, r24
    last_coin_add   = UNCONNECT_COIN_DATA_ADD + (saved_coin_cnt * 6);
     33c:	98 2f       	mov	r25, r24
     33e:	99 0f       	add	r25, r25
     340:	89 0f       	add	r24, r25
     342:	88 0f       	add	r24, r24
     344:	88 5f       	subi	r24, 0xF8	; 248
     346:	80 93 ee 03 	sts	0x03EE, r24
     34a:	c3 e0       	ldi	r28, 0x03	; 3
     34c:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     34e:	ce 01       	movw	r24, r28
     350:	0e 94 27 0b 	call	0x164e	; 0x164e <__eerd_byte_m324p>
    
    // eeprom에 저장되어있는 목표금액을 가져온다
    for( i=0;i<3;i++ )
    {
        tmp = eeprom_read(GOALMONEY_ADDRESS-i)&0xff;
        goal_money = goal_money|tmp;
     354:	40 91 d8 03 	lds	r20, 0x03D8
     358:	50 91 d9 03 	lds	r21, 0x03D9
     35c:	60 91 da 03 	lds	r22, 0x03DA
     360:	70 91 db 03 	lds	r23, 0x03DB
     364:	48 2b       	or	r20, r24
     366:	40 93 d8 03 	sts	0x03D8, r20
     36a:	50 93 d9 03 	sts	0x03D9, r21
     36e:	60 93 da 03 	sts	0x03DA, r22
     372:	70 93 db 03 	sts	0x03DB, r23
     376:	8f e0       	ldi	r24, 0x0F	; 15
     378:	97 e2       	ldi	r25, 0x27	; 39
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <get_eeprom_data+0x5a>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <get_eeprom_data+0x60>
     380:	00 00       	nop
        _delay_ms(2);
        if( i < 2 )
     382:	c1 30       	cpi	r28, 0x01	; 1
     384:	a1 f0       	breq	.+40     	; 0x3ae <get_eeprom_data+0x8e>
            goal_money = goal_money<<8;
     386:	80 91 d8 03 	lds	r24, 0x03D8
     38a:	90 91 d9 03 	lds	r25, 0x03D9
     38e:	a0 91 da 03 	lds	r26, 0x03DA
     392:	b0 91 db 03 	lds	r27, 0x03DB
     396:	ba 2f       	mov	r27, r26
     398:	a9 2f       	mov	r26, r25
     39a:	98 2f       	mov	r25, r24
     39c:	88 27       	eor	r24, r24
     39e:	80 93 d8 03 	sts	0x03D8, r24
     3a2:	90 93 d9 03 	sts	0x03D9, r25
     3a6:	a0 93 da 03 	sts	0x03DA, r26
     3aa:	b0 93 db 03 	sts	0x03DB, r27
     3ae:	21 97       	sbiw	r28, 0x01	; 1
    // 블루투스 미연결때 저장되어있던 동전갯수를 eeprom으로 부터 얻는다
    saved_coin_cnt  = eeprom_read(UNCONNECT_COIN_CNT_ADD);
    last_coin_add   = UNCONNECT_COIN_DATA_ADD + (saved_coin_cnt * 6);
    
    // eeprom에 저장되어있는 목표금액을 가져온다
    for( i=0;i<3;i++ )
     3b0:	71 f6       	brne	.-100    	; 0x34e <get_eeprom_data+0x2e>
            goal_money = goal_money<<8;
    }

    //eeprom에서 획득한 s_flag의 데이터가 0xff라는 의미는
    //default 값이라는 의미이기 때문에 초기화 해준다.
    if(s_flag == DEFAULT_DATA)
     3b2:	80 91 d2 03 	lds	r24, 0x03D2
     3b6:	8f 3f       	cpi	r24, 0xFF	; 255
     3b8:	81 f4       	brne	.+32     	; 0x3da <get_eeprom_data+0xba>
}

void eeprom_write(int ad,unsigned char val)
{
    //EEPROM 원하는 주소에 데이터 저장
    eeprom_write_byte(ad,val);
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	ce 01       	movw	r24, r28
     3be:	0e 94 2f 0b 	call	0x165e	; 0x165e <__eewr_byte_m324p>
     3c2:	e7 e8       	ldi	r30, 0x87	; 135
     3c4:	f3 e1       	ldi	r31, 0x13	; 19
     3c6:	31 97       	sbiw	r30, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <get_eeprom_data+0xa6>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <get_eeprom_data+0xac>
     3cc:	00 00       	nop
     3ce:	21 96       	adiw	r28, 0x01	; 1
    //eeprom에서 획득한 s_flag의 데이터가 0xff라는 의미는
    //default 값이라는 의미이기 때문에 초기화 해준다.
    if(s_flag == DEFAULT_DATA)
    {
        char i;
        for( i=0;i<10;i++ )
     3d0:	ca 30       	cpi	r28, 0x0A	; 10
     3d2:	d1 05       	cpc	r29, r1
     3d4:	91 f7       	brne	.-28     	; 0x3ba <get_eeprom_data+0x9a>
        {
            eeprom_write(i,INIT_DATA);
            _delay_ms(1);
        }
        s_flag = INIT_DATA;
     3d6:	10 92 d2 03 	sts	0x03D2, r1
    }
    
    // 나중에 변경해야함 -> CONFIRM에서 ISDATA로
    if((s_flag&CONFIRM)==CONFIRM)
     3da:	80 91 d2 03 	lds	r24, 0x03D2
     3de:	87 ff       	sbrs	r24, 7
     3e0:	2e c0       	rjmp	.+92     	; 0x43e <get_eeprom_data+0x11e>
     3e2:	c6 e0       	ldi	r28, 0x06	; 6
     3e4:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     3e6:	ce 01       	movw	r24, r28
     3e8:	0e 94 27 0b 	call	0x164e	; 0x164e <__eerd_byte_m324p>
     3ec:	e7 e8       	ldi	r30, 0x87	; 135
     3ee:	f3 e1       	ldi	r31, 0x13	; 19
     3f0:	31 97       	sbiw	r30, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <get_eeprom_data+0xd0>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <get_eeprom_data+0xd6>
     3f6:	00 00       	nop
        for( ; ; )
        {
            tmp = eeprom_read(CURRENT_MONEY-i);
            _delay_ms(1);

            current_money = current_money | tmp;
     3f8:	40 91 df 03 	lds	r20, 0x03DF
     3fc:	50 91 e0 03 	lds	r21, 0x03E0
     400:	60 91 e1 03 	lds	r22, 0x03E1
     404:	70 91 e2 03 	lds	r23, 0x03E2
     408:	48 2b       	or	r20, r24
     40a:	21 97       	sbiw	r28, 0x01	; 1
            if( i==2 )
     40c:	c3 30       	cpi	r28, 0x03	; 3
     40e:	d1 05       	cpc	r29, r1
     410:	49 f4       	brne	.+18     	; 0x424 <get_eeprom_data+0x104>
        for( ; ; )
        {
            tmp = eeprom_read(CURRENT_MONEY-i);
            _delay_ms(1);

            current_money = current_money | tmp;
     412:	40 93 df 03 	sts	0x03DF, r20
     416:	50 93 e0 03 	sts	0x03E0, r21
     41a:	60 93 e1 03 	sts	0x03E1, r22
     41e:	70 93 e2 03 	sts	0x03E2, r23
     422:	0d c0       	rjmp	.+26     	; 0x43e <get_eeprom_data+0x11e>
            if( i==2 )
                break;
            
            i++;
            current_money = current_money<<8;
     424:	76 2f       	mov	r23, r22
     426:	65 2f       	mov	r22, r21
     428:	54 2f       	mov	r21, r20
     42a:	44 27       	eor	r20, r20
     42c:	40 93 df 03 	sts	0x03DF, r20
     430:	50 93 e0 03 	sts	0x03E0, r21
     434:	60 93 e1 03 	sts	0x03E1, r22
     438:	70 93 e2 03 	sts	0x03E2, r23
        }
     43c:	d4 cf       	rjmp	.-88     	; 0x3e6 <get_eeprom_data+0xc6>
    }
}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <eeprom_write>:

void eeprom_write(int ad,unsigned char val)
{
    //EEPROM 원하는 주소에 데이터 저장
    eeprom_write_byte(ad,val);
     444:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__eewr_byte_m324p>
     448:	08 95       	ret

0000044a <eeprom_read>:
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     44a:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__eerd_byte_m324p>
    return val;
}
     44e:	08 95       	ret

00000450 <change_bit_val>:
#include "flowControl.h"

void change_bit_val(unsigned char position, unsigned char value)
{
     450:	90 91 d2 03 	lds	r25, 0x03D2
    //값을 1로 set 하는 경우
    if(value)
     454:	66 23       	and	r22, r22
     456:	11 f0       	breq	.+4      	; 0x45c <change_bit_val+0xc>
        s_flag|=position;
     458:	89 2b       	or	r24, r25
     45a:	02 c0       	rjmp	.+4      	; 0x460 <change_bit_val+0x10>
    //값을 0으로 clear하는 경우
    else
        s_flag&=~(position);
     45c:	80 95       	com	r24
     45e:	89 23       	and	r24, r25
     460:	80 93 d2 03 	sts	0x03D2, r24
     464:	08 95       	ret

00000466 <init_i2c>:
#include "i2c.h"

void init_i2c()
{
    TWCR |= 1<<TWEN; // TWI 사용 ON
     466:	ec eb       	ldi	r30, 0xBC	; 188
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	84 60       	ori	r24, 0x04	; 4
     46e:	80 83       	st	Z, r24
    TWSR  = 0x00;    // TWI 분주비 1로 set
     470:	10 92 b9 00 	sts	0x00B9, r1
    TWBR |= 0x12;    // 전송 속도 144
     474:	e8 eb       	ldi	r30, 0xB8	; 184
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	82 61       	ori	r24, 0x12	; 18
     47c:	80 83       	st	Z, r24
     47e:	08 95       	ret

00000480 <i2c_write>:
     * dev_add : 슬레이브 디바이스 어드레스
     * reg_add : 디바이스 레지스트 어드레스
     * data    : 슬레이브 레지스트에 셋할 데이터
     */
    
    TWCR |= 1<<TWINT | 1<< TWSTA | 1<<TWEN;  // start 비트
     480:	90 91 bc 00 	lds	r25, 0x00BC
     484:	94 6a       	ori	r25, 0xA4	; 164
     486:	90 93 bc 00 	sts	0x00BC, r25
    while (!(TWCR&0x80));           // START 처리가 완료됨을 대기
     48a:	90 91 bc 00 	lds	r25, 0x00BC
     48e:	97 ff       	sbrs	r25, 7
     490:	fc cf       	rjmp	.-8      	; 0x48a <i2c_write+0xa>
    
    TWDR = dev_add<<1;              // 슬레이브 디바이스 어드레스설정 : 최하단 비트 0 : write
     492:	88 0f       	add	r24, r24
     494:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = 1<<TWINT| 1<<TWEN;
     498:	84 e8       	ldi	r24, 0x84	; 132
     49a:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR&0x80));
     49e:	80 91 bc 00 	lds	r24, 0x00BC
     4a2:	87 ff       	sbrs	r24, 7
     4a4:	fc cf       	rjmp	.-8      	; 0x49e <i2c_write+0x1e>
    
    TWDR = reg_add;                 // 쓰고자할 레지스터 주소 설정
     4a6:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = 1<<TWINT| 1<<TWEN;
     4aa:	84 e8       	ldi	r24, 0x84	; 132
     4ac:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR&0x80));
     4b0:	80 91 bc 00 	lds	r24, 0x00BC
     4b4:	87 ff       	sbrs	r24, 7
     4b6:	fc cf       	rjmp	.-8      	; 0x4b0 <i2c_write+0x30>
    
    TWDR = data;   // 전송 할  데이터
     4b8:	40 93 bb 00 	sts	0x00BB, r20
    TWCR = 1<<TWINT| 1<<TWEN;
     4bc:	84 e8       	ldi	r24, 0x84	; 132
     4be:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR&0x80));
     4c2:	80 91 bc 00 	lds	r24, 0x00BC
     4c6:	87 ff       	sbrs	r24, 7
     4c8:	fc cf       	rjmp	.-8      	; 0x4c2 <i2c_write+0x42>
    
    TWCR = 1<<TWINT | 1<< TWSTO| 1<<TWEN;  //stop 비트
     4ca:	84 e9       	ldi	r24, 0x94	; 148
     4cc:	80 93 bc 00 	sts	0x00BC, r24
     4d0:	08 95       	ret

000004d2 <set_rtc>:
    return get_time_vale(data);
}

void set_rtc(unsigned char min,unsigned char hour,unsigned char date,
              unsigned char month,unsigned char year)
{
     4d2:	a1 e0       	ldi	r26, 0x01	; 1
     4d4:	b0 e0       	ldi	r27, 0x00	; 0
     4d6:	ef e6       	ldi	r30, 0x6F	; 111
     4d8:	f2 e0       	ldi	r31, 0x02	; 2
     4da:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__prologue_saves__+0x18>
     4de:	18 2f       	mov	r17, r24
     4e0:	f6 2e       	mov	r15, r22
     4e2:	e4 2e       	mov	r14, r20
    i2c_write( DS1307_ADD , 0x00,   0);
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	88 e6       	ldi	r24, 0x68	; 104
     4ea:	29 83       	std	Y+1, r18	; 0x01
     4ec:	c9 df       	rcall	.-110    	; 0x480 <i2c_write>
     4ee:	41 2f       	mov	r20, r17
    i2c_write( DS1307_ADD ,MINUTE,  min );  // 분
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	88 e6       	ldi	r24, 0x68	; 104
     4f4:	c5 df       	rcall	.-118    	; 0x480 <i2c_write>
     4f6:	4f 2d       	mov	r20, r15
     4f8:	62 e0       	ldi	r22, 0x02	; 2
    i2c_write( DS1307_ADD ,HOUR,    hour );  // 시간
     4fa:	88 e6       	ldi	r24, 0x68	; 104
     4fc:	c1 df       	rcall	.-126    	; 0x480 <i2c_write>
     4fe:	4e 2d       	mov	r20, r14
     500:	64 e0       	ldi	r22, 0x04	; 4
     502:	88 e6       	ldi	r24, 0x68	; 104
    i2c_write( DS1307_ADD ,DATE,    date );  // 일
     504:	bd df       	rcall	.-134    	; 0x480 <i2c_write>
     506:	29 81       	ldd	r18, Y+1	; 0x01
     508:	42 2f       	mov	r20, r18
     50a:	65 e0       	ldi	r22, 0x05	; 5
     50c:	88 e6       	ldi	r24, 0x68	; 104
    i2c_write( DS1307_ADD ,MONTH,   month);   // 월
     50e:	b8 df       	rcall	.-144    	; 0x480 <i2c_write>
     510:	40 2f       	mov	r20, r16
     512:	66 e0       	ldi	r22, 0x06	; 6
     514:	88 e6       	ldi	r24, 0x68	; 104
     516:	b4 df       	rcall	.-152    	; 0x480 <i2c_write>
     518:	21 96       	adiw	r28, 0x01	; 1
    i2c_write( DS1307_ADD ,YEAR,    year );  // 년
     51a:	e6 e0       	ldi	r30, 0x06	; 6
     51c:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__epilogue_restores__+0x18>

00000520 <get_time_vale>:
    unsigned char real_data;
    char upper_num;
    char lower_num;
    
    lower_num = data & 0x0f;   // 하단부 데이터
    upper_num = (data>>4 &0x0f)*10; // 상단부 데이터
     520:	98 2f       	mov	r25, r24
     522:	92 95       	swap	r25
     524:	9f 70       	andi	r25, 0x0F	; 15
    
    unsigned char real_data;
    char upper_num;
    char lower_num;
    
    lower_num = data & 0x0f;   // 하단부 데이터
     526:	8f 70       	andi	r24, 0x0F	; 15
    upper_num = (data>>4 &0x0f)*10; // 상단부 데이터
    real_data = upper_num + lower_num;
    
    return real_data;
     528:	2a e0       	ldi	r18, 0x0A	; 10
     52a:	92 9f       	mul	r25, r18
     52c:	80 0d       	add	r24, r0
     52e:	11 24       	eor	r1, r1
     530:	08 95       	ret

00000532 <i2c_read>:
     * reg_add : 디바이스 레지스트 어드레스
    */
    
    char data=0;
    
    TWCR |= 1<<TWINT | 1<< TWSTA | 1<<TWEN;   // start 비트
     532:	90 91 bc 00 	lds	r25, 0x00BC
     536:	94 6a       	ori	r25, 0xA4	; 164
     538:	90 93 bc 00 	sts	0x00BC, r25
    while(!(TWCR&0x80));            // TWINT 가 1값으로 클리어 될때까지 기다림
     53c:	90 91 bc 00 	lds	r25, 0x00BC
     540:	97 ff       	sbrs	r25, 7
     542:	fc cf       	rjmp	.-8      	; 0x53c <i2c_read+0xa>
    
    TWDR = dev_add<<1;              // 슬레이브 디바이스 어드레스설정 : 최하단 비트 0 : write
     544:	98 2f       	mov	r25, r24
     546:	99 0f       	add	r25, r25
     548:	90 93 bb 00 	sts	0x00BB, r25
    TWCR = 1<<TWINT| 1<<TWEN;
     54c:	94 e8       	ldi	r25, 0x84	; 132
     54e:	90 93 bc 00 	sts	0x00BC, r25
    while(!(TWCR&0x80));
     552:	90 91 bc 00 	lds	r25, 0x00BC
     556:	97 ff       	sbrs	r25, 7
     558:	fc cf       	rjmp	.-8      	; 0x552 <i2c_read+0x20>
    
    TWDR = reg_add;                 // 읽고자 할 레지스터 주소를 셋
     55a:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = 1<<TWINT| 1<<TWEN;
     55e:	94 e8       	ldi	r25, 0x84	; 132
     560:	90 93 bc 00 	sts	0x00BC, r25
    while(!(TWCR&0x80));
     564:	90 91 bc 00 	lds	r25, 0x00BC
     568:	97 ff       	sbrs	r25, 7
     56a:	fc cf       	rjmp	.-8      	; 0x564 <i2c_read+0x32>
    
    TWCR |= 1<<TWINT | 1<< TWSTA| 1<<TWEN;
     56c:	90 91 bc 00 	lds	r25, 0x00BC
     570:	94 6a       	ori	r25, 0xA4	; 164
     572:	90 93 bc 00 	sts	0x00BC, r25
    while(!(TWCR&0x80));
     576:	90 91 bc 00 	lds	r25, 0x00BC
     57a:	97 ff       	sbrs	r25, 7
     57c:	fc cf       	rjmp	.-8      	; 0x576 <i2c_read+0x44>
    
    TWDR = dev_add<<1 | 0x01;       // 데이터를 읽겠다는 주소 셋
     57e:	88 0f       	add	r24, r24
     580:	81 60       	ori	r24, 0x01	; 1
     582:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = 1<<TWINT| 1<<TWEN;
     586:	84 e8       	ldi	r24, 0x84	; 132
     588:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR&0x80));
     58c:	80 91 bc 00 	lds	r24, 0x00BC
     590:	87 ff       	sbrs	r24, 7
     592:	fc cf       	rjmp	.-8      	; 0x58c <i2c_read+0x5a>
    
    TWCR = 1<<TWINT| 1<<TWEN;
     594:	84 e8       	ldi	r24, 0x84	; 132
     596:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR&0x80));
     59a:	80 91 bc 00 	lds	r24, 0x00BC
     59e:	87 ff       	sbrs	r24, 7
     5a0:	fc cf       	rjmp	.-8      	; 0x59a <i2c_read+0x68>
    
    data=TWDR;
     5a2:	80 91 bb 00 	lds	r24, 0x00BB
    TWCR = 1<<TWINT | 1<< TWSTO| 1<<TWEN;  //stop 비트
     5a6:	94 e9       	ldi	r25, 0x94	; 148
     5a8:	90 93 bc 00 	sts	0x00BC, r25
    
    return get_time_vale(data);
     5ac:	b9 cf       	rjmp	.-142    	; 0x520 <get_time_vale>

000005ae <__vector_16>:
#include "motor.h"

ISR(TIMER0_COMPA_vect)
{
     5ae:	1f 92       	push	r1
     5b0:	0f 92       	push	r0
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	0f 92       	push	r0
     5b6:	11 24       	eor	r1, r1
    PORTD |= 0x10;
     5b8:	5c 9a       	sbi	0x0b, 4	; 11
}
     5ba:	0f 90       	pop	r0
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	0f 90       	pop	r0
     5c0:	1f 90       	pop	r1
     5c2:	18 95       	reti

000005c4 <init_motor>:
    }
}

void init_motor()
{
    TCCR0A = (1<<WGM01)|(1<<WGM00);
     5c4:	83 e0       	ldi	r24, 0x03	; 3
     5c6:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1<<CS02)|(1<<CS00);
     5c8:	95 e0       	ldi	r25, 0x05	; 5
     5ca:	95 bd       	out	0x25, r25	; 37
    TIMSK0 = (1<<OCIE0A)|(1<<TOIE0);
     5cc:	80 93 6e 00 	sts	0x006E, r24
    
    // 잠금 해제
    OCR0A  = 226;
     5d0:	82 ee       	ldi	r24, 0xE2	; 226
     5d2:	87 bd       	out	0x27, r24	; 39
     5d4:	08 95       	ret

000005d6 <lock_or_unlock>:
}

void lock_or_unlock( unsigned char lock )
{
    // 잠금 명령일경우
    if(lock == 'l')
     5d6:	8c 36       	cpi	r24, 0x6C	; 108
     5d8:	11 f4       	brne	.+4      	; 0x5de <lock_or_unlock+0x8>
        OCR0A = 244;
     5da:	84 ef       	ldi	r24, 0xF4	; 244
     5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <lock_or_unlock+0xa>
    // 잠금 해제 명령일경우
    else
        OCR0A = 226;
     5de:	82 ee       	ldi	r24, 0xE2	; 226
     5e0:	87 bd       	out	0x27, r24	; 39
     5e2:	08 95       	ret

000005e4 <shutdown_motor_voltage>:
}

void shutdown_motor_voltage()
{
    // pwm 발생 인터럽트 해제
    TIMSK0 = (0<<OCIE0A)|(0<<TOIE0);
     5e4:	10 92 6e 00 	sts	0x006E, r1
    PORTD &=~0x10;
     5e8:	5c 98       	cbi	0x0b, 4	; 11
     5ea:	08 95       	ret

000005ec <__vector_18>:
{
    PORTD |= 0x10;
}

ISR(TIMER0_OVF_vect)
{
     5ec:	1f 92       	push	r1
     5ee:	0f 92       	push	r0
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	0f 92       	push	r0
     5f4:	11 24       	eor	r1, r1
     5f6:	2f 93       	push	r18
     5f8:	3f 93       	push	r19
     5fa:	4f 93       	push	r20
     5fc:	5f 93       	push	r21
     5fe:	6f 93       	push	r22
     600:	7f 93       	push	r23
     602:	8f 93       	push	r24
     604:	9f 93       	push	r25
     606:	af 93       	push	r26
     608:	bf 93       	push	r27
     60a:	ef 93       	push	r30
     60c:	ff 93       	push	r31
    static char cnt;
    
    cnt++;
     60e:	80 91 cc 03 	lds	r24, 0x03CC
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	80 93 cc 03 	sts	0x03CC, r24
    PORTD &= ~0x10;
     618:	5c 98       	cbi	0x0b, 4	; 11
    TCNT0  = 0x00;
     61a:	16 bc       	out	0x26, r1	; 38
    
    // 최소 모터 동작 주기후 모터 전원해제
    if(cnt==70)
     61c:	80 91 cc 03 	lds	r24, 0x03CC
     620:	86 34       	cpi	r24, 0x46	; 70
     622:	19 f4       	brne	.+6      	; 0x62a <__vector_18+0x3e>
    {
        shutdown_motor_voltage();
     624:	df df       	rcall	.-66     	; 0x5e4 <shutdown_motor_voltage>
     626:	10 92 cc 03 	sts	0x03CC, r1
        cnt = 0;
     62a:	ff 91       	pop	r31
    }
}
     62c:	ef 91       	pop	r30
     62e:	bf 91       	pop	r27
     630:	af 91       	pop	r26
     632:	9f 91       	pop	r25
     634:	8f 91       	pop	r24
     636:	7f 91       	pop	r23
     638:	6f 91       	pop	r22
     63a:	5f 91       	pop	r21
     63c:	4f 91       	pop	r20
     63e:	3f 91       	pop	r19
     640:	2f 91       	pop	r18
     642:	0f 90       	pop	r0
     644:	0f be       	out	0x3f, r0	; 63
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <turnon_motor_voltage>:
}

void turnon_motor_voltage()
{
    // pwm 발생 인터럽트 설정
    TIMSK0 |= (1<<OCIE0A)|(1<<TOIE0);
     64c:	ee e6       	ldi	r30, 0x6E	; 110
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 81       	ld	r24, Z
     652:	83 60       	ori	r24, 0x03	; 3
     654:	80 83       	st	Z, r24
    PORTD  |= 0x10;
     656:	5c 9a       	sbi	0x0b, 4	; 11
     658:	08 95       	ret

0000065a <init_SPI_master>:
    {0x07,0x07,0x07,0x07,0x07,0xFF,0xFF,0xFF,0xE0,0xE0,0xE0,0xE0,0xE0,0xFF,0xFF,0xFF}  /*"]"*/
};

void init_SPI_master(void)
{
    SPI_DDR |= ((1 << SS) | (1 << SCK) | (1 << MOSI) | (1<<DC)|(1<<RST));
     65a:	84 b1       	in	r24, 0x04	; 4
     65c:	8c 6b       	ori	r24, 0xBC	; 188
     65e:	84 b9       	out	0x04, r24	; 4
    SPI_PORT|= (1 << SS)|(1<<RST);
     660:	85 b1       	in	r24, 0x05	; 5
     662:	84 61       	ori	r24, 0x14	; 20
     664:	85 b9       	out	0x05, r24	; 5
    SPCR     = ((1 << SPE)|(1 << MSTR)|(1 << SPR0)|(0<<SPR1)); // 16M/16=1Mhz
     666:	81 e5       	ldi	r24, 0x51	; 81
     668:	8c bd       	out	0x2c, r24	; 44
     66a:	08 95       	ret

0000066c <write_oled>:

}

void write_oled(unsigned char data)
{
    SPI_PORT &=~(1<<SS);
     66c:	2c 98       	cbi	0x05, 4	; 5
    SPI_PORT &=~(1<<DC);
     66e:	2b 98       	cbi	0x05, 3	; 5
    SPDR = data;
     670:	8e bd       	out	0x2e, r24	; 46
    
    while(!(SPSR&(1<<SPIF)));
     672:	0d b4       	in	r0, 0x2d	; 45
     674:	07 fe       	sbrs	r0, 7
     676:	fd cf       	rjmp	.-6      	; 0x672 <write_oled+0x6>
    SPI_PORT|=(1<<SS);
     678:	2c 9a       	sbi	0x05, 4	; 5
     67a:	08 95       	ret

0000067c <write_oled_data>:
}

void write_oled_data(unsigned char data)
{
    SPI_PORT &=~(1<<SS);
     67c:	2c 98       	cbi	0x05, 4	; 5
    SPI_PORT |= (1<<DC);
     67e:	2b 9a       	sbi	0x05, 3	; 5
    SPDR = data;
     680:	8e bd       	out	0x2e, r24	; 46
    
    while(!(SPSR&(1<<SPIF)));
     682:	0d b4       	in	r0, 0x2d	; 45
     684:	07 fe       	sbrs	r0, 7
     686:	fd cf       	rjmp	.-6      	; 0x682 <write_oled_data+0x6>
    SPI_PORT|=(1<<SS);
     688:	2c 9a       	sbi	0x05, 4	; 5
    SPI_PORT &=~(1<<DC);
     68a:	2b 98       	cbi	0x05, 3	; 5
     68c:	08 95       	ret

0000068e <draw_char>:
{
    draw_data(128,64,0,0,0x00);
}

void draw_char(int w, int h, int x, int y, char *data)
{
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	ec e4       	ldi	r30, 0x4C	; 76
     694:	f3 e0       	ldi	r31, 0x03	; 3
     696:	98 c7       	rjmp	.+3888   	; 0x15c8 <__prologue_saves__+0x6>
     698:	5c 01       	movw	r10, r24
     69a:	fb 01       	movw	r30, r22
	 * data : 그려질 데이터 배열
	 */
	
	unsigned char i,j;
	unsigned char idx	= 0 ;
	unsigned height		= h/8; 	    //OLED는 한 페이지당 8픽셀을 차지
     69c:	77 fd       	sbrc	r23, 7
     69e:	37 96       	adiw	r30, 0x07	; 7
     6a0:	ef 01       	movw	r28, r30
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	d5 95       	asr	r29
     6a6:	c7 95       	ror	r28
     6a8:	8a 95       	dec	r24
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <draw_char+0x16>
     6ac:	69 01       	movw	r12, r18
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
     6ae:	80 eb       	ldi	r24, 0xB0	; 176
     6b0:	c8 0e       	add	r12, r24
     6b2:	d1 1c       	adc	r13, r1
     6b4:	7a 01       	movw	r14, r20
	unsigned startX     = x+5;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
     6b6:	95 e0       	ldi	r25, 0x05	; 5
     6b8:	e9 0e       	add	r14, r25
     6ba:	f1 1c       	adc	r15, r1
     6bc:	47 01       	movw	r8, r14
	unsigned endX		= startX + w;
     6be:	8a 0c       	add	r8, r10
     6c0:	9b 1c       	adc	r9, r11
     6c2:	61 2c       	mov	r6, r1
	 * y : 그려질 글자의 시작 y 좌표 (0~7)
	 * data : 그려질 데이터 배열
	 */
	
	unsigned char i,j;
	unsigned char idx	= 0 ;
     6c4:	71 2c       	mov	r7, r1
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
	unsigned startX     = x+5;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
	unsigned endX		= startX + w;
    

	for( i=0;i<height;i++ )
     6c6:	87 2d       	mov	r24, r7
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	8c 17       	cp	r24, r28
     6cc:	9d 07       	cpc	r25, r29
     6ce:	18 f5       	brcc	.+70     	; 0x716 <draw_char+0x88>
     6d0:	87 2d       	mov	r24, r7
	{
		write_oled(startY+i);
     6d2:	8c 0d       	add	r24, r12
     6d4:	cb df       	rcall	.-106    	; 0x66c <write_oled>
     6d6:	81 e2       	ldi	r24, 0x21	; 33
     6d8:	c9 df       	rcall	.-110    	; 0x66c <write_oled>
		write_oled(CHANGE_COLUM);
     6da:	8e 2d       	mov	r24, r14
     6dc:	c7 df       	rcall	.-114    	; 0x66c <write_oled>
     6de:	88 2d       	mov	r24, r8
		write_oled(startX);
     6e0:	c5 df       	rcall	.-118    	; 0x66c <write_oled>
     6e2:	86 2d       	mov	r24, r6
     6e4:	28 2f       	mov	r18, r24
		write_oled(endX);
     6e6:	26 19       	sub	r18, r6
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	2a 15       	cp	r18, r10

		for( j=0;j<w;j++ )
     6ec:	3b 05       	cpc	r19, r11
     6ee:	84 f4       	brge	.+32     	; 0x710 <draw_char+0x82>
     6f0:	55 24       	eor	r5, r5
     6f2:	53 94       	inc	r5
     6f4:	58 0e       	add	r5, r24
     6f6:	f8 01       	movw	r30, r16
     6f8:	e8 0f       	add	r30, r24
		{
			write_oled_data(data[idx++]);
     6fa:	f1 1d       	adc	r31, r1
     6fc:	80 81       	ld	r24, Z
     6fe:	be df       	rcall	.-132    	; 0x67c <write_oled_data>
     700:	83 ef       	ldi	r24, 0xF3	; 243
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <draw_char+0x76>
     708:	00 c0       	rjmp	.+0      	; 0x70a <draw_char+0x7c>
     70a:	00 00       	nop
     70c:	85 2d       	mov	r24, r5
     70e:	ea cf       	rjmp	.-44     	; 0x6e4 <draw_char+0x56>
     710:	73 94       	inc	r7
     712:	68 2e       	mov	r6, r24
     714:	d8 cf       	rjmp	.-80     	; 0x6c6 <draw_char+0x38>
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	ef e0       	ldi	r30, 0x0F	; 15
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
	unsigned startX     = x+5;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
	unsigned endX		= startX + w;
    

	for( i=0;i<height;i++ )
     71c:	71 c7       	rjmp	.+3810   	; 0x1600 <__epilogue_restores__+0x6>

0000071e <draw_data>:
        }
    }
}

void draw_data(int w, int h, int x, int y, char data)
{
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	e4 e9       	ldi	r30, 0x94	; 148
     724:	f3 e0       	ldi	r31, 0x03	; 3
     726:	53 c7       	rjmp	.+3750   	; 0x15ce <__prologue_saves__+0xc>
     728:	7c 01       	movw	r14, r24
     72a:	6a 01       	movw	r12, r20
     72c:	fb 01       	movw	r30, r22
	 * y : 그려질 글자의 시작 y 좌표 (0~7)
	 * data : 그려질 데이터
	 */
	
	unsigned char i,j;
	unsigned height		= h/8; 	    //OLED는 한 페이지당 8픽셀을 차지
     72e:	77 fd       	sbrc	r23, 7
     730:	37 96       	adiw	r30, 0x07	; 7
     732:	ef 01       	movw	r28, r30
     734:	83 e0       	ldi	r24, 0x03	; 3
     736:	d5 95       	asr	r29
     738:	c7 95       	ror	r28
     73a:	8a 95       	dec	r24
     73c:	e1 f7       	brne	.-8      	; 0x736 <draw_data+0x18>
     73e:	59 01       	movw	r10, r18
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
     740:	80 eb       	ldi	r24, 0xB0	; 176
     742:	a8 0e       	add	r10, r24
     744:	b1 1c       	adc	r11, r1
     746:	91 2c       	mov	r9, r1
	unsigned startX     = x;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
	unsigned endX		= startX + w;
    
	for( i=0;i<height;i++ )
     748:	b6 01       	movw	r22, r12
	{
		write_oled(startY+i);
		write_oled(CHANGE_COLUM);
		write_oled(startX);
		write_oled(endX-1);
     74a:	6e 0d       	add	r22, r14
     74c:	7f 1d       	adc	r23, r15
     74e:	1f ef       	ldi	r17, 0xFF	; 255
     750:	16 0f       	add	r17, r22
     752:	29 2d       	mov	r18, r9
	unsigned height		= h/8; 	    //OLED는 한 페이지당 8픽셀을 차지
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
	unsigned startX     = x;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
	unsigned endX		= startX + w;
    
	for( i=0;i<height;i++ )
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	2c 17       	cp	r18, r28
     758:	3d 07       	cpc	r19, r29
     75a:	d8 f4       	brcc	.+54     	; 0x792 <draw_data+0x74>
     75c:	89 2d       	mov	r24, r9
	{
		write_oled(startY+i);
     75e:	8a 0d       	add	r24, r10
     760:	85 df       	rcall	.-246    	; 0x66c <write_oled>
     762:	81 e2       	ldi	r24, 0x21	; 33
     764:	83 df       	rcall	.-250    	; 0x66c <write_oled>
		write_oled(CHANGE_COLUM);
     766:	8c 2d       	mov	r24, r12
     768:	81 df       	rcall	.-254    	; 0x66c <write_oled>
     76a:	81 2f       	mov	r24, r17
		write_oled(startX);
     76c:	7f df       	rcall	.-258    	; 0x66c <write_oled>
     76e:	81 2c       	mov	r8, r1
     770:	88 2d       	mov	r24, r8
		write_oled(endX-1);
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	8e 15       	cp	r24, r14
     776:	9f 05       	cpc	r25, r15
        
		for(j=0;j<w;j++)
     778:	54 f4       	brge	.+20     	; 0x78e <draw_data+0x70>
     77a:	80 2f       	mov	r24, r16
     77c:	7f df       	rcall	.-258    	; 0x67c <write_oled_data>
     77e:	83 ef       	ldi	r24, 0xF3	; 243
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	f1 f7       	brne	.-4      	; 0x782 <draw_data+0x64>
     786:	00 c0       	rjmp	.+0      	; 0x788 <draw_data+0x6a>
     788:	00 00       	nop
     78a:	83 94       	inc	r8
     78c:	f1 cf       	rjmp	.-30     	; 0x770 <draw_data+0x52>
     78e:	93 94       	inc	r9
     790:	e0 cf       	rjmp	.-64     	; 0x752 <draw_data+0x34>
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	ec e0       	ldi	r30, 0x0C	; 12
     798:	36 c7       	rjmp	.+3692   	; 0x1606 <__epilogue_restores__+0xc>

0000079a <clear_oled>:
    SPI_PORT|=(1<<SS);
    SPI_PORT &=~(1<<DC);
}

void clear_oled(void)
{
     79a:	0f 93       	push	r16
    draw_data(128,64,0,0,0x00);
     79c:	00 e0       	ldi	r16, 0x00	; 0
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	60 e4       	ldi	r22, 0x40	; 64
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	80 e8       	ldi	r24, 0x80	; 128
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	b7 df       	rcall	.-146    	; 0x71e <draw_data>
     7b0:	0f 91       	pop	r16
}
     7b2:	08 95       	ret

000007b4 <write_num_to_oled>:
		}
	}
}

void write_num_to_oled(unsigned long current_money)
{
     7b4:	aa e0       	ldi	r26, 0x0A	; 10
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	ef ed       	ldi	r30, 0xDF	; 223
     7ba:	f3 e0       	ldi	r31, 0x03	; 3
     7bc:	04 c7       	rjmp	.+3592   	; 0x15c6 <__prologue_saves__+0x4>
     7be:	4b 01       	movw	r8, r22
     7c0:	5c 01       	movw	r10, r24
     7c2:	d1 2c       	mov	r13, r1
	unsigned char curr_coin[10];
	unsigned char position 	= 0;
     7c4:	2a e0       	ldi	r18, 0x0A	; 10
	unsigned char startX = 0;

	cu_co = current_money;
	while(1)
	{
		curr_coin[position++] = cu_co%10;
     7c6:	42 2e       	mov	r4, r18
     7c8:	51 2c       	mov	r5, r1
     7ca:	61 2c       	mov	r6, r1
     7cc:	71 2c       	mov	r7, r1
     7ce:	ee 24       	eor	r14, r14
     7d0:	e3 94       	inc	r14
     7d2:	ed 0c       	add	r14, r13
     7d4:	01 e0       	ldi	r16, 0x01	; 1
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	0c 0f       	add	r16, r28
     7da:	1d 1f       	adc	r17, r29
     7dc:	0d 0d       	add	r16, r13
     7de:	11 1d       	adc	r17, r1
     7e0:	a3 01       	movw	r20, r6
     7e2:	92 01       	movw	r18, r4
     7e4:	cc d6       	rcall	.+3480   	; 0x157e <__udivmodsi4>
     7e6:	f8 01       	movw	r30, r16
     7e8:	60 83       	st	Z, r22
     7ea:	b9 01       	movw	r22, r18
     7ec:	ca 01       	movw	r24, r20
     7ee:	ef e0       	ldi	r30, 0x0F	; 15
     7f0:	f7 e2       	ldi	r31, 0x27	; 39
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <write_num_to_oled+0x3e>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <write_num_to_oled+0x44>
     7f8:	00 00       	nop
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
		cu_co = cu_co/10;

        _delay_ms(2);
		if(cu_co == 0)
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	11 f0       	breq	.+4      	; 0x808 <write_num_to_oled+0x54>
     804:	de 2c       	mov	r13, r14
     806:	e3 cf       	rjmp	.-58     	; 0x7ce <write_num_to_oled+0x1a>
	unsigned char startX = 0;

	cu_co = current_money;
	while(1)
	{
		curr_coin[position++] = cu_co%10;
     808:	cd 2c       	mov	r12, r13
     80a:	f1 2c       	mov	r15, r1
     80c:	e0 94       	com	r14
        _delay_ms(2);
		if(cu_co == 0)
			break;
	}

	startX = (110 - ((position+1) * 8))/2 ; // 출력할 숫자를 가운데 정렬하기위한
     80e:	f0 94       	com	r15
     810:	8e 2d       	mov	r24, r14
     812:	88 0f       	add	r24, r24
     814:	88 0f       	add	r24, r24
     816:	17 e3       	ldi	r17, 0x37	; 55
     818:	18 0f       	add	r17, r24
     81a:	00 e0       	ldi	r16, 0x00	; 0
     81c:	25 e0       	ldi	r18, 0x05	; 5
    
    if(current_money==0)
        draw_data(100,16,5,5,0x00);
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	81 14       	cp	r8, r1
     822:	91 04       	cpc	r9, r1
			break;
	}

	startX = (110 - ((position+1) * 8))/2 ; // 출력할 숫자를 가운데 정렬하기위한
    
    if(current_money==0)
     824:	a1 04       	cpc	r10, r1
     826:	b1 04       	cpc	r11, r1
     828:	39 f4       	brne	.+14     	; 0x838 <write_num_to_oled+0x84>
     82a:	45 e0       	ldi	r20, 0x05	; 5
     82c:	50 e0       	ldi	r21, 0x00	; 0
        draw_data(100,16,5,5,0x00);
     82e:	60 e1       	ldi	r22, 0x10	; 16
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	84 e6       	ldi	r24, 0x64	; 100
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	06 c0       	rjmp	.+12     	; 0x844 <write_num_to_oled+0x90>
     838:	44 e0       	ldi	r20, 0x04	; 4
     83a:	50 e0       	ldi	r21, 0x00	; 0
        
    else
        draw_data(120,16,4,5,0x00);
     83c:	60 e1       	ldi	r22, 0x10	; 16
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	88 e7       	ldi	r24, 0x78	; 120
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	6c df       	rcall	.-296    	; 0x71e <draw_data>
     846:	a1 2c       	mov	r10, r1
     848:	b1 2c       	mov	r11, r1
     84a:	e1 2e       	mov	r14, r17
//        draw_data(8*(position+1),16,startX,5,0x00); // 그려진부분에 겹처서 그리는것을 방지하기위해 그리고자하는 부분에 그려져있던것을 클리어

	for( position = position-1 ; position > 0 ; position-- )
     84c:	f1 2c       	mov	r15, r1
     84e:	dd 20       	and	r13, r13
     850:	e1 f0       	breq	.+56     	; 0x88a <write_num_to_oled+0xd6>
     852:	e1 e0       	ldi	r30, 0x01	; 1
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	ec 0f       	add	r30, r28
   		draw_char(8,16,startX+(i++*10),5,font_num[curr_coin[position]]);
     858:	fd 1f       	adc	r31, r29
     85a:	ed 0d       	add	r30, r13
     85c:	f1 1d       	adc	r31, r1
     85e:	00 81       	ld	r16, Z
     860:	f0 e1       	ldi	r31, 0x10	; 16
     862:	0f 9f       	mul	r16, r31
     864:	80 01       	movw	r16, r0
     866:	11 24       	eor	r1, r1
     868:	00 5a       	subi	r16, 0xA0	; 160
     86a:	1e 4f       	sbci	r17, 0xFE	; 254
     86c:	a5 01       	movw	r20, r10
     86e:	4e 0d       	add	r20, r14
     870:	5f 1d       	adc	r21, r15
     872:	25 e0       	ldi	r18, 0x05	; 5
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	60 e1       	ldi	r22, 0x10	; 16
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	88 e0       	ldi	r24, 0x08	; 8
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	07 df       	rcall	.-498    	; 0x68e <draw_char>
     880:	da 94       	dec	r13
     882:	8a e0       	ldi	r24, 0x0A	; 10
     884:	a8 0e       	add	r10, r24
     886:	b1 1c       	adc	r11, r1
        
    else
        draw_data(120,16,4,5,0x00);
//        draw_data(8*(position+1),16,startX,5,0x00); // 그려진부분에 겹처서 그리는것을 방지하기위해 그리고자하는 부분에 그려져있던것을 클리어

	for( position = position-1 ; position > 0 ; position-- )
     888:	e2 cf       	rjmp	.-60     	; 0x84e <write_num_to_oled+0x9a>
     88a:	dd 24       	eor	r13, r13
     88c:	d3 94       	inc	r13
     88e:	dc 0c       	add	r13, r12
     890:	09 81       	ldd	r16, Y+1	; 0x01
   		draw_char(8,16,startX+(i++*10),5,font_num[curr_coin[position]]);
	
   	draw_char(8,16,startX+(i++*10),5,font_num[curr_coin[0]]);
     892:	e0 e1       	ldi	r30, 0x10	; 16
     894:	0e 9f       	mul	r16, r30
     896:	80 01       	movw	r16, r0
     898:	11 24       	eor	r1, r1
     89a:	00 5a       	subi	r16, 0xA0	; 160
     89c:	1e 4f       	sbci	r17, 0xFE	; 254
     89e:	a7 01       	movw	r20, r14
     8a0:	fa e0       	ldi	r31, 0x0A	; 10
     8a2:	cf 9e       	mul	r12, r31
     8a4:	40 0d       	add	r20, r0
     8a6:	51 1d       	adc	r21, r1
     8a8:	11 24       	eor	r1, r1
     8aa:	25 e0       	ldi	r18, 0x05	; 5
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	60 e1       	ldi	r22, 0x10	; 16
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	88 e0       	ldi	r24, 0x08	; 8
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	eb de       	rcall	.-554    	; 0x68e <draw_char>
     8b8:	a7 01       	movw	r20, r14
     8ba:	8a e0       	ldi	r24, 0x0A	; 10
     8bc:	d8 9e       	mul	r13, r24
     8be:	40 0d       	add	r20, r0
     8c0:	51 1d       	adc	r21, r1
   	draw_char(8,16,startX+(i++*10),5,font_num[10]); //글자 "원"출력
     8c2:	11 24       	eor	r1, r1
     8c4:	00 e0       	ldi	r16, 0x00	; 0
     8c6:	12 e0       	ldi	r17, 0x02	; 2
     8c8:	25 e0       	ldi	r18, 0x05	; 5
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	60 e1       	ldi	r22, 0x10	; 16
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	88 e0       	ldi	r24, 0x08	; 8
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	dc de       	rcall	.-584    	; 0x68e <draw_char>
     8d6:	2a 96       	adiw	r28, 0x0a	; 10
     8d8:	e0 e1       	ldi	r30, 0x10	; 16
     8da:	91 c6       	rjmp	.+3362   	; 0x15fe <__epilogue_restores__+0x4>

000008dc <init_oled>:
}

void init_oled(void)
{
    init_SPI_master(); //init SPI
     8dc:	be de       	rcall	.-644    	; 0x65a <init_SPI_master>
     8de:	8e ea       	ldi	r24, 0xAE	; 174
    
    write_oled(0xAE); //display off
     8e0:	c5 de       	rcall	.-630    	; 0x66c <write_oled>
     8e2:	80 e2       	ldi	r24, 0x20	; 32
     8e4:	c3 de       	rcall	.-634    	; 0x66c <write_oled>
    write_oled(0x20); //Set Memory Addressing Mode
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	c1 de       	rcall	.-638    	; 0x66c <write_oled>
     8ea:	80 eb       	ldi	r24, 0xB0	; 176
    write_oled(0x02); //00);Horizontal Addressing Mode;01);Vertical Addressing Mode;10);Page Addressing Mode (RESET);11);Invalid
     8ec:	bf de       	rcall	.-642    	; 0x66c <write_oled>
     8ee:	88 ec       	ldi	r24, 0xC8	; 200
     8f0:	bd de       	rcall	.-646    	; 0x66c <write_oled>
    write_oled(CHANGE_PAGE); //Set Page Start Address for Page Addressing Mode);0-7
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	bb de       	rcall	.-650    	; 0x66c <write_oled>
     8f6:	80 e1       	ldi	r24, 0x10	; 16
    write_oled(0xc8); //Set COM Output Scan Direction
     8f8:	b9 de       	rcall	.-654    	; 0x66c <write_oled>
     8fa:	80 e4       	ldi	r24, 0x40	; 64
     8fc:	b7 de       	rcall	.-658    	; 0x66c <write_oled>
    write_oled(0x00); //---set low column address
     8fe:	81 e8       	ldi	r24, 0x81	; 129
     900:	b5 de       	rcall	.-662    	; 0x66c <write_oled>
     902:	8f e7       	ldi	r24, 0x7F	; 127
    write_oled(0x10); //---set high column address
     904:	b3 de       	rcall	.-666    	; 0x66c <write_oled>
     906:	81 ea       	ldi	r24, 0xA1	; 161
     908:	b1 de       	rcall	.-670    	; 0x66c <write_oled>
    write_oled(0x40); //--set start line address
     90a:	88 ea       	ldi	r24, 0xA8	; 168
     90c:	af de       	rcall	.-674    	; 0x66c <write_oled>
     90e:	8f e3       	ldi	r24, 0x3F	; 63
    write_oled(0x81); //--set contrast control register
     910:	ad de       	rcall	.-678    	; 0x66c <write_oled>
     912:	84 ea       	ldi	r24, 0xA4	; 164
     914:	ab de       	rcall	.-682    	; 0x66c <write_oled>
    write_oled(0x7f);
     916:	83 ed       	ldi	r24, 0xD3	; 211
     918:	a9 de       	rcall	.-686    	; 0x66c <write_oled>
     91a:	80 e0       	ldi	r24, 0x00	; 0
    write_oled(0xa1); //--set segment re-map 0 to 127
     91c:	a7 de       	rcall	.-690    	; 0x66c <write_oled>
     91e:	85 ed       	ldi	r24, 0xD5	; 213
     920:	a5 de       	rcall	.-694    	; 0x66c <write_oled>
    write_oled(0xa8); //--set multiplex ratio(1 to 64)
     922:	80 ef       	ldi	r24, 0xF0	; 240
     924:	a3 de       	rcall	.-698    	; 0x66c <write_oled>
     926:	89 ed       	ldi	r24, 0xD9	; 217
    write_oled(0x3F);
     928:	a1 de       	rcall	.-702    	; 0x66c <write_oled>
     92a:	82 e2       	ldi	r24, 0x22	; 34
     92c:	9f de       	rcall	.-706    	; 0x66c <write_oled>
    write_oled(0xa4); //0xa4);Output follows RAM content;0xa5);Output ignores RAM content
     92e:	8a ed       	ldi	r24, 0xDA	; 218
     930:	9d de       	rcall	.-710    	; 0x66c <write_oled>
     932:	82 e1       	ldi	r24, 0x12	; 18
    write_oled(0xd3); //-set display offset
     934:	9b de       	rcall	.-714    	; 0x66c <write_oled>
     936:	8b ed       	ldi	r24, 0xDB	; 219
     938:	99 de       	rcall	.-718    	; 0x66c <write_oled>
    write_oled(0x00); //-not offset
     93a:	80 e2       	ldi	r24, 0x20	; 32
     93c:	97 de       	rcall	.-722    	; 0x66c <write_oled>
     93e:	8d e8       	ldi	r24, 0x8D	; 141
    write_oled(0xd5); //--set display clock divide ratio/oscillator frequency
     940:	95 de       	rcall	.-726    	; 0x66c <write_oled>
     942:	84 e1       	ldi	r24, 0x14	; 20
     944:	93 de       	rcall	.-730    	; 0x66c <write_oled>
    write_oled(0xf0); //--set divide ratio
     946:	86 ea       	ldi	r24, 0xA6	; 166
     948:	91 de       	rcall	.-734    	; 0x66c <write_oled>
     94a:	8f ea       	ldi	r24, 0xAF	; 175
    write_oled(0xd9); //--set pre-charge period
     94c:	8f de       	rcall	.-738    	; 0x66c <write_oled>
     94e:	25 cf       	rjmp	.-438    	; 0x79a <clear_oled>

00000950 <draw_percentage>:
    
    clear_oled(); // 화면 클리어
}

void draw_percentage(unsigned char percent)
{
     950:	0f 93       	push	r16
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
    
    draw_data(percent,8,7,0,0xCf);
     956:	c8 2f       	mov	r28, r24
     958:	d0 e0       	ldi	r29, 0x00	; 0
     95a:	0f ec       	ldi	r16, 0xCF	; 207
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	47 e0       	ldi	r20, 0x07	; 7
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	68 e0       	ldi	r22, 0x08	; 8
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	ce 01       	movw	r24, r28
     96a:	d9 de       	rcall	.-590    	; 0x71e <draw_data>
     96c:	03 ef       	ldi	r16, 0xF3	; 243
    draw_data(percent,8,7,1,0xf3);
     96e:	21 e0       	ldi	r18, 0x01	; 1
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	47 e0       	ldi	r20, 0x07	; 7
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	68 e0       	ldi	r22, 0x08	; 8
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	ce 01       	movw	r24, r28
     97c:	d0 de       	rcall	.-608    	; 0x71e <draw_data>
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
}
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <draw_edge>:


void draw_edge(unsigned char ispercent)
{
     986:	0f 93       	push	r16
     988:	cf 93       	push	r28
     98a:	c8 2f       	mov	r28, r24
    draw_data(128,8,0,0,0x0f);
     98c:	0f e0       	ldi	r16, 0x0F	; 15
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	68 e0       	ldi	r22, 0x08	; 8
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	80 e8       	ldi	r24, 0x80	; 128
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	bf de       	rcall	.-642    	; 0x71e <draw_data>
     9a0:	cc 23       	and	r28, r28
    if(ispercent)
     9a2:	e9 f0       	breq	.+58     	; 0x9de <draw_edge+0x58>
     9a4:	00 ef       	ldi	r16, 0xF0	; 240
    {
        draw_data(128,8,0,1,0xf0);
     9a6:	21 e0       	ldi	r18, 0x01	; 1
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	68 e0       	ldi	r22, 0x08	; 8
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	80 e8       	ldi	r24, 0x80	; 128
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	b3 de       	rcall	.-666    	; 0x71e <draw_data>
     9b8:	0f e0       	ldi	r16, 0x0F	; 15
     9ba:	22 e0       	ldi	r18, 0x02	; 2
        draw_data(26,8,4,2,0x0f);
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	44 e0       	ldi	r20, 0x04	; 4
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	68 e0       	ldi	r22, 0x08	; 8
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	8a e1       	ldi	r24, 0x1A	; 26
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	a9 de       	rcall	.-686    	; 0x71e <draw_data>
     9cc:	22 e0       	ldi	r18, 0x02	; 2
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	42 e6       	ldi	r20, 0x62	; 98
        draw_data(26,8,98,2,0x0f);
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	68 e0       	ldi	r22, 0x08	; 8
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	8a e1       	ldi	r24, 0x1A	; 26
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 de       	rcall	.-704    	; 0x71e <draw_data>
     9de:	0f ef       	ldi	r16, 0xFF	; 255
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e0       	ldi	r20, 0x00	; 0
    }
    draw_data(4, 64,0,0,0xff);
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	60 e4       	ldi	r22, 0x40	; 64
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	84 e0       	ldi	r24, 0x04	; 4
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	96 de       	rcall	.-724    	; 0x71e <draw_data>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	4c e7       	ldi	r20, 0x7C	; 124
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	60 e4       	ldi	r22, 0x40	; 64
    draw_data(4, 64,124,0,0xff);
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	84 e0       	ldi	r24, 0x04	; 4
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	8d de       	rcall	.-742    	; 0x71e <draw_data>
     a04:	00 ef       	ldi	r16, 0xF0	; 240
     a06:	28 e0       	ldi	r18, 0x08	; 8
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	44 e0       	ldi	r20, 0x04	; 4
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	68 e0       	ldi	r22, 0x08	; 8
    draw_data(120,8,4,8,0xf0);
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	88 e7       	ldi	r24, 0x78	; 120
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	83 de       	rcall	.-762    	; 0x71e <draw_data>
     a18:	cf 91       	pop	r28
     a1a:	0f 91       	pop	r16
     a1c:	08 95       	ret

00000a1e <__vector_15>:
#include "interaction.h"
#include <avr/interrupt.h>

ISR(TIMER1_OVF_vect)
{
     a1e:	1f 92       	push	r1
     a20:	0f 92       	push	r0
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	0f 92       	push	r0
     a26:	11 24       	eor	r1, r1
     a28:	8f 93       	push	r24
    static unsigned char cnt = 0;
    
    TCNT1 = 0x00;
     a2a:	10 92 85 00 	sts	0x0085, r1
     a2e:	10 92 84 00 	sts	0x0084, r1
    cnt++;
     a32:	80 91 cd 03 	lds	r24, 0x03CD
     a36:	8f 5f       	subi	r24, 0xFF	; 255
     a38:	80 93 cd 03 	sts	0x03CD, r24
    
    // 6초가 지난경우에 멜로디를 끔
    if( cnt==2 )
     a3c:	82 30       	cpi	r24, 0x02	; 2
     a3e:	29 f4       	brne	.+10     	; 0xa4a <__vector_15+0x2c>
    {
        PORTA  &= ~(1<<MELODY);
     a40:	12 98       	cbi	0x02, 2	; 2
        
        // 타이머1 해제
        TIMSK1 = 0x00;
     a42:	10 92 6f 00 	sts	0x006F, r1
        cnt = 0;
     a46:	10 92 cd 03 	sts	0x03CD, r1
    }
}
     a4a:	8f 91       	pop	r24
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <init_interaction>:

void init_interaction(void)
{
    // for led interacition
    DDRD   |= (1<<RED_LED)|(1<<BLUE_LED)|(1<<GREEN_LED);
     a56:	8a b1       	in	r24, 0x0a	; 10
     a58:	80 6e       	ori	r24, 0xE0	; 224
     a5a:	8a b9       	out	0x0a, r24	; 10
    PORTD  |= (1<<RED_LED)|(1<<BLUE_LED)|(1<<GREEN_LED);
     a5c:	8b b1       	in	r24, 0x0b	; 11
     a5e:	80 6e       	ori	r24, 0xE0	; 224
     a60:	8b b9       	out	0x0b, r24	; 11
    
    // for melody
    DDRA  |= (1<<MELODY);
     a62:	0a 9a       	sbi	0x01, 2	; 1
    
    // 멜로디를 위한 타이머1 세팅
    TCCR1B |= (1<<CS12)|(1<<CS10);
     a64:	e1 e8       	ldi	r30, 0x81	; 129
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	85 60       	ori	r24, 0x05	; 5
     a6c:	80 83       	st	Z, r24
     a6e:	08 95       	ret

00000a70 <melody_interaction>:
}

void melody_interaction()
{
    // 타이머 1 실행
    cli();
     a70:	f8 94       	cli
    
    PORTA  |= (1<<MELODY);
     a72:	12 9a       	sbi	0x02, 2	; 2
    
    // 멜로디 출력시간을 위한 타이머 1 카운팅
    TCNT1   = 0x00;
     a74:	10 92 85 00 	sts	0x0085, r1
     a78:	10 92 84 00 	sts	0x0084, r1

    TIMSK0  = 0x00;
     a7c:	10 92 6e 00 	sts	0x006E, r1
    TIMSK1 |= (1<<TOIE1);
     a80:	ef e6       	ldi	r30, 0x6F	; 111
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	81 60       	ori	r24, 0x01	; 1
     a88:	80 83       	st	Z, r24
    
    sei();
     a8a:	78 94       	sei
     a8c:	08 95       	ret

00000a8e <led_interaction>:
}

void led_interaction(unsigned color, unsigned int time, unsigned int speed, unsigned int threshold)
{
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	da 01       	movw	r26, r20
    while(j!= (time*5))
    {
        for(i=0;i<speed;i++)
        {
            if(i<threshold)
                PORTD &= ~(1<<color);
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	af 01       	movw	r20, r30
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <led_interaction+0x12>
     a9c:	44 0f       	add	r20, r20
     a9e:	55 1f       	adc	r21, r21
     aa0:	8a 95       	dec	r24
     aa2:	e2 f7       	brpl	.-8      	; 0xa9c <led_interaction+0xe>
     aa4:	ca 01       	movw	r24, r20
     aa6:	40 95       	com	r20
    int i = 0;
    int j = 0;
    
    unsigned char flag = 0;
    
    while(j!= (time*5))
     aa8:	95 e0       	ldi	r25, 0x05	; 5
     aaa:	96 9f       	mul	r25, r22
     aac:	e0 01       	movw	r28, r0
     aae:	97 9f       	mul	r25, r23
     ab0:	d0 0d       	add	r29, r0
     ab2:	11 24       	eor	r1, r1
     */
     
    int i = 0;
    int j = 0;
    
    unsigned char flag = 0;
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     speed      : led 최대로 밝아질때까지의 속도 지정
     threshold  : led 최대 밝기 지정
     */
     
    int i = 0;
    int j = 0;
     ab6:	e0 e0       	ldi	r30, 0x00	; 0
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
    
    unsigned char flag = 0;
    
    while(j!= (time*5))
     aba:	ec 17       	cp	r30, r28
     abc:	fd 07       	cpc	r31, r29
     abe:	09 f1       	breq	.+66     	; 0xb02 <led_interaction+0x74>
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
    {
        for(i=0;i<speed;i++)
     ac4:	6a 17       	cp	r22, r26
     ac6:	7b 07       	cpc	r23, r27
     ac8:	59 f0       	breq	.+22     	; 0xae0 <led_interaction+0x52>
        {
            if(i<threshold)
                PORTD &= ~(1<<color);
     aca:	5b b1       	in	r21, 0x0b	; 11
    
    while(j!= (time*5))
    {
        for(i=0;i<speed;i++)
        {
            if(i<threshold)
     acc:	62 17       	cp	r22, r18
     ace:	73 07       	cpc	r23, r19
     ad0:	10 f4       	brcc	.+4      	; 0xad6 <led_interaction+0x48>
                PORTD &= ~(1<<color);
     ad2:	54 23       	and	r21, r20
     ad4:	01 c0       	rjmp	.+2      	; 0xad8 <led_interaction+0x4a>
            else
                PORTD |= (1<<color);
     ad6:	58 2b       	or	r21, r24
     ad8:	5b b9       	out	0x0b, r21	; 11
    
    unsigned char flag = 0;
    
    while(j!= (time*5))
    {
        for(i=0;i<speed;i++)
     ada:	6f 5f       	subi	r22, 0xFF	; 255
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	f2 cf       	rjmp	.-28     	; 0xac4 <led_interaction+0x36>
            if(i<threshold)
                PORTD &= ~(1<<color);
            else
                PORTD |= (1<<color);
        }
        if(threshold==speed)
     ae0:	2a 17       	cp	r18, r26
     ae2:	3b 07       	cpc	r19, r27
     ae4:	29 f0       	breq	.+10     	; 0xaf0 <led_interaction+0x62>
            flag=1;
        else if(threshold==0)
     ae6:	21 15       	cp	r18, r1
     ae8:	31 05       	cpc	r19, r1
     aea:	31 f0       	breq	.+12     	; 0xaf8 <led_interaction+0x6a>
            flag=0;
        
        if(flag)
     aec:	99 23       	and	r25, r25
     aee:	21 f0       	breq	.+8      	; 0xaf8 <led_interaction+0x6a>
            threshold--;
     af0:	21 50       	subi	r18, 0x01	; 1
     af2:	31 09       	sbc	r19, r1
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	03 c0       	rjmp	.+6      	; 0xafe <led_interaction+0x70>
        else
            threshold++;
     af8:	2f 5f       	subi	r18, 0xFF	; 255
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
     afc:	90 e0       	ldi	r25, 0x00	; 0
        j++;
     afe:	31 96       	adiw	r30, 0x01	; 1
     b00:	dc cf       	rjmp	.-72     	; 0xaba <led_interaction+0x2c>
    }
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <__vector_20>:
unsigned char temp_pn[17]="1234123412341234";
unsigned long game_money = 0;
unsigned isConnect;

ISR(USART0_RX_vect)
{
     b08:	1f 92       	push	r1
     b0a:	0f 92       	push	r0
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	0f 92       	push	r0
     b10:	11 24       	eor	r1, r1
     b12:	2f 93       	push	r18
     b14:	3f 93       	push	r19
     b16:	4f 93       	push	r20
     b18:	5f 93       	push	r21
     b1a:	6f 93       	push	r22
     b1c:	7f 93       	push	r23
     b1e:	8f 93       	push	r24
     b20:	9f 93       	push	r25
     b22:	af 93       	push	r26
     b24:	bf 93       	push	r27
     b26:	cf 93       	push	r28
     b28:	ef 93       	push	r30
     b2a:	ff 93       	push	r31
    unsigned char data = UDR0;
     b2c:	c0 91 c6 00 	lds	r28, 0x00C6
    

    if(data==START_BYTE && idxArr==0)
     b30:	c3 35       	cpi	r28, 0x53	; 83
     b32:	41 f4       	brne	.+16     	; 0xb44 <__vector_20+0x3c>
     b34:	80 91 d3 03 	lds	r24, 0x03D3
     b38:	81 11       	cpse	r24, r1
     b3a:	11 c0       	rjmp	.+34     	; 0xb5e <__vector_20+0x56>
        isStart = 1;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	80 93 de 03 	sts	0x03DE, r24
     b42:	0d c0       	rjmp	.+26     	; 0xb5e <__vector_20+0x56>
    
    else if(data==END_BYTE && idxArr!=0)
     b44:	c5 34       	cpi	r28, 0x45	; 69
     b46:	59 f4       	brne	.+22     	; 0xb5e <__vector_20+0x56>
     b48:	80 91 d3 03 	lds	r24, 0x03D3
     b4c:	88 23       	and	r24, r24
     b4e:	39 f0       	breq	.+14     	; 0xb5e <__vector_20+0x56>
    {
        //s_flag Get_INSTRUCTION bit 1 set
        change_bit_val(GET_INSTRUCTION,1);
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	7d dc       	rcall	.-1798   	; 0x450 <change_bit_val>
     b56:	10 92 d3 03 	sts	0x03D3, r1
        idxArr  = INIT_DATA;
     b5a:	10 92 de 03 	sts	0x03DE, r1
        isStart = INIT_DATA;
     b5e:	80 91 de 03 	lds	r24, 0x03DE

    }
    
    if(isStart && data!=START_BYTE)
     b62:	88 23       	and	r24, r24
     b64:	a9 f0       	breq	.+42     	; 0xb90 <__vector_20+0x88>
     b66:	c3 35       	cpi	r28, 0x53	; 83
     b68:	99 f0       	breq	.+38     	; 0xb90 <__vector_20+0x88>
     b6a:	80 91 d3 03 	lds	r24, 0x03D3
    {
        data_buffer[idxArr] = data;
     b6e:	e8 2f       	mov	r30, r24
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	ed 51       	subi	r30, 0x1D	; 29
     b74:	fc 4f       	sbci	r31, 0xFC	; 252
     b76:	c0 83       	st	Z, r28
     b78:	c3 30       	cpi	r28, 0x03	; 3
        
        // 받은 명령어가 ack 신호 일경우
        if(data==GET_ACK && idxArr==0)
     b7a:	29 f4       	brne	.+10     	; 0xb86 <__vector_20+0x7e>
     b7c:	81 11       	cpse	r24, r1
     b7e:	03 c0       	rjmp	.+6      	; 0xb86 <__vector_20+0x7e>
     b80:	61 e0       	ldi	r22, 0x01	; 1
            change_bit_val(CONNECT,1);
     b82:	80 e4       	ldi	r24, 0x40	; 64
     b84:	65 dc       	rcall	.-1846   	; 0x450 <change_bit_val>
     b86:	80 91 d3 03 	lds	r24, 0x03D3

        idxArr++;
     b8a:	8f 5f       	subi	r24, 0xFF	; 255
     b8c:	80 93 d3 03 	sts	0x03D3, r24
     b90:	ff 91       	pop	r31
     b92:	ef 91       	pop	r30
    }

}
     b94:	cf 91       	pop	r28
     b96:	bf 91       	pop	r27
     b98:	af 91       	pop	r26
     b9a:	9f 91       	pop	r25
     b9c:	8f 91       	pop	r24
     b9e:	7f 91       	pop	r23
     ba0:	6f 91       	pop	r22
     ba2:	5f 91       	pop	r21
     ba4:	4f 91       	pop	r20
     ba6:	3f 91       	pop	r19
     ba8:	2f 91       	pop	r18
     baa:	0f 90       	pop	r0
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	0f 90       	pop	r0
     bb0:	1f 90       	pop	r1
     bb2:	18 95       	reti

00000bb4 <__vector_28>:

ISR(USART1_RX_vect)
{
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	2f 93       	push	r18
     bc0:	3f 93       	push	r19
     bc2:	4f 93       	push	r20
     bc4:	5f 93       	push	r21
     bc6:	6f 93       	push	r22
     bc8:	7f 93       	push	r23
     bca:	8f 93       	push	r24
     bcc:	9f 93       	push	r25
     bce:	af 93       	push	r26
     bd0:	bf 93       	push	r27
     bd2:	cf 93       	push	r28
     bd4:	ef 93       	push	r30
     bd6:	ff 93       	push	r31
    unsigned char data = UDR1;
     bd8:	c0 91 ce 00 	lds	r28, 0x00CE
    
    if(data==START_BYTE && idxArr==0)
     bdc:	c3 35       	cpi	r28, 0x53	; 83
     bde:	41 f4       	brne	.+16     	; 0xbf0 <__vector_28+0x3c>
     be0:	80 91 d3 03 	lds	r24, 0x03D3
     be4:	81 11       	cpse	r24, r1
     be6:	11 c0       	rjmp	.+34     	; 0xc0a <__vector_28+0x56>
        isStart = 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	80 93 de 03 	sts	0x03DE, r24
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <__vector_28+0x56>
    
    else if(data==END_BYTE && idxArr!=0)
     bf0:	c5 34       	cpi	r28, 0x45	; 69
     bf2:	59 f4       	brne	.+22     	; 0xc0a <__vector_28+0x56>
     bf4:	80 91 d3 03 	lds	r24, 0x03D3
     bf8:	88 23       	and	r24, r24
     bfa:	39 f0       	breq	.+14     	; 0xc0a <__vector_28+0x56>
    {
        //s_flag Get_INSTRUCTION bit 1 set
        change_bit_val(GET_INSTRUCTION,1);
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	27 dc       	rcall	.-1970   	; 0x450 <change_bit_val>
     c02:	10 92 d3 03 	sts	0x03D3, r1
        idxArr  = INIT_DATA;
     c06:	10 92 de 03 	sts	0x03DE, r1
        isStart = INIT_DATA;
     c0a:	80 91 de 03 	lds	r24, 0x03DE
    }
    
    if(isStart && data!=START_BYTE)
     c0e:	88 23       	and	r24, r24
     c10:	61 f0       	breq	.+24     	; 0xc2a <__vector_28+0x76>
     c12:	c3 35       	cpi	r28, 0x53	; 83
     c14:	51 f0       	breq	.+20     	; 0xc2a <__vector_28+0x76>
     c16:	80 91 d3 03 	lds	r24, 0x03D3
    {
        data_buffer[idxArr] = data;
     c1a:	e8 2f       	mov	r30, r24
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	ed 51       	subi	r30, 0x1D	; 29
     c20:	fc 4f       	sbci	r31, 0xFC	; 252
     c22:	c0 83       	st	Z, r28
     c24:	8f 5f       	subi	r24, 0xFF	; 255
        idxArr++;
     c26:	80 93 d3 03 	sts	0x03D3, r24
     c2a:	81 e0       	ldi	r24, 0x01	; 1
    }
    
    // 게임보드와 연결상태를 알기위한 변수
    isConnect = 1;
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	90 93 f0 03 	sts	0x03F0, r25
     c32:	80 93 ef 03 	sts	0x03EF, r24
     c36:	ff 91       	pop	r31
}
     c38:	ef 91       	pop	r30
     c3a:	cf 91       	pop	r28
     c3c:	bf 91       	pop	r27
     c3e:	af 91       	pop	r26
     c40:	9f 91       	pop	r25
     c42:	8f 91       	pop	r24
     c44:	7f 91       	pop	r23
     c46:	6f 91       	pop	r22
     c48:	5f 91       	pop	r21
     c4a:	4f 91       	pop	r20
     c4c:	3f 91       	pop	r19
     c4e:	2f 91       	pop	r18
     c50:	0f 90       	pop	r0
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	0f 90       	pop	r0
     c56:	1f 90       	pop	r1
     c58:	18 95       	reti

00000c5a <check_gameboard_connect>:

unsigned char check_gameboard_connect()
{
    unsigned temp = isConnect;
     c5a:	80 91 ef 03 	lds	r24, 0x03EF
    // 현재 게임보드 연결상태를 위한 변수
    
    isConnect = INIT_DATA;
     c5e:	10 92 f0 03 	sts	0x03F0, r1
     c62:	10 92 ef 03 	sts	0x03EF, r1
    
    return temp;
}
     c66:	08 95       	ret

00000c68 <init_uart>:
{
    /*
     uart0 사용
     속도 : 57600
     */
    UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     c68:	e1 ec       	ldi	r30, 0xC1	; 193
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	88 69       	ori	r24, 0x98	; 152
     c70:	80 83       	st	Z, r24
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     c72:	e2 ec       	ldi	r30, 0xC2	; 194
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	86 60       	ori	r24, 0x06	; 6
     c7a:	80 83       	st	Z, r24
    UBRR0L  = 21; // 20Mhz에서 57600은 21 16Mhz에서 57600은 16
     c7c:	85 e1       	ldi	r24, 0x15	; 21
     c7e:	80 93 c4 00 	sts	0x00C4, r24
    
    /*
     uart1 사용
     속도 : 57600
     */
    UCSR1B |= (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
     c82:	e9 ec       	ldi	r30, 0xC9	; 201
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	88 69       	ori	r24, 0x98	; 152
     c8a:	80 83       	st	Z, r24
    UCSR1C |= (1<<UCSZ11)|(1<<UCSZ10);
     c8c:	ea ec       	ldi	r30, 0xCA	; 202
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	86 60       	ori	r24, 0x06	; 6
     c94:	80 83       	st	Z, r24
    UBRR1L  = 129; // 20Mhz에서 57600은 21 16Mhz에서 57600은 16
     c96:	81 e8       	ldi	r24, 0x81	; 129
     c98:	80 93 cc 00 	sts	0x00CC, r24
     c9c:	08 95       	ret

00000c9e <make_packet>:
                  // 9600은 129
}

void make_packet(unsigned char opcode, char length, unsigned char data[])
{
     c9e:	a4 e1       	ldi	r26, 0x14	; 20
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e4 e5       	ldi	r30, 0x54	; 84
     ca4:	f6 e0       	ldi	r31, 0x06	; 6
     ca6:	9d c4       	rjmp	.+2362   	; 0x15e2 <__prologue_saves__+0x20>
     ca8:	93 e5       	ldi	r25, 0x53	; 83
    char idx;
    char i;
    
    idx = 0;
    //start make packet
    packet[idx++] = START_BYTE;
     caa:	99 83       	std	Y+1, r25	; 0x01
     cac:	8a 83       	std	Y+2, r24	; 0x02
    packet[idx++] = opcode;
     cae:	6b 83       	std	Y+3, r22	; 0x03
    packet[idx++] = length;
     cb0:	94 2f       	mov	r25, r20
     cb2:	fa 01       	movw	r30, r20
    
    for( i=0 ;i<length;i++ )
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	84 1b       	sub	r24, r20
     cb8:	38 2f       	mov	r19, r24
     cba:	3e 0f       	add	r19, r30
     cbc:	2e 2f       	mov	r18, r30
     cbe:	29 1b       	sub	r18, r25
     cc0:	26 17       	cp	r18, r22
     cc2:	48 f4       	brcc	.+18     	; 0xcd6 <make_packet+0x38>
     cc4:	21 91       	ld	r18, Z+
        packet[idx++] = data[i];
     cc6:	a1 e0       	ldi	r26, 0x01	; 1
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	ac 0f       	add	r26, r28
     ccc:	bd 1f       	adc	r27, r29
     cce:	a3 0f       	add	r26, r19
     cd0:	b1 1d       	adc	r27, r1
     cd2:	2c 93       	st	X, r18
     cd4:	f1 cf       	rjmp	.-30     	; 0xcb8 <make_packet+0x1a>
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	86 0f       	add	r24, r22
     cda:	e1 e0       	ldi	r30, 0x01	; 1
    
    packet[idx] = END_BYTE;
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	ec 0f       	add	r30, r28
     ce0:	fd 1f       	adc	r31, r29
     ce2:	e8 0f       	add	r30, r24
     ce4:	f1 1d       	adc	r31, r1
     ce6:	85 e4       	ldi	r24, 0x45	; 69
     ce8:	80 83       	st	Z, r24
     cea:	20 e0       	ldi	r18, 0x00	; 0
    
    //start send packet
    for( i=0;i<length+4;i++ )
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	6d 5f       	subi	r22, 0xFD	; 253
     cf0:	7f 4f       	sbci	r23, 0xFF	; 255
     cf2:	82 2f       	mov	r24, r18
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	68 17       	cp	r22, r24
     cf8:	79 07       	cpc	r23, r25
     cfa:	7c f0       	brlt	.+30     	; 0xd1a <make_packet+0x7c>
     cfc:	30 91 c0 00 	lds	r19, 0x00C0
    {
        while(!(UCSR0A&(1<<UDRE0)));
     d00:	35 ff       	sbrs	r19, 5
     d02:	fc cf       	rjmp	.-8      	; 0xcfc <make_packet+0x5e>
     d04:	e1 e0       	ldi	r30, 0x01	; 1
        UDR0 = packet[i];
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	ec 0f       	add	r30, r28
     d0a:	fd 1f       	adc	r31, r29
     d0c:	e8 0f       	add	r30, r24
     d0e:	f9 1f       	adc	r31, r25
     d10:	80 81       	ld	r24, Z
     d12:	80 93 c6 00 	sts	0x00C6, r24
     d16:	2f 5f       	subi	r18, 0xFF	; 255
        packet[idx++] = data[i];
    
    packet[idx] = END_BYTE;
    
    //start send packet
    for( i=0;i<length+4;i++ )
     d18:	ec cf       	rjmp	.-40     	; 0xcf2 <make_packet+0x54>
     d1a:	80 91 c0 00 	lds	r24, 0x00C0
    {
        while(!(UCSR0A&(1<<UDRE0)));
        UDR0 = packet[i];
    }
    while(!(UCSR0A&(1<<UDRE0)));
     d1e:	85 ff       	sbrs	r24, 5
     d20:	fc cf       	rjmp	.-8      	; 0xd1a <make_packet+0x7c>
     d22:	64 96       	adiw	r28, 0x14	; 20
}
     d24:	e2 e0       	ldi	r30, 0x02	; 2
     d26:	79 c4       	rjmp	.+2290   	; 0x161a <__epilogue_restores__+0x20>

00000d28 <compare_pn>:
{
    unsigned char length;
    char i;
    char isMatch;
    
    length = data_buffer[idx++];
     d28:	e1 e0       	ldi	r30, 0x01	; 1
     d2a:	e8 0f       	add	r30, r24
     d2c:	a8 2f       	mov	r26, r24
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ad 51       	subi	r26, 0x1D	; 29
     d32:	bc 4f       	sbci	r27, 0xFC	; 252
     d34:	8c 91       	ld	r24, X
     d36:	20 eb       	ldi	r18, 0xB0	; 176
     d38:	33 e0       	ldi	r19, 0x03	; 3
    
    for( i=0;i<length;i++ )
     d3a:	d9 01       	movw	r26, r18
     d3c:	9a 2f       	mov	r25, r26
     d3e:	92 1b       	sub	r25, r18
     d40:	98 17       	cp	r25, r24
     d42:	58 f4       	brcc	.+22     	; 0xd5a <compare_pn+0x32>
    {
        if(temp_pn[i]==data_buffer[idx++])
     d44:	5d 91       	ld	r21, X+
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	9e 0f       	add	r25, r30
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	ed 51       	subi	r30, 0x1D	; 29
     d4e:	fc 4f       	sbci	r31, 0xFC	; 252
     d50:	40 81       	ld	r20, Z
     d52:	54 13       	cpse	r21, r20
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <compare_pn+0x36>
     d56:	e9 2f       	mov	r30, r25
     d58:	f1 cf       	rjmp	.-30     	; 0xd3c <compare_pn+0x14>
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	08 95       	ret
            isMatch = 1;
        else
        {
            isMatch = 0;
     d5e:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return isMatch;
}
     d60:	08 95       	ret

00000d62 <get_goal>:

void get_goal( unsigned char idx )
{
     d62:	a1 e0       	ldi	r26, 0x01	; 1
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e6 eb       	ldi	r30, 0xB6	; 182
     d68:	f6 e0       	ldi	r31, 0x06	; 6
     d6a:	33 c4       	rjmp	.+2150   	; 0x15d2 <__prologue_saves__+0x10>
     d6c:	dd 24       	eor	r13, r13
    unsigned long tmp;
    unsigned char len = data_buffer[idx++];
     d6e:	d3 94       	inc	r13
     d70:	d8 0e       	add	r13, r24
     d72:	e8 2f       	mov	r30, r24
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	ed 51       	subi	r30, 0x1D	; 29
     d78:	fc 4f       	sbci	r31, 0xFC	; 252
     d7a:	c0 80       	ld	r12, Z
     d7c:	10 92 d8 03 	sts	0x03D8, r1
    unsigned char i;
    unsigned char percent;
    
    goal_money = INIT_DATA;
     d80:	10 92 d9 03 	sts	0x03D9, r1
     d84:	10 92 da 03 	sts	0x03DA, r1
     d88:	10 92 db 03 	sts	0x03DB, r1
     d8c:	a1 2c       	mov	r10, r1
    
    for( i=0;i<len;i++ )
     d8e:	b1 2c       	mov	r11, r1
     d90:	03 e0       	ldi	r16, 0x03	; 3
     d92:	10 e0       	ldi	r17, 0x00	; 0
     d94:	ec 2c       	mov	r14, r12
        tmp = data_buffer[idx++]&0xff;
        _delay_ms(2);
        
        goal_money = goal_money|tmp;
        eeprom_write(GOALMONEY_ADDRESS-i,(unsigned char)tmp);
        if( i < len-1 )
     d96:	f1 2c       	mov	r15, r1
     d98:	21 e0       	ldi	r18, 0x01	; 1
     d9a:	e2 1a       	sub	r14, r18
     d9c:	f1 08       	sbc	r15, r1
     d9e:	ea 2d       	mov	r30, r10
     da0:	ed 0d       	add	r30, r13
     da2:	ac 14       	cp	r10, r12
    unsigned char i;
    unsigned char percent;
    
    goal_money = INIT_DATA;
    
    for( i=0;i<len;i++ )
     da4:	d0 f5       	brcc	.+116    	; 0xe1a <get_goal+0xb8>
     da6:	f0 e0       	ldi	r31, 0x00	; 0
    {
        tmp = data_buffer[idx++]&0xff;
     da8:	ed 51       	subi	r30, 0x1D	; 29
     daa:	fc 4f       	sbci	r31, 0xFC	; 252
     dac:	60 81       	ld	r22, Z
     dae:	8f e0       	ldi	r24, 0x0F	; 15
     db0:	97 e2       	ldi	r25, 0x27	; 39
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <get_goal+0x50>
     db6:	00 c0       	rjmp	.+0      	; 0xdb8 <get_goal+0x56>
     db8:	00 00       	nop
     dba:	80 91 d8 03 	lds	r24, 0x03D8
        _delay_ms(2);
        
        goal_money = goal_money|tmp;
     dbe:	90 91 d9 03 	lds	r25, 0x03D9
     dc2:	a0 91 da 03 	lds	r26, 0x03DA
     dc6:	b0 91 db 03 	lds	r27, 0x03DB
     dca:	86 2b       	or	r24, r22
     dcc:	80 93 d8 03 	sts	0x03D8, r24
     dd0:	90 93 d9 03 	sts	0x03D9, r25
     dd4:	a0 93 da 03 	sts	0x03DA, r26
     dd8:	b0 93 db 03 	sts	0x03DB, r27
     ddc:	c8 01       	movw	r24, r16
        eeprom_write(GOALMONEY_ADDRESS-i,(unsigned char)tmp);
     dde:	8a 19       	sub	r24, r10
     de0:	9b 09       	sbc	r25, r11
     de2:	30 db       	rcall	.-2464   	; 0x444 <eeprom_write>
     de4:	ae 14       	cp	r10, r14
     de6:	bf 04       	cpc	r11, r15
        if( i < len-1 )
     de8:	a4 f4       	brge	.+40     	; 0xe12 <get_goal+0xb0>
     dea:	80 91 d8 03 	lds	r24, 0x03D8
            goal_money = goal_money<<8;
     dee:	90 91 d9 03 	lds	r25, 0x03D9
     df2:	a0 91 da 03 	lds	r26, 0x03DA
     df6:	b0 91 db 03 	lds	r27, 0x03DB
     dfa:	ba 2f       	mov	r27, r26
     dfc:	a9 2f       	mov	r26, r25
     dfe:	98 2f       	mov	r25, r24
     e00:	88 27       	eor	r24, r24
     e02:	80 93 d8 03 	sts	0x03D8, r24
     e06:	90 93 d9 03 	sts	0x03D9, r25
     e0a:	a0 93 da 03 	sts	0x03DA, r26
     e0e:	b0 93 db 03 	sts	0x03DB, r27
     e12:	9f ef       	ldi	r25, 0xFF	; 255
     e14:	a9 1a       	sub	r10, r25
     e16:	b9 0a       	sbc	r11, r25
     e18:	c2 cf       	rjmp	.-124    	; 0xd9e <get_goal+0x3c>
     e1a:	90 e5       	ldi	r25, 0x50	; 80
     e1c:	e9 2e       	mov	r14, r25
     e1e:	93 e0       	ldi	r25, 0x03	; 3
     e20:	f9 2e       	mov	r15, r25
     e22:	c1 2c       	mov	r12, r1
     e24:	d1 2c       	mov	r13, r1
    unsigned char i;
    unsigned char percent;
    
    goal_money = INIT_DATA;
    
    for( i=0;i<len;i++ )
     e26:	a6 01       	movw	r20, r12
     e28:	42 5e       	subi	r20, 0xE2	; 226
     e2a:	5f 4f       	sbci	r21, 0xFF	; 255
     e2c:	87 01       	movw	r16, r14
     e2e:	22 e0       	ldi	r18, 0x02	; 2
            goal_money = goal_money<<8;
    }
    
    // 목표금액 등록문구 출력
    for(i=0;i<6;i++)
        draw_char(8,16,30+(i*10),2,font_goal[i]);
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	60 e1       	ldi	r22, 0x10	; 16
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	88 e0       	ldi	r24, 0x08	; 8
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	29 dc       	rcall	.-1966   	; 0x68e <draw_char>
     e3c:	2a e0       	ldi	r18, 0x0A	; 10
     e3e:	c2 0e       	add	r12, r18
     e40:	d1 1c       	adc	r13, r1
     e42:	80 e1       	ldi	r24, 0x10	; 16
     e44:	e8 0e       	add	r14, r24
     e46:	f1 1c       	adc	r15, r1
     e48:	9c e3       	ldi	r25, 0x3C	; 60
     e4a:	c9 16       	cp	r12, r25
     e4c:	d1 04       	cpc	r13, r1
        if( i < len-1 )
            goal_money = goal_money<<8;
    }
    
    // 목표금액 등록문구 출력
    for(i=0;i<6;i++)
     e4e:	59 f7       	brne	.-42     	; 0xe26 <get_goal+0xc4>
     e50:	60 91 d8 03 	lds	r22, 0x03D8
     e54:	70 91 d9 03 	lds	r23, 0x03D9
        draw_char(8,16,30+(i*10),2,font_goal[i]);
    
    write_num_to_oled(goal_money);
     e58:	80 91 da 03 	lds	r24, 0x03DA
     e5c:	90 91 db 03 	lds	r25, 0x03DB
     e60:	a9 dc       	rcall	.-1710   	; 0x7b4 <write_num_to_oled>
     e62:	2f ef       	ldi	r18, 0xFF	; 255
     e64:	8a e1       	ldi	r24, 0x1A	; 26
     e66:	97 eb       	ldi	r25, 0xB7	; 183
     e68:	21 50       	subi	r18, 0x01	; 1
     e6a:	80 40       	sbci	r24, 0x00	; 0
     e6c:	90 40       	sbci	r25, 0x00	; 0
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <get_goal+0x106>
     e70:	00 c0       	rjmp	.+0      	; 0xe72 <get_goal+0x110>
     e72:	00 00       	nop
     e74:	20 91 df 03 	lds	r18, 0x03DF
     e78:	30 91 e0 03 	lds	r19, 0x03E0
    _delay_ms(3000);
    
    // 현재금액에 따라 저축금액 퍼센테이지 출력
    percent = (current_money*112)/goal_money;
     e7c:	40 91 e1 03 	lds	r20, 0x03E1
     e80:	50 91 e2 03 	lds	r21, 0x03E2
     e84:	a0 e7       	ldi	r26, 0x70	; 112
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	64 d3       	rcall	.+1736   	; 0x1552 <__muluhisi3>
     e8a:	20 91 d8 03 	lds	r18, 0x03D8
     e8e:	30 91 d9 03 	lds	r19, 0x03D9
     e92:	40 91 da 03 	lds	r20, 0x03DA
     e96:	50 91 db 03 	lds	r21, 0x03DB
     e9a:	71 d3       	rcall	.+1762   	; 0x157e <__udivmodsi4>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	29 83       	std	Y+1, r18	; 0x01
     ea0:	72 dd       	rcall	.-1308   	; 0x986 <draw_edge>
     ea2:	29 81       	ldd	r18, Y+1	; 0x01
     ea4:	82 2f       	mov	r24, r18
     ea6:	54 dd       	rcall	.-1368   	; 0x950 <draw_percentage>
    
    draw_edge(1);
     ea8:	80 e2       	ldi	r24, 0x20	; 32
     eaa:	e8 2e       	mov	r14, r24
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	f8 2e       	mov	r15, r24
    draw_percentage(percent);
     eb0:	c1 2c       	mov	r12, r1
     eb2:	d1 2c       	mov	r13, r1
     eb4:	a6 01       	movw	r20, r12
     eb6:	42 5e       	subi	r20, 0xE2	; 226
     eb8:	5f 4f       	sbci	r21, 0xFF	; 255
     eba:	87 01       	movw	r16, r14
     ebc:	22 e0       	ldi	r18, 0x02	; 2
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	60 e1       	ldi	r22, 0x10	; 16
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	88 e0       	ldi	r24, 0x08	; 8
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	e2 db       	rcall	.-2108   	; 0x68e <draw_char>
    
    for(i=0;i<6;i++)
        draw_char(8,16,30+(i*10),2,font_money[i]);
     eca:	2a e0       	ldi	r18, 0x0A	; 10
     ecc:	c2 0e       	add	r12, r18
     ece:	d1 1c       	adc	r13, r1
     ed0:	80 e1       	ldi	r24, 0x10	; 16
     ed2:	e8 0e       	add	r14, r24
     ed4:	f1 1c       	adc	r15, r1
     ed6:	9c e3       	ldi	r25, 0x3C	; 60
     ed8:	c9 16       	cp	r12, r25
     eda:	d1 04       	cpc	r13, r1
     edc:	59 f7       	brne	.-42     	; 0xeb4 <get_goal+0x152>
     ede:	60 91 df 03 	lds	r22, 0x03DF
     ee2:	70 91 e0 03 	lds	r23, 0x03E0
     ee6:	80 91 e1 03 	lds	r24, 0x03E1
    percent = (current_money*112)/goal_money;
    
    draw_edge(1);
    draw_percentage(percent);
    
    for(i=0;i<6;i++)
     eea:	90 91 e2 03 	lds	r25, 0x03E2
     eee:	62 dc       	rcall	.-1852   	; 0x7b4 <write_num_to_oled>
        draw_char(8,16,30+(i*10),2,font_money[i]);
    
    write_num_to_oled(current_money);
     ef0:	61 e0       	ldi	r22, 0x01	; 1
     ef2:	88 e0       	ldi	r24, 0x08	; 8
     ef4:	ad da       	rcall	.-2726   	; 0x450 <change_bit_val>
     ef6:	21 96       	adiw	r28, 0x01	; 1
     ef8:	ea e0       	ldi	r30, 0x0A	; 10
     efa:	87 c3       	rjmp	.+1806   	; 0x160a <__epilogue_restores__+0x10>

00000efc <proccess_instruction>:
    change_bit_val(ISGOAL,1);	// s_flag ISGOAL bit 1로 set
}

void proccess_instruction(void)
{
     efc:	a9 e0       	ldi	r26, 0x09	; 9
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e3 e8       	ldi	r30, 0x83	; 131
     f02:	f7 e0       	ldi	r31, 0x07	; 7
     f04:	68 c3       	rjmp	.+1744   	; 0x15d6 <__prologue_saves__+0x14>
     f06:	87 e8       	ldi	r24, 0x87	; 135
     f08:	93 e1       	ldi	r25, 0x13	; 19
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <proccess_instruction+0xe>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <proccess_instruction+0x14>
     f10:	00 00       	nop
     f12:	80 91 e3 03 	lds	r24, 0x03E3
    int m=0;
    int len ;
    int k;
    
    _delay_ms(1);
    switch(data_buffer[idx++])
     f16:	89 30       	cpi	r24, 0x09	; 9
     f18:	09 f4       	brne	.+2      	; 0xf1c <proccess_instruction+0x20>
     f1a:	07 c1       	rjmp	.+526    	; 0x112a <proccess_instruction+0x22e>
     f1c:	90 f4       	brcc	.+36     	; 0xf42 <proccess_instruction+0x46>
     f1e:	84 30       	cpi	r24, 0x04	; 4
     f20:	09 f4       	brne	.+2      	; 0xf24 <proccess_instruction+0x28>
     f22:	63 c1       	rjmp	.+710    	; 0x11ea <proccess_instruction+0x2ee>
     f24:	20 f4       	brcc	.+8      	; 0xf2e <proccess_instruction+0x32>
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	09 f4       	brne	.+2      	; 0xf2c <proccess_instruction+0x30>
     f2a:	5f c0       	rjmp	.+190    	; 0xfea <proccess_instruction+0xee>
     f2c:	a0 c1       	rjmp	.+832    	; 0x126e <proccess_instruction+0x372>
     f2e:	85 30       	cpi	r24, 0x05	; 5
     f30:	09 f4       	brne	.+2      	; 0xf34 <proccess_instruction+0x38>
     f32:	81 c1       	rjmp	.+770    	; 0x1236 <proccess_instruction+0x33a>
     f34:	87 30       	cpi	r24, 0x07	; 7
     f36:	09 f0       	breq	.+2      	; 0xf3a <proccess_instruction+0x3e>
     f38:	9a c1       	rjmp	.+820    	; 0x126e <proccess_instruction+0x372>
     f3a:	88 db       	rcall	.-2288   	; 0x64c <turnon_motor_voltage>
            led_interaction(BLUE_LED,350,1000,10);
            break;
            
            // 잠금or 해제명령어일경우
        case LOCK_UNLOCK:
            turnon_motor_voltage();
     f3c:	80 91 e5 03 	lds	r24, 0x03E5
            lock_or_unlock(data_buffer[++idx]);
     f40:	7f c1       	rjmp	.+766    	; 0x1240 <proccess_instruction+0x344>
     f42:	81 31       	cpi	r24, 0x11	; 17
     f44:	09 f4       	brne	.+2      	; 0xf48 <proccess_instruction+0x4c>
    int m=0;
    int len ;
    int k;
    
    _delay_ms(1);
    switch(data_buffer[idx++])
     f46:	cf c0       	rjmp	.+414    	; 0x10e6 <proccess_instruction+0x1ea>
     f48:	20 f4       	brcc	.+8      	; 0xf52 <proccess_instruction+0x56>
     f4a:	80 31       	cpi	r24, 0x10	; 16
     f4c:	09 f4       	brne	.+2      	; 0xf50 <proccess_instruction+0x54>
     f4e:	83 c1       	rjmp	.+774    	; 0x1256 <proccess_instruction+0x35a>
     f50:	8e c1       	rjmp	.+796    	; 0x126e <proccess_instruction+0x372>
     f52:	82 31       	cpi	r24, 0x12	; 18
     f54:	09 f4       	brne	.+2      	; 0xf58 <proccess_instruction+0x5c>
     f56:	22 c1       	rjmp	.+580    	; 0x119c <proccess_instruction+0x2a0>
     f58:	87 34       	cpi	r24, 0x47	; 71
     f5a:	09 f0       	breq	.+2      	; 0xf5e <proccess_instruction+0x62>
     f5c:	88 c1       	rjmp	.+784    	; 0x126e <proccess_instruction+0x372>
     f5e:	40 91 e6 03 	lds	r20, 0x03E6
        
        case SEND_GAMEDATA:
            game_money = 0;
            len = data_buffer[idx++];
            game_money += data_buffer[idx++]*500;
            game_money += data_buffer[idx++]*100;
     f62:	00 91 e7 03 	lds	r16, 0x03E7
            game_money += data_buffer[idx++]*50;
     f66:	80 91 e8 03 	lds	r24, 0x03E8
            game_money += data_buffer[idx++]*10;
     f6a:	e4 e6       	ldi	r30, 0x64	; 100
     f6c:	4e 9f       	mul	r20, r30
        
        case SEND_GAMEDATA:
            game_money = 0;
            len = data_buffer[idx++];
            game_money += data_buffer[idx++]*500;
            game_money += data_buffer[idx++]*100;
     f6e:	a0 01       	movw	r20, r0
     f70:	11 24       	eor	r1, r1
     f72:	6a 01       	movw	r12, r20
     f74:	ee 24       	eor	r14, r14
     f76:	d7 fc       	sbrc	r13, 7
     f78:	e0 94       	com	r14
     f7a:	fe 2c       	mov	r15, r14
     f7c:	90 91 e5 03 	lds	r25, 0x03E5
            break;
        
        case SEND_GAMEDATA:
            game_money = 0;
            len = data_buffer[idx++];
            game_money += data_buffer[idx++]*500;
     f80:	24 ef       	ldi	r18, 0xF4	; 244
     f82:	31 e0       	ldi	r19, 0x01	; 1
     f84:	92 9f       	mul	r25, r18
     f86:	a0 01       	movw	r20, r0
     f88:	93 9f       	mul	r25, r19
     f8a:	50 0d       	add	r21, r0
     f8c:	11 24       	eor	r1, r1
     f8e:	66 27       	eor	r22, r22
     f90:	57 fd       	sbrc	r21, 7
     f92:	60 95       	com	r22
     f94:	76 2f       	mov	r23, r22
     f96:	4c 0d       	add	r20, r12
     f98:	5d 1d       	adc	r21, r13
            game_money += data_buffer[idx++]*100;
     f9a:	6e 1d       	adc	r22, r14
     f9c:	7f 1d       	adc	r23, r15
     f9e:	f2 e3       	ldi	r31, 0x32	; 50
     fa0:	0f 9f       	mul	r16, r31
            game_money += data_buffer[idx++]*50;
     fa2:	80 01       	movw	r16, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	22 27       	eor	r18, r18
     fa8:	17 fd       	sbrc	r17, 7
     faa:	20 95       	com	r18
     fac:	32 2f       	mov	r19, r18
     fae:	40 0f       	add	r20, r16
     fb0:	51 1f       	adc	r21, r17
     fb2:	62 1f       	adc	r22, r18
     fb4:	73 1f       	adc	r23, r19
     fb6:	0a e0       	ldi	r16, 0x0A	; 10
     fb8:	80 9f       	mul	r24, r16
            game_money += data_buffer[idx++]*10;
     fba:	c0 01       	movw	r24, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	aa 27       	eor	r26, r26
     fc0:	97 fd       	sbrc	r25, 7
     fc2:	a0 95       	com	r26
     fc4:	ba 2f       	mov	r27, r26
     fc6:	8a 01       	movw	r16, r20
     fc8:	9b 01       	movw	r18, r22
     fca:	08 0f       	add	r16, r24
     fcc:	19 1f       	adc	r17, r25
     fce:	2a 1f       	adc	r18, r26
     fd0:	3b 1f       	adc	r19, r27
     fd2:	c9 01       	movw	r24, r18
     fd4:	b8 01       	movw	r22, r16
     fd6:	00 93 ce 03 	sts	0x03CE, r16
     fda:	10 93 cf 03 	sts	0x03CF, r17
     fde:	20 93 d0 03 	sts	0x03D0, r18
     fe2:	30 93 d1 03 	sts	0x03D1, r19
     fe6:	e6 db       	rcall	.-2100   	; 0x7b4 <write_num_to_oled>
     fe8:	42 c1       	rjmp	.+644    	; 0x126e <proccess_instruction+0x372>
            write_num_to_oled(game_money);
     fea:	80 91 d2 03 	lds	r24, 0x03D2
            break;
     fee:	87 fd       	sbrc	r24, 7
    
    _delay_ms(1);
    switch(data_buffer[idx++])
    {
        case REQUEST_PN:
            if(!(s_flag&CONFIRM))
     ff0:	3e c1       	rjmp	.+636    	; 0x126e <proccess_instruction+0x372>
     ff2:	ef e4       	ldi	r30, 0x4F	; 79
     ff4:	f3 ec       	ldi	r31, 0xC3	; 195
     ff6:	31 97       	sbiw	r30, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <proccess_instruction+0xfa>
     ffa:	00 c0       	rjmp	.+0      	; 0xffc <proccess_instruction+0x100>
     ffc:	00 00       	nop
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	93 de       	rcall	.-730    	; 0xd28 <compare_pn>
    1002:	88 23       	and	r24, r24
            {
                // PN 등록요청이오면 PN번호를 비교한다
                _delay_ms(10);
                if(compare_pn(idx++))
    1004:	09 f4       	brne	.+2      	; 0x1008 <proccess_instruction+0x10c>
    1006:	3b c0       	rjmp	.+118    	; 0x107e <proccess_instruction+0x182>
    1008:	60 91 d2 03 	lds	r22, 0x03D2
    100c:	60 54       	subi	r22, 0x40	; 64
    100e:	80 e8       	ldi	r24, 0x80	; 128
                {
                    change_bit_val(CONFIRM,s_flag-64);	// s_flag CONFIRM bit 1로 set
    1010:	1f da       	rcall	.-3010   	; 0x450 <change_bit_val>
    1012:	60 e8       	ldi	r22, 0x80	; 128
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	15 da       	rcall	.-3030   	; 0x444 <eeprom_write>
    101a:	50 ec       	ldi	r21, 0xC0	; 192
                    eeprom_write(S_FLAG_ADDRESS, 0x80);	// eeprom에 인증여부 저장
    101c:	c5 2e       	mov	r12, r21
    101e:	52 e0       	ldi	r21, 0x02	; 2
    1020:	d5 2e       	mov	r13, r21
    1022:	e1 2c       	mov	r14, r1
    1024:	f1 2c       	mov	r15, r1
    1026:	a7 01       	movw	r20, r14
    1028:	43 5d       	subi	r20, 0xD3	; 211
    102a:	5f 4f       	sbci	r21, 0xFF	; 255
    102c:	86 01       	movw	r16, r12
    102e:	25 e0       	ldi	r18, 0x05	; 5
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	60 e1       	ldi	r22, 0x10	; 16
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	88 e0       	ldi	r24, 0x08	; 8
                    
                    //성공 문구 출력
                    for(k=0;k<3;k++)
                        draw_char(8,16,45+(k*10),5,font_success[k]);
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	29 db       	rcall	.-2478   	; 0x68e <draw_char>
    103c:	fa e0       	ldi	r31, 0x0A	; 10
    103e:	ef 0e       	add	r14, r31
    1040:	f1 1c       	adc	r15, r1
    1042:	00 e1       	ldi	r16, 0x10	; 16
    1044:	c0 0e       	add	r12, r16
    1046:	d1 1c       	adc	r13, r1
    1048:	1e e1       	ldi	r17, 0x1E	; 30
    104a:	e1 16       	cp	r14, r17
    104c:	f1 04       	cpc	r15, r1
    104e:	59 f7       	brne	.-42     	; 0x1026 <proccess_instruction+0x12a>
    1050:	2a e2       	ldi	r18, 0x2A	; 42
    1052:	30 e5       	ldi	r19, 0x50	; 80
    1054:	6e ef       	ldi	r22, 0xFE	; 254
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	21 50       	subi	r18, 0x01	; 1
    105a:	30 40       	sbci	r19, 0x00	; 0
    105c:	60 40       	sbci	r22, 0x00	; 0
    105e:	80 40       	sbci	r24, 0x00	; 0
    1060:	d9 f7       	brne	.-10     	; 0x1058 <proccess_instruction+0x15c>
    1062:	00 00       	nop
    1064:	00 e0       	ldi	r16, 0x00	; 0
    1066:	25 e0       	ldi	r18, 0x05	; 5
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	49 e2       	ldi	r20, 0x29	; 41
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	60 e1       	ldi	r22, 0x10	; 16
    1070:	70 e0       	ldi	r23, 0x00	; 0
                    
                    _delay_ms(5000);
                    
                    //앞에 그렸던 문구 클리어
                    draw_data(30, 16, 41,5,0x00);
    1072:	8e e1       	ldi	r24, 0x1E	; 30
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	53 db       	rcall	.-2394   	; 0x71e <draw_data>
    1078:	43 ec       	ldi	r20, 0xC3	; 195
    107a:	53 e0       	ldi	r21, 0x03	; 3
    107c:	31 c0       	rjmp	.+98     	; 0x10e0 <proccess_instruction+0x1e4>
    107e:	40 e8       	ldi	r20, 0x80	; 128
    1080:	c4 2e       	mov	r12, r20
    1082:	42 e0       	ldi	r20, 0x02	; 2
    1084:	d4 2e       	mov	r13, r20
    1086:	e1 2c       	mov	r14, r1
                    make_packet(RESPONSE_PN,1,SUCCESS_PN);
    1088:	f1 2c       	mov	r15, r1
    108a:	a7 01       	movw	r20, r14
    108c:	43 5d       	subi	r20, 0xD3	; 211
    108e:	5f 4f       	sbci	r21, 0xFF	; 255
    1090:	86 01       	movw	r16, r12
    1092:	25 e0       	ldi	r18, 0x05	; 5
    1094:	30 e0       	ldi	r19, 0x00	; 0
        case REQUEST_PN:
            if(!(s_flag&CONFIRM))
            {
                // PN 등록요청이오면 PN번호를 비교한다
                _delay_ms(10);
                if(compare_pn(idx++))
    1096:	60 e1       	ldi	r22, 0x10	; 16
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	88 e0       	ldi	r24, 0x08	; 8
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	f7 da       	rcall	.-2578   	; 0x68e <draw_char>
                
                else
                {
                    //실패 문구 출력
                    for(k=0;k<4;k++)
                        draw_char(8,16,45+(k*10),5,font_fail[k]);
    10a0:	9a e0       	ldi	r25, 0x0A	; 10
    10a2:	e9 0e       	add	r14, r25
    10a4:	f1 1c       	adc	r15, r1
    10a6:	e0 e1       	ldi	r30, 0x10	; 16
    10a8:	ce 0e       	add	r12, r30
    10aa:	d1 1c       	adc	r13, r1
    10ac:	f8 e2       	ldi	r31, 0x28	; 40
    10ae:	ef 16       	cp	r14, r31
    10b0:	f1 04       	cpc	r15, r1
    10b2:	59 f7       	brne	.-42     	; 0x108a <proccess_instruction+0x18e>
    10b4:	0a e2       	ldi	r16, 0x2A	; 42
    10b6:	10 e5       	ldi	r17, 0x50	; 80
    10b8:	2e ef       	ldi	r18, 0xFE	; 254
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	01 50       	subi	r16, 0x01	; 1
    10be:	10 40       	sbci	r17, 0x00	; 0
    10c0:	20 40       	sbci	r18, 0x00	; 0
    10c2:	30 40       	sbci	r19, 0x00	; 0
    10c4:	d9 f7       	brne	.-10     	; 0x10bc <proccess_instruction+0x1c0>
    10c6:	00 00       	nop
    10c8:	00 e0       	ldi	r16, 0x00	; 0
    10ca:	25 e0       	ldi	r18, 0x05	; 5
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	4d e2       	ldi	r20, 0x2D	; 45
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	60 e1       	ldi	r22, 0x10	; 16
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	8c e3       	ldi	r24, 0x3C	; 60
    10d8:	90 e0       	ldi	r25, 0x00	; 0
                    
                    _delay_ms(5000);
                    
                    //앞에 그렸던 문구 클리어
                    draw_data(60, 16, 45,5,0x00);
    10da:	21 db       	rcall	.-2494   	; 0x71e <draw_data>
    10dc:	45 ec       	ldi	r20, 0xC5	; 197
    10de:	53 e0       	ldi	r21, 0x03	; 3
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	c3 c0       	rjmp	.+390    	; 0x126c <proccess_instruction+0x370>
    10e6:	59 db       	rcall	.-2382   	; 0x79a <clear_oled>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	4d dc       	rcall	.-1894   	; 0x986 <draw_edge>
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	c3 2e       	mov	r12, r19
                    make_packet(RESPONSE_PN,1,FAIL_PN);
    10f0:	31 e0       	ldi	r19, 0x01	; 1
    10f2:	d3 2e       	mov	r13, r19
    10f4:	e1 2c       	mov	r14, r1
    10f6:	f1 2c       	mov	r15, r1
    10f8:	a7 01       	movw	r20, r14
            }
            break;
            
        case START_GAME:
            //이전화면 모두 클리어
            clear_oled();
    10fa:	42 5e       	subi	r20, 0xE2	; 226
    10fc:	5f 4f       	sbci	r21, 0xFF	; 255
            draw_edge(0);
    10fe:	86 01       	movw	r16, r12
    1100:	22 e0       	ldi	r18, 0x02	; 2
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	60 e1       	ldi	r22, 0x10	; 16
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	88 e0       	ldi	r24, 0x08	; 8
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	c0 da       	rcall	.-2688   	; 0x68e <draw_char>
    110e:	6a e0       	ldi	r22, 0x0A	; 10
    1110:	e6 0e       	add	r14, r22
    1112:	f1 1c       	adc	r15, r1
    1114:	80 e1       	ldi	r24, 0x10	; 16
            
            for(k=0;k<6;k++)
                draw_char(8,16,30+(k*10),2,font_game[k]);
    1116:	c8 0e       	add	r12, r24
    1118:	d1 1c       	adc	r13, r1
    111a:	9c e3       	ldi	r25, 0x3C	; 60
    111c:	e9 16       	cp	r14, r25
    111e:	f1 04       	cpc	r15, r1
    1120:	59 f7       	brne	.-42     	; 0x10f8 <proccess_instruction+0x1fc>
    1122:	61 e0       	ldi	r22, 0x01	; 1
    1124:	80 e1       	ldi	r24, 0x10	; 16
    1126:	94 d9       	rcall	.-3288   	; 0x450 <change_bit_val>
    1128:	a2 c0       	rjmp	.+324    	; 0x126e <proccess_instruction+0x372>
    112a:	87 e0       	ldi	r24, 0x07	; 7
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	8d d9       	rcall	.-3302   	; 0x44a <eeprom_read>
    1130:	80 93 ed 03 	sts	0x03ED, r24
        case START_GAME:
            //이전화면 모두 클리어
            clear_oled();
            draw_edge(0);
            
            for(k=0;k<6;k++)
    1134:	e1 2c       	mov	r14, r1
    1136:	f1 2c       	mov	r15, r1
    1138:	08 e0       	ldi	r16, 0x08	; 8
    113a:	80 91 ed 03 	lds	r24, 0x03ED
                draw_char(8,16,30+(k*10),2,font_game[k]);
            change_bit_val(ISGAME,1);	// s_flag ISGAME bit 1로 set
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	e8 16       	cp	r14, r24
    1142:	f9 06       	cpc	r15, r25
            break;
    1144:	d4 f4       	brge	.+52     	; 0x117a <proccess_instruction+0x27e>
            game_money += data_buffer[idx++]*10;
            write_num_to_oled(game_money);
            break;
            
        case REQUEST_SAVED_COIN:
            saved_coin_cnt = eeprom_read(UNCONNECT_COIN_CNT_ADD);
    1146:	9e 01       	movw	r18, r28
    1148:	2f 5f       	subi	r18, 0xFF	; 255
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	69 01       	movw	r12, r18
    114e:	10 e0       	ldi	r17, 0x00	; 0
    1150:	81 2f       	mov	r24, r17
            for(m=0;m<saved_coin_cnt;m++)
    1152:	80 0f       	add	r24, r16
    1154:	90 e0       	ldi	r25, 0x00	; 0
{
    unsigned char idx = 0;
    unsigned char d[3];
    unsigned char data[6];
    unsigned char tmp;
    unsigned char add = UNCONNECT_COIN_DATA_ADD;
    1156:	79 d9       	rcall	.-3342   	; 0x44a <eeprom_read>
            write_num_to_oled(game_money);
            break;
            
        case REQUEST_SAVED_COIN:
            saved_coin_cnt = eeprom_read(UNCONNECT_COIN_CNT_ADD);
            for(m=0;m<saved_coin_cnt;m++)
    1158:	f6 01       	movw	r30, r12
    115a:	81 93       	st	Z+, r24
    115c:	6f 01       	movw	r12, r30
    115e:	1f 5f       	subi	r17, 0xFF	; 255
    1160:	16 30       	cpi	r17, 0x06	; 6
    1162:	b1 f7       	brne	.-20     	; 0x1150 <proccess_instruction+0x254>
    1164:	0a 5f       	subi	r16, 0xFA	; 250
    1166:	ae 01       	movw	r20, r28
    1168:	4f 5f       	subi	r20, 0xFF	; 255
    116a:	5f 4f       	sbci	r21, 0xFF	; 255
    116c:	66 e0       	ldi	r22, 0x06	; 6
    116e:	86 e0       	ldi	r24, 0x06	; 6
    1170:	96 dd       	rcall	.-1236   	; 0xc9e <make_packet>
            {
                for(k=0;k<6;k++)
                    data[k] = eeprom_read(add++);
    1172:	ff ef       	ldi	r31, 0xFF	; 255
    1174:	ef 1a       	sub	r14, r31
    1176:	ff 0a       	sbc	r15, r31
    1178:	e0 cf       	rjmp	.-64     	; 0x113a <proccess_instruction+0x23e>
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	87 e0       	ldi	r24, 0x07	; 7
    117e:	90 e0       	ldi	r25, 0x00	; 0
            
        case REQUEST_SAVED_COIN:
            saved_coin_cnt = eeprom_read(UNCONNECT_COIN_CNT_ADD);
            for(m=0;m<saved_coin_cnt;m++)
            {
                for(k=0;k<6;k++)
    1180:	61 d9       	rcall	.-3390   	; 0x444 <eeprom_write>
    1182:	87 e0       	ldi	r24, 0x07	; 7
    1184:	90 e0       	ldi	r25, 0x00	; 0
                    data[k] = eeprom_read(add++);
                make_packet(SYNC_DATA,6,data);
    1186:	61 d9       	rcall	.-3390   	; 0x44a <eeprom_read>
    1188:	80 93 ed 03 	sts	0x03ED, r24
    118c:	98 2f       	mov	r25, r24
    118e:	99 0f       	add	r25, r25
    1190:	89 0f       	add	r24, r25
    1192:	88 0f       	add	r24, r24
            write_num_to_oled(game_money);
            break;
            
        case REQUEST_SAVED_COIN:
            saved_coin_cnt = eeprom_read(UNCONNECT_COIN_CNT_ADD);
            for(m=0;m<saved_coin_cnt;m++)
    1194:	88 5f       	subi	r24, 0xF8	; 248
    1196:	80 93 ee 03 	sts	0x03EE, r24
    119a:	69 c0       	rjmp	.+210    	; 0x126e <proccess_instruction+0x372>
            {
                for(k=0;k<6;k++)
                    data[k] = eeprom_read(add++);
                make_packet(SYNC_DATA,6,data);
            }
            eeprom_write(UNCONNECT_COIN_CNT_ADD,INIT_DATA);
    119c:	80 91 ce 03 	lds	r24, 0x03CE
    11a0:	90 91 cf 03 	lds	r25, 0x03CF
    11a4:	a0 91 d0 03 	lds	r26, 0x03D0
            
            // 블루투스 미연결때 저장되어있던 동전갯수를 eeprom으로 부터 얻는다
            saved_coin_cnt  = eeprom_read(UNCONNECT_COIN_CNT_ADD);
    11a8:	b0 91 d1 03 	lds	r27, 0x03D1
    11ac:	89 87       	std	Y+9, r24	; 0x09
    11ae:	98 87       	std	Y+8, r25	; 0x08
    11b0:	af 83       	std	Y+7, r26	; 0x07
            last_coin_add   = UNCONNECT_COIN_DATA_ADD + (saved_coin_cnt * 6);
    11b2:	8b 2f       	mov	r24, r27
    11b4:	99 27       	eor	r25, r25
    11b6:	aa 27       	eor	r26, r26
    11b8:	bb 27       	eor	r27, r27
    11ba:	80 93 ce 03 	sts	0x03CE, r24
    11be:	90 93 cf 03 	sts	0x03CF, r25
            break;
    11c2:	a0 93 d0 03 	sts	0x03D0, r26
    11c6:	b0 93 d1 03 	sts	0x03D1, r27
    11ca:	ae 01       	movw	r20, r28
    11cc:	49 5f       	subi	r20, 0xF9	; 249
    11ce:	5f 4f       	sbci	r21, 0xFF	; 255
    11d0:	63 e0       	ldi	r22, 0x03	; 3
            
        case SUMMIT_DATA:
            for(m=0;m<3;m++ )
            {
                // 8비트씩 char 배열에 저장
                d[2-m] = game_money & 0xff;
    11d2:	82 e1       	ldi	r24, 0x12	; 18
    11d4:	64 dd       	rcall	.-1336   	; 0xc9e <make_packet>
    11d6:	2a e0       	ldi	r18, 0x0A	; 10
                game_money = game_money>>8;
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	48 ee       	ldi	r20, 0xE8	; 232
    11dc:	53 e0       	ldi	r21, 0x03	; 3
    11de:	6e e5       	ldi	r22, 0x5E	; 94
    11e0:	71 e0       	ldi	r23, 0x01	; 1
    11e2:	87 e0       	ldi	r24, 0x07	; 7
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	53 dc       	rcall	.-1882   	; 0xa8e <led_interaction>
    11e8:	42 c0       	rjmp	.+132    	; 0x126e <proccess_instruction+0x372>
    11ea:	30 91 e4 03 	lds	r19, 0x03E4
    11ee:	e5 ee       	ldi	r30, 0xE5	; 229
            }
            
            // 게임보드에서 전송 버튼을 클릭했을경우 전송
            make_packet(SUMMIT_DATA,3,d);
    11f0:	f3 e0       	ldi	r31, 0x03	; 3
    11f2:	de 01       	movw	r26, r28
    11f4:	11 96       	adiw	r26, 0x01	; 1
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	4a e0       	ldi	r20, 0x0A	; 10
    11fa:	23 17       	cp	r18, r19
    11fc:	61 f0       	breq	.+24     	; 0x1216 <proccess_instruction+0x31a>
            led_interaction(BLUE_LED,350,1000,10);
    11fe:	81 91       	ld	r24, Z+
    1200:	64 2f       	mov	r22, r20
    1202:	b1 d1       	rcall	.+866    	; 0x1566 <__udivmodqi4>
    1204:	59 2f       	mov	r21, r25
    1206:	60 e1       	ldi	r22, 0x10	; 16
    1208:	86 9f       	mul	r24, r22
    120a:	c0 01       	movw	r24, r0
    120c:	11 24       	eor	r1, r1
    120e:	85 2b       	or	r24, r21
    1210:	8d 93       	st	X+, r24
            break;
    1212:	2f 5f       	subi	r18, 0xFF	; 255
            
        case GET_UTC_TIME:
            m   = 0;
            tmp = 0;
            
            len = data_buffer[idx++];
    1214:	f2 cf       	rjmp	.-28     	; 0x11fa <proccess_instruction+0x2fe>
    1216:	09 81       	ldd	r16, Y+1	; 0x01
    1218:	10 e0       	ldi	r17, 0x00	; 0
    121a:	2a 81       	ldd	r18, Y+2	; 0x02
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	4b 81       	ldd	r20, Y+3	; 0x03
            for(m=0;m<len;m++)
    1220:	50 e0       	ldi	r21, 0x00	; 0
            {
                data[m] = 0;
                tmp = data_buffer[idx++];
                data[m] |= (tmp/10)<<4;
    1222:	6c 81       	ldd	r22, Y+4	; 0x04
        case GET_UTC_TIME:
            m   = 0;
            tmp = 0;
            
            len = data_buffer[idx++];
            for(m=0;m<len;m++)
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
            {
                data[m] = 0;
                tmp = data_buffer[idx++];
    1228:	90 e0       	ldi	r25, 0x00	; 0
                data[m] |= (tmp/10)<<4;
    122a:	53 d9       	rcall	.-3418   	; 0x4d2 <set_rtc>
    122c:	43 ec       	ldi	r20, 0xC3	; 195
    122e:	53 e0       	ldi	r21, 0x03	; 3
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	83 e0       	ldi	r24, 0x03	; 3
    1234:	1b c0       	rjmp	.+54     	; 0x126c <proccess_instruction+0x370>
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	94 dd       	rcall	.-1240   	; 0xd62 <get_goal>
                data[m] |= (tmp%10);
    123a:	08 da       	rcall	.-3056   	; 0x64c <turnon_motor_voltage>
    123c:	80 91 e6 03 	lds	r24, 0x03E6
    1240:	ca d9       	rcall	.-3180   	; 0x5d6 <lock_or_unlock>
            }
            
            set_rtc(data[4],data[3],data[2],data[1],data[0]);
    1242:	2a e0       	ldi	r18, 0x0A	; 10
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	48 ee       	ldi	r20, 0xE8	; 232
    1248:	53 e0       	ldi	r21, 0x03	; 3
    124a:	6e e5       	ldi	r22, 0x5E	; 94
    124c:	71 e0       	ldi	r23, 0x01	; 1
    124e:	86 e0       	ldi	r24, 0x06	; 6
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	1d dc       	rcall	.-1990   	; 0xa8e <led_interaction>
    1254:	eb cf       	rjmp	.-42     	; 0x122c <proccess_instruction+0x330>
    1256:	80 91 d2 03 	lds	r24, 0x03D2
            // 사용자로부터 년월일시분값을 받아서 RTC에 셋한다.
            
            //성공적으로 데이터 수신했음을 앱에게 알림
            make_packet(ACK,1,SUCCESS_ACK);
    125a:	84 ff       	sbrs	r24, 4
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <proccess_instruction+0x368>
    125e:	47 ec       	ldi	r20, 0xC7	; 199
    1260:	53 e0       	ldi	r21, 0x03	; 3
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <proccess_instruction+0x36c>

            break;
            
            // 목표데이터를 전송받을경우
        case GET_GOAL:
            get_goal(idx++);
    1264:	49 ec       	ldi	r20, 0xC9	; 201
    1266:	53 e0       	ldi	r21, 0x03	; 3
    1268:	61 e0       	ldi	r22, 0x01	; 1
            turnon_motor_voltage();
    126a:	81 e1       	ldi	r24, 0x11	; 17
    126c:	18 dd       	rcall	.-1488   	; 0xc9e <make_packet>
            lock_or_unlock(data_buffer[++idx]);
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	ee d8       	rcall	.-3620   	; 0x450 <change_bit_val>
    1274:	29 96       	adiw	r28, 0x09	; 9
            
            //성공적으로 데이터 수신했음을 앱에게 알림
            led_interaction(GREEN_LED,350,1000,10);
    1276:	e8 e0       	ldi	r30, 0x08	; 8
    1278:	ca c1       	rjmp	.+916    	; 0x160e <__epilogue_restores__+0x14>

0000127a <init_adc>:
#include "eeprom.h"
#include "i2c.h"

void init_adc()
{
    ADMUX   |= (1<<REFS0) | (1<<REFS1) | (1<<MUX0);
    127a:	ec e7       	ldi	r30, 0x7C	; 124
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	81 6c       	ori	r24, 0xC1	; 193
    1282:	80 83       	st	Z, r24
    ADCSRA  |= (1<<ADEN)  | (1<<ADPS2) | (2<<ADPS1)|(ADPS0)|
    1284:	ea e7       	ldi	r30, 0x7A	; 122
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	84 6e       	ori	r24, 0xE4	; 228
    128c:	80 83       	st	Z, r24
               (1<<ADSC)  | (1<<ADATE) | (0<<ADIE);
    
    DDRB &= ~(1<<COINDETEC_PIN);
    128e:	20 98       	cbi	0x04, 0	; 4
    
    adc_max = 1024;
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	94 e0       	ldi	r25, 0x04	; 4
    1294:	90 93 dd 03 	sts	0x03DD, r25
    1298:	80 93 dc 03 	sts	0x03DC, r24
    129c:	08 95       	ret

0000129e <proccess_coin>:
}

void proccess_coin()
{
    129e:	a3 e0       	ldi	r26, 0x03	; 3
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e4 e5       	ldi	r30, 0x54	; 84
    12a4:	f9 e0       	ldi	r31, 0x09	; 9
    12a6:	8d c1       	rjmp	.+794    	; 0x15c2 <__prologue_saves__>
    12a8:	83 ec       	ldi	r24, 0xC3	; 195
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12aa:	99 e0       	ldi	r25, 0x09	; 9
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <proccess_coin+0xe>
    12b0:	00 c0       	rjmp	.+0      	; 0x12b2 <proccess_coin+0x14>
    12b2:	00 00       	nop
    12b4:	80 91 dc 03 	lds	r24, 0x03DC
    unsigned long   coin_flag;
    unsigned char   percent;
    
    _delay_us(500);
    // 금액 처리
    if( adc_max>800 && adc_max<1000 )
    12b8:	90 91 dd 03 	lds	r25, 0x03DD
    12bc:	9c 01       	movw	r18, r24
    12be:	21 52       	subi	r18, 0x21	; 33
    12c0:	33 40       	sbci	r19, 0x03	; 3
    12c2:	27 3c       	cpi	r18, 0xC7	; 199
    12c4:	31 05       	cpc	r19, r1
    12c6:	98 f0       	brcs	.+38     	; 0x12ee <proccess_coin+0x50>
    12c8:	2a 56       	subi	r18, 0x6A	; 106
        coin_flag = SHIPWON;
    else if( adc_max>650 && adc_max<800)
    12ca:	3f 4f       	sbci	r19, 0xFF	; 255
    12cc:	25 39       	cpi	r18, 0x95	; 149
    12ce:	31 05       	cpc	r19, r1
    12d0:	08 f4       	brcc	.+2      	; 0x12d4 <proccess_coin+0x36>
    12d2:	f0 c0       	rjmp	.+480    	; 0x14b4 <proccess_coin+0x216>
    12d4:	28 53       	subi	r18, 0x38	; 56
        coin_flag = OHSHIPWON;
    else if( adc_max>450 && adc_max<600 )
    12d6:	3f 4f       	sbci	r19, 0xFF	; 255
    12d8:	25 39       	cpi	r18, 0x95	; 149
    12da:	31 05       	cpc	r19, r1
    12dc:	08 f4       	brcc	.+2      	; 0x12e0 <proccess_coin+0x42>
    12de:	f0 c0       	rjmp	.+480    	; 0x14c0 <proccess_coin+0x222>
    12e0:	89 5c       	subi	r24, 0xC9	; 201
        coin_flag = BACKWON;
    else if (adc_max>200 && adc_max<400 )
    12e2:	91 09       	sbc	r25, r1
    12e4:	87 3c       	cpi	r24, 0xC7	; 199
    12e6:	91 05       	cpc	r25, r1
    12e8:	08 f4       	brcc	.+2      	; 0x12ec <proccess_coin+0x4e>
    12ea:	f0 c0       	rjmp	.+480    	; 0x14cc <proccess_coin+0x22e>
    12ec:	d2 c0       	rjmp	.+420    	; 0x1492 <proccess_coin+0x1f4>
    12ee:	4a e0       	ldi	r20, 0x0A	; 10
    unsigned char   percent;
    
    _delay_us(500);
    // 금액 처리
    if( adc_max>800 && adc_max<1000 )
        coin_flag = SHIPWON;
    12f0:	c4 2e       	mov	r12, r20
    12f2:	d1 2c       	mov	r13, r1
    12f4:	e1 2c       	mov	r14, r1
    12f6:	f1 2c       	mov	r15, r1
    12f8:	80 90 df 03 	lds	r8, 0x03DF
    
    
    // 제대로 인식되었을경우 led 인터렉션
    if(coin_flag!=0)
    {
        current_money += coin_flag; // 현재 저축된 총금액 연산
    12fc:	90 90 e0 03 	lds	r9, 0x03E0
    1300:	a0 90 e1 03 	lds	r10, 0x03E1
    1304:	b0 90 e2 03 	lds	r11, 0x03E2
    1308:	8c 0c       	add	r8, r12
    130a:	9d 1c       	adc	r9, r13
    130c:	ae 1c       	adc	r10, r14
    130e:	bf 1c       	adc	r11, r15
    1310:	80 92 df 03 	sts	0x03DF, r8
    1314:	90 92 e0 03 	sts	0x03E0, r9
    1318:	a0 92 e1 03 	sts	0x03E1, r10
    131c:	b0 92 e2 03 	sts	0x03E2, r11
    1320:	8e 01       	movw	r16, r28
    1322:	0c 5f       	subi	r16, 0xFC	; 252
    1324:	1f 4f       	sbci	r17, 0xFF	; 255
    1326:	16 01       	movw	r2, r12
    1328:	27 01       	movw	r4, r14
    132a:	84 e0       	ldi	r24, 0x04	; 4
    132c:	68 2e       	mov	r6, r24
    132e:	71 2c       	mov	r7, r1
    1330:	f8 01       	movw	r30, r16
        tmp_current    = current_money;
        
        for( i=0;i<length;i++ )
        {
            // 8비트씩 char 배열에 저장
            data[2-i] = coin_flag & 0xff;
    1332:	22 92       	st	-Z, r2
    1334:	8f 01       	movw	r16, r30
    1336:	23 2c       	mov	r2, r3
            coin_flag = coin_flag>>8;
    1338:	34 2c       	mov	r3, r4
    133a:	45 2c       	mov	r4, r5
    133c:	55 24       	eor	r5, r5
    133e:	68 2d       	mov	r22, r8
            tmp = tmp_current & 0xff;
            
            //eeprom에 현재금액 저장
            eeprom_write((CURRENT_MONEY-2)+i,tmp);
    1340:	c3 01       	movw	r24, r6
    1342:	80 d8       	rcall	.-3840   	; 0x444 <eeprom_write>
    1344:	89 2c       	mov	r8, r9
    1346:	9a 2c       	mov	r9, r10
            tmp_current = tmp_current>>8;
    1348:	ab 2c       	mov	r10, r11
    134a:	bb 24       	eor	r11, r11
    134c:	ff ef       	ldi	r31, 0xFF	; 255
    134e:	6f 1a       	sub	r6, r31
    1350:	7f 0a       	sbc	r7, r31
    1352:	27 e0       	ldi	r18, 0x07	; 7
    1354:	62 16       	cp	r6, r18
    if(coin_flag!=0)
    {
        current_money += coin_flag; // 현재 저축된 총금액 연산
        tmp_current    = current_money;
        
        for( i=0;i<length;i++ )
    1356:	71 04       	cpc	r7, r1
    1358:	59 f7       	brne	.-42     	; 0x1330 <proccess_coin+0x92>
    135a:	ae 01       	movw	r20, r28
    135c:	4f 5f       	subi	r20, 0xFF	; 255
            eeprom_write((CURRENT_MONEY-2)+i,tmp);
            tmp_current = tmp_current>>8;
        }
        
        // 저금한 금액 전송 시도
        make_packet(SEND_MONEY,length,data);
    135e:	5f 4f       	sbci	r21, 0xFF	; 255
    1360:	63 e0       	ldi	r22, 0x03	; 3
    1362:	88 e0       	ldi	r24, 0x08	; 8
    1364:	9c dc       	rcall	.-1736   	; 0xc9e <make_packet>
    1366:	86 e0       	ldi	r24, 0x06	; 6
    1368:	90 91 d2 03 	lds	r25, 0x03D2
    136c:	96 ff       	sbrs	r25, 6
        i=0;
        
        while(1)
        {
            if(s_flag&CONNECT)
    136e:	b5 c0       	rjmp	.+362    	; 0x14da <proccess_coin+0x23c>
    1370:	80 91 d2 03 	lds	r24, 0x03D2
    1374:	86 fd       	sbrc	r24, 6
                break;
            i++;
        }
        
        // 블루투스 미연결 상태일경우 정보 eeprom에 저장
        if(!(s_flag&CONNECT))
    1376:	89 c0       	rjmp	.+274    	; 0x148a <proccess_coin+0x1ec>
    1378:	60 91 ed 03 	lds	r22, 0x03ED
    137c:	6f 5f       	subi	r22, 0xFF	; 255
        {
            saved_coin_cnt++;
    137e:	60 93 ed 03 	sts	0x03ED, r22
    1382:	87 e0       	ldi	r24, 0x07	; 7
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	5e d8       	rcall	.-3908   	; 0x444 <eeprom_write>
            eeprom_write(UNCONNECT_COIN_CNT_ADD,saved_coin_cnt);
    1388:	66 e0       	ldi	r22, 0x06	; 6
    138a:	88 e6       	ldi	r24, 0x68	; 104
    138c:	d2 d8       	rcall	.-3676   	; 0x532 <i2c_read>
    138e:	90 91 ee 03 	lds	r25, 0x03EE
            // 블루 투스 미연결시 데이터 저장
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x06)); // 년
    1392:	21 e0       	ldi	r18, 0x01	; 1
    1394:	29 0f       	add	r18, r25
    1396:	20 93 ee 03 	sts	0x03EE, r18
    139a:	68 2f       	mov	r22, r24
    139c:	89 2f       	mov	r24, r25
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	51 d8       	rcall	.-3934   	; 0x444 <eeprom_write>
    13a2:	87 e8       	ldi	r24, 0x87	; 135
    13a4:	93 e1       	ldi	r25, 0x13	; 19
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <proccess_coin+0x108>
    13aa:	00 c0       	rjmp	.+0      	; 0x13ac <proccess_coin+0x10e>
    13ac:	00 00       	nop
    13ae:	65 e0       	ldi	r22, 0x05	; 5
    13b0:	88 e6       	ldi	r24, 0x68	; 104
    13b2:	bf d8       	rcall	.-3714   	; 0x532 <i2c_read>
    13b4:	90 91 ee 03 	lds	r25, 0x03EE
    13b8:	21 e0       	ldi	r18, 0x01	; 1
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x05)); // 월
    13ba:	29 0f       	add	r18, r25
    13bc:	20 93 ee 03 	sts	0x03EE, r18
    13c0:	68 2f       	mov	r22, r24
    13c2:	89 2f       	mov	r24, r25
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	3e d8       	rcall	.-3972   	; 0x444 <eeprom_write>
    13c8:	e7 e8       	ldi	r30, 0x87	; 135
    13ca:	f3 e1       	ldi	r31, 0x13	; 19
    13cc:	31 97       	sbiw	r30, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <proccess_coin+0x12e>
    13d0:	00 c0       	rjmp	.+0      	; 0x13d2 <proccess_coin+0x134>
    13d2:	00 00       	nop
    13d4:	64 e0       	ldi	r22, 0x04	; 4
    13d6:	88 e6       	ldi	r24, 0x68	; 104
    13d8:	ac d8       	rcall	.-3752   	; 0x532 <i2c_read>
    13da:	90 91 ee 03 	lds	r25, 0x03EE
    13de:	21 e0       	ldi	r18, 0x01	; 1
    13e0:	29 0f       	add	r18, r25
    13e2:	20 93 ee 03 	sts	0x03EE, r18
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x04)); // 일
    13e6:	68 2f       	mov	r22, r24
    13e8:	89 2f       	mov	r24, r25
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	2b d8       	rcall	.-4010   	; 0x444 <eeprom_write>
    13ee:	87 e8       	ldi	r24, 0x87	; 135
    13f0:	93 e1       	ldi	r25, 0x13	; 19
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <proccess_coin+0x154>
    13f6:	00 c0       	rjmp	.+0      	; 0x13f8 <proccess_coin+0x15a>
    13f8:	00 00       	nop
    13fa:	62 e0       	ldi	r22, 0x02	; 2
    13fc:	88 e6       	ldi	r24, 0x68	; 104
    13fe:	99 d8       	rcall	.-3790   	; 0x532 <i2c_read>
    1400:	90 91 ee 03 	lds	r25, 0x03EE
    1404:	21 e0       	ldi	r18, 0x01	; 1
    1406:	29 0f       	add	r18, r25
    1408:	20 93 ee 03 	sts	0x03EE, r18
    140c:	68 2f       	mov	r22, r24
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x02)); // 시
    140e:	89 2f       	mov	r24, r25
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	18 d8       	rcall	.-4048   	; 0x444 <eeprom_write>
    1414:	e7 e8       	ldi	r30, 0x87	; 135
    1416:	f3 e1       	ldi	r31, 0x13	; 19
    1418:	31 97       	sbiw	r30, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <proccess_coin+0x17a>
    141c:	00 c0       	rjmp	.+0      	; 0x141e <proccess_coin+0x180>
    141e:	00 00       	nop
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	88 e6       	ldi	r24, 0x68	; 104
    1424:	86 d8       	rcall	.-3828   	; 0x532 <i2c_read>
    1426:	90 91 ee 03 	lds	r25, 0x03EE
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	29 0f       	add	r18, r25
    142e:	20 93 ee 03 	sts	0x03EE, r18
    1432:	68 2f       	mov	r22, r24
    1434:	89 2f       	mov	r24, r25
    1436:	90 e0       	ldi	r25, 0x00	; 0
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x01)); // 분
    1438:	05 d8       	rcall	.-4086   	; 0x444 <eeprom_write>
    143a:	87 e8       	ldi	r24, 0x87	; 135
    143c:	93 e1       	ldi	r25, 0x13	; 19
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <proccess_coin+0x1a0>
    1442:	00 c0       	rjmp	.+0      	; 0x1444 <proccess_coin+0x1a6>
    1444:	00 00       	nop
    1446:	10 91 ee 03 	lds	r17, 0x03EE
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	81 0f       	add	r24, r17
    144e:	80 93 ee 03 	sts	0x03EE, r24
    1452:	c7 01       	movw	r24, r14
    1454:	b6 01       	movw	r22, r12
    1456:	2a e0       	ldi	r18, 0x0A	; 10
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	8f d0       	rcall	.+286    	; 0x157e <__udivmodsi4>
    1460:	62 2f       	mov	r22, r18
            _delay_ms(1);
            eeprom_write(last_coin_add++,tpm); // 돈
    1462:	81 2f       	mov	r24, r17
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 22 02 	call	0x444	; 0x444 <eeprom_write>
    146a:	61 e0       	ldi	r22, 0x01	; 1
    146c:	80 e2       	ldi	r24, 0x20	; 32
    else if (adc_max>200 && adc_max<400 )
        coin_flag = OHBACKWON;
    else
        coin_flag = 0;
    
    tpm = coin_flag/10;
    146e:	0e 94 28 02 	call	0x450	; 0x450 <change_bit_val>
    1472:	60 91 d2 03 	lds	r22, 0x03D2
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 22 02 	call	0x444	; 0x444 <eeprom_write>
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x02)); // 시
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x01)); // 분
            _delay_ms(1);
            eeprom_write(last_coin_add++,tpm); // 돈
    147e:	e7 e8       	ldi	r30, 0x87	; 135
    1480:	f3 e1       	ldi	r31, 0x13	; 19
    1482:	31 97       	sbiw	r30, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <proccess_coin+0x1e4>
    1486:	00 c0       	rjmp	.+0      	; 0x1488 <proccess_coin+0x1ea>
            
            change_bit_val( ISDATA, 1 );
    1488:	00 00       	nop
    148a:	80 91 d2 03 	lds	r24, 0x03D2
    148e:	84 ff       	sbrs	r24, 4
    1490:	31 c0       	rjmp	.+98     	; 0x14f4 <proccess_coin+0x256>
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	0e 94 28 02 	call	0x450	; 0x450 <change_bit_val>
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	80 e4       	ldi	r24, 0x40	; 64
    149e:	0e 94 28 02 	call	0x450	; 0x450 <change_bit_val>
    14a2:	87 e8       	ldi	r24, 0x87	; 135
    14a4:	93 e1       	ldi	r25, 0x13	; 19
    14a6:	01 97       	sbiw	r24, 0x01	; 1
            eeprom_write( S_FLAG_ADDRESS, s_flag);
            _delay_ms(1);
        }
        
        if(!(s_flag&ISGAME))
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <proccess_coin+0x208>
    14aa:	00 c0       	rjmp	.+0      	; 0x14ac <proccess_coin+0x20e>
    14ac:	00 00       	nop
    14ae:	23 96       	adiw	r28, 0x03	; 3
        }
        
    }
    
    // s_flag 0으로 클리어
    change_bit_val(INPUT_COIN,0);
    14b0:	e2 e1       	ldi	r30, 0x12	; 18
    14b2:	a3 c0       	rjmp	.+326    	; 0x15fa <__epilogue_restores__>
    14b4:	32 e3       	ldi	r19, 0x32	; 50
    14b6:	c3 2e       	mov	r12, r19
    14b8:	d1 2c       	mov	r13, r1
    14ba:	e1 2c       	mov	r14, r1
    14bc:	f1 2c       	mov	r15, r1
    14be:	1c cf       	rjmp	.-456    	; 0x12f8 <proccess_coin+0x5a>
    14c0:	24 e6       	ldi	r18, 0x64	; 100
    14c2:	c2 2e       	mov	r12, r18
    14c4:	d1 2c       	mov	r13, r1
    14c6:	e1 2c       	mov	r14, r1
    14c8:	f1 2c       	mov	r15, r1
    14ca:	16 cf       	rjmp	.-468    	; 0x12f8 <proccess_coin+0x5a>
    change_bit_val(CONNECT,0);
    _delay_ms(1);
}
    14cc:	94 ef       	ldi	r25, 0xF4	; 244
    14ce:	c9 2e       	mov	r12, r25
    14d0:	dd 24       	eor	r13, r13
    14d2:	d3 94       	inc	r13
    _delay_us(500);
    // 금액 처리
    if( adc_max>800 && adc_max<1000 )
        coin_flag = SHIPWON;
    else if( adc_max>650 && adc_max<800)
        coin_flag = OHSHIPWON;
    14d4:	e1 2c       	mov	r14, r1
    14d6:	f1 2c       	mov	r15, r1
    14d8:	0f cf       	rjmp	.-482    	; 0x12f8 <proccess_coin+0x5a>
    14da:	3f e7       	ldi	r19, 0x7F	; 127
    14dc:	9a e1       	ldi	r25, 0x1A	; 26
    14de:	e6 e0       	ldi	r30, 0x06	; 6
    else if( adc_max>450 && adc_max<600 )
        coin_flag = BACKWON;
    14e0:	31 50       	subi	r19, 0x01	; 1
    14e2:	90 40       	sbci	r25, 0x00	; 0
    14e4:	e0 40       	sbci	r30, 0x00	; 0
    14e6:	e1 f7       	brne	.-8      	; 0x14e0 <proccess_coin+0x242>
    14e8:	00 c0       	rjmp	.+0      	; 0x14ea <proccess_coin+0x24c>
    14ea:	00 00       	nop
    14ec:	81 50       	subi	r24, 0x01	; 1
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <proccess_coin+0x254>
    14f0:	3b cf       	rjmp	.-394    	; 0x1368 <proccess_coin+0xca>
    14f2:	3e cf       	rjmp	.-388    	; 0x1370 <proccess_coin+0xd2>
    14f4:	bd da       	rcall	.-2694   	; 0xa70 <melody_interaction>
    14f6:	80 91 d2 03 	lds	r24, 0x03D2
    14fa:	83 ff       	sbrs	r24, 3
    14fc:	17 c0       	rjmp	.+46     	; 0x152c <proccess_coin+0x28e>
    14fe:	20 91 df 03 	lds	r18, 0x03DF
    1502:	30 91 e0 03 	lds	r19, 0x03E0
    1506:	40 91 e1 03 	lds	r20, 0x03E1
    150a:	50 91 e2 03 	lds	r21, 0x03E2
        {
            if(s_flag&CONNECT)
                break;
            
            _delay_ms(100);  // 전송성공 ack 대기
            if(i>4)         // 전송성공 ack를 200ms 동안 대기
    150e:	a0 e7       	ldi	r26, 0x70	; 112
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	1f d0       	rcall	.+62     	; 0x1552 <__muluhisi3>
            _delay_ms(1);
        }
        
        if(!(s_flag&ISGAME))
        {
            melody_interaction();
    1514:	20 91 d8 03 	lds	r18, 0x03D8
            if(s_flag&ISGOAL)
    1518:	30 91 d9 03 	lds	r19, 0x03D9
    151c:	40 91 da 03 	lds	r20, 0x03DA
            {
                percent = (current_money*112)/goal_money;
    1520:	50 91 db 03 	lds	r21, 0x03DB
    1524:	2c d0       	rcall	.+88     	; 0x157e <__udivmodsi4>
    1526:	82 2f       	mov	r24, r18
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	12 da       	rcall	.-3036   	; 0x950 <draw_percentage>
    152c:	60 91 df 03 	lds	r22, 0x03DF
    1530:	70 91 e0 03 	lds	r23, 0x03E0
    1534:	80 91 e1 03 	lds	r24, 0x03E1
    1538:	90 91 e2 03 	lds	r25, 0x03E2
    153c:	3b d9       	rcall	.-3466   	; 0x7b4 <write_num_to_oled>
    153e:	2a e0       	ldi	r18, 0x0A	; 10
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	48 ee       	ldi	r20, 0xE8	; 232
    1544:	53 e0       	ldi	r21, 0x03	; 3
    1546:	6e e5       	ldi	r22, 0x5E	; 94
    1548:	71 e0       	ldi	r23, 0x01	; 1
    154a:	85 e0       	ldi	r24, 0x05	; 5
                draw_percentage(percent);
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	9f da       	rcall	.-2754   	; 0xa8e <led_interaction>
    1550:	a0 cf       	rjmp	.-192    	; 0x1492 <proccess_coin+0x1f4>

00001552 <__muluhisi3>:
    1552:	6e d0       	rcall	.+220    	; 0x1630 <__umulhisi3>
    1554:	a5 9f       	mul	r26, r21
    1556:	90 0d       	add	r25, r0
    1558:	b4 9f       	mul	r27, r20
    155a:	90 0d       	add	r25, r0
    155c:	a4 9f       	mul	r26, r20
    155e:	80 0d       	add	r24, r0
    1560:	91 1d       	adc	r25, r1
    1562:	11 24       	eor	r1, r1
    1564:	08 95       	ret

00001566 <__udivmodqi4>:
    1566:	99 1b       	sub	r25, r25
    1568:	79 e0       	ldi	r23, 0x09	; 9
    156a:	04 c0       	rjmp	.+8      	; 0x1574 <__udivmodqi4_ep>

0000156c <__udivmodqi4_loop>:
    156c:	99 1f       	adc	r25, r25
    156e:	96 17       	cp	r25, r22
    1570:	08 f0       	brcs	.+2      	; 0x1574 <__udivmodqi4_ep>
    1572:	96 1b       	sub	r25, r22

00001574 <__udivmodqi4_ep>:
    1574:	88 1f       	adc	r24, r24
    1576:	7a 95       	dec	r23
    1578:	c9 f7       	brne	.-14     	; 0x156c <__udivmodqi4_loop>
    157a:	80 95       	com	r24
    157c:	08 95       	ret

0000157e <__udivmodsi4>:
    157e:	a1 e2       	ldi	r26, 0x21	; 33
    1580:	1a 2e       	mov	r1, r26
    1582:	aa 1b       	sub	r26, r26
    1584:	bb 1b       	sub	r27, r27
    1586:	fd 01       	movw	r30, r26
    1588:	0d c0       	rjmp	.+26     	; 0x15a4 <__udivmodsi4_ep>

0000158a <__udivmodsi4_loop>:
    158a:	aa 1f       	adc	r26, r26
    158c:	bb 1f       	adc	r27, r27
    158e:	ee 1f       	adc	r30, r30
    1590:	ff 1f       	adc	r31, r31
    1592:	a2 17       	cp	r26, r18
    1594:	b3 07       	cpc	r27, r19
    1596:	e4 07       	cpc	r30, r20
    1598:	f5 07       	cpc	r31, r21
    159a:	20 f0       	brcs	.+8      	; 0x15a4 <__udivmodsi4_ep>
    159c:	a2 1b       	sub	r26, r18
    159e:	b3 0b       	sbc	r27, r19
    15a0:	e4 0b       	sbc	r30, r20
    15a2:	f5 0b       	sbc	r31, r21

000015a4 <__udivmodsi4_ep>:
    15a4:	66 1f       	adc	r22, r22
    15a6:	77 1f       	adc	r23, r23
    15a8:	88 1f       	adc	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	1a 94       	dec	r1
    15ae:	69 f7       	brne	.-38     	; 0x158a <__udivmodsi4_loop>
    15b0:	60 95       	com	r22
    15b2:	70 95       	com	r23
    15b4:	80 95       	com	r24
    15b6:	90 95       	com	r25
    15b8:	9b 01       	movw	r18, r22
    15ba:	ac 01       	movw	r20, r24
    15bc:	bd 01       	movw	r22, r26
    15be:	cf 01       	movw	r24, r30
    15c0:	08 95       	ret

000015c2 <__prologue_saves__>:
    15c2:	2f 92       	push	r2
    15c4:	3f 92       	push	r3
    15c6:	4f 92       	push	r4
    15c8:	5f 92       	push	r5
    15ca:	6f 92       	push	r6
    15cc:	7f 92       	push	r7
    15ce:	8f 92       	push	r8
    15d0:	9f 92       	push	r9
    15d2:	af 92       	push	r10
    15d4:	bf 92       	push	r11
    15d6:	cf 92       	push	r12
    15d8:	df 92       	push	r13
    15da:	ef 92       	push	r14
    15dc:	ff 92       	push	r15
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	ca 1b       	sub	r28, r26
    15ec:	db 0b       	sbc	r29, r27
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	09 94       	ijmp

000015fa <__epilogue_restores__>:
    15fa:	2a 88       	ldd	r2, Y+18	; 0x12
    15fc:	39 88       	ldd	r3, Y+17	; 0x11
    15fe:	48 88       	ldd	r4, Y+16	; 0x10
    1600:	5f 84       	ldd	r5, Y+15	; 0x0f
    1602:	6e 84       	ldd	r6, Y+14	; 0x0e
    1604:	7d 84       	ldd	r7, Y+13	; 0x0d
    1606:	8c 84       	ldd	r8, Y+12	; 0x0c
    1608:	9b 84       	ldd	r9, Y+11	; 0x0b
    160a:	aa 84       	ldd	r10, Y+10	; 0x0a
    160c:	b9 84       	ldd	r11, Y+9	; 0x09
    160e:	c8 84       	ldd	r12, Y+8	; 0x08
    1610:	df 80       	ldd	r13, Y+7	; 0x07
    1612:	ee 80       	ldd	r14, Y+6	; 0x06
    1614:	fd 80       	ldd	r15, Y+5	; 0x05
    1616:	0c 81       	ldd	r16, Y+4	; 0x04
    1618:	1b 81       	ldd	r17, Y+3	; 0x03
    161a:	aa 81       	ldd	r26, Y+2	; 0x02
    161c:	b9 81       	ldd	r27, Y+1	; 0x01
    161e:	ce 0f       	add	r28, r30
    1620:	d1 1d       	adc	r29, r1
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	ed 01       	movw	r28, r26
    162e:	08 95       	ret

00001630 <__umulhisi3>:
    1630:	a2 9f       	mul	r26, r18
    1632:	b0 01       	movw	r22, r0
    1634:	b3 9f       	mul	r27, r19
    1636:	c0 01       	movw	r24, r0
    1638:	a3 9f       	mul	r26, r19
    163a:	70 0d       	add	r23, r0
    163c:	81 1d       	adc	r24, r1
    163e:	11 24       	eor	r1, r1
    1640:	91 1d       	adc	r25, r1
    1642:	b2 9f       	mul	r27, r18
    1644:	70 0d       	add	r23, r0
    1646:	81 1d       	adc	r24, r1
    1648:	11 24       	eor	r1, r1
    164a:	91 1d       	adc	r25, r1
    164c:	08 95       	ret

0000164e <__eerd_byte_m324p>:
    164e:	f9 99       	sbic	0x1f, 1	; 31
    1650:	fe cf       	rjmp	.-4      	; 0x164e <__eerd_byte_m324p>
    1652:	92 bd       	out	0x22, r25	; 34
    1654:	81 bd       	out	0x21, r24	; 33
    1656:	f8 9a       	sbi	0x1f, 0	; 31
    1658:	99 27       	eor	r25, r25
    165a:	80 b5       	in	r24, 0x20	; 32
    165c:	08 95       	ret

0000165e <__eewr_byte_m324p>:
    165e:	26 2f       	mov	r18, r22

00001660 <__eewr_r18_m324p>:
    1660:	f9 99       	sbic	0x1f, 1	; 31
    1662:	fe cf       	rjmp	.-4      	; 0x1660 <__eewr_r18_m324p>
    1664:	1f ba       	out	0x1f, r1	; 31
    1666:	92 bd       	out	0x22, r25	; 34
    1668:	81 bd       	out	0x21, r24	; 33
    166a:	20 bd       	out	0x20, r18	; 32
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	fa 9a       	sbi	0x1f, 2	; 31
    1672:	f9 9a       	sbi	0x1f, 1	; 31
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	08 95       	ret

0000167a <_exit>:
    167a:	f8 94       	cli

0000167c <__stop_program>:
    167c:	ff cf       	rjmp	.-2      	; 0x167c <__stop_program>
