
coinPet.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
       6:	00 00       	nop
       8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
       a:	00 00       	nop
       c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
       e:	00 00       	nop
      10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
      12:	00 00       	nop
      14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
      16:	00 00       	nop
      18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
      22:	00 00       	nop
      24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
      26:	00 00       	nop
      28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
      32:	00 00       	nop
      34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
      36:	00 00       	nop
      38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c2       	rjmp	.+1182   	; 0x4e0 <__vector_16>
      42:	00 00       	nop
      44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c2       	rjmp	.+1240   	; 0x522 <__vector_18>
      4a:	00 00       	nop
      4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	02 c5       	rjmp	.+2564   	; 0xa56 <__vector_20>
      52:	00 00       	nop
      54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
      56:	00 00       	nop
      58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
      62:	00 00       	nop
      64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
      66:	00 00       	nop
      68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	48 c5       	rjmp	.+2704   	; 0xb02 <__vector_28>
      72:	00 00       	nop
      74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
      76:	00 00       	nop
      78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	13 e0       	ldi	r17, 0x03	; 3
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e6 e4       	ldi	r30, 0x46	; 70
      90:	f4 e1       	ldi	r31, 0x14	; 20
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ac 33       	cpi	r26, 0x3C	; 60
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	13 e0       	ldi	r17, 0x03	; 3
      a0:	ac e3       	ldi	r26, 0x3C	; 60
      a2:	b3 e0       	ldi	r27, 0x03	; 3
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ae 35       	cpi	r26, 0x5E	; 94
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	03 d0       	rcall	.+6      	; 0xb6 <main>
      b0:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <_exit>

000000b4 <__bad_interrupt>:
      b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <main>:

#define GAMEBOARD_DETEC_PIN     PA0


int main(void)
{
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e1 e6       	ldi	r30, 0x61	; 97
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__prologue_saves__+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c2:	2f e7       	ldi	r18, 0x7F	; 127
      c4:	84 e8       	ldi	r24, 0x84	; 132
      c6:	9e e1       	ldi	r25, 0x1E	; 30
      c8:	21 50       	subi	r18, 0x01	; 1
      ca:	80 40       	sbci	r24, 0x00	; 0
      cc:	90 40       	sbci	r25, 0x00	; 0
      ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x12>
      d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x1c>
      d2:	00 00       	nop
    unsigned char percent;
    int k = 0;
    
    _delay_ms(500);
    
    init_oled();
      d4:	f1 d3       	rcall	.+2018   	; 0x8b8 <init_oled>
      d6:	62 d5       	rcall	.+2756   	; 0xb9c <init_uart>
    init_uart();
      d8:	c5 d7       	rcall	.+3978   	; 0x1064 <init_adc>
      da:	8f d4       	rcall	.+2334   	; 0x9fa <init_interaction>
    init_adc();
      dc:	64 d1       	rcall	.+712    	; 0x3a6 <init_i2c>
      de:	0b d2       	rcall	.+1046   	; 0x4f6 <init_motor>
    init_interaction();
      e0:	f5 d0       	rcall	.+490    	; 0x2cc <get_eeprom_data>
      e2:	78 94       	sei
    init_i2c();
      e4:	08 98       	cbi	0x01, 0	; 1
      e6:	2b 98       	cbi	0x05, 3	; 5
    init_motor();
      e8:	13 b8       	out	0x03, r1	; 3
      ea:	10 b8       	out	0x00, r1	; 0
    get_eeprom_data();  // EEPROM으로 부터 데이터 획득
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	39 d4       	rcall	.+2162   	; 0x962 <draw_edge>
    
    
    sei();
      f0:	41 e3       	ldi	r20, 0x31	; 49
    DDRA &= ~(1<<GAMEBOARD_DETEC_PIN);
      f2:	53 e0       	ldi	r21, 0x03	; 3
    PORTB &=0xf7;
      f4:	61 e0       	ldi	r22, 0x01	; 1
    PINB = 0x00;
      f6:	82 e0       	ldi	r24, 0x02	; 2
    PINA = 0x00;
      f8:	6c d5       	rcall	.+2776   	; 0xbd2 <make_packet>
    
    draw_edge(0);
      fa:	80 91 41 03 	lds	r24, 0x0341
      fe:	87 ff       	sbrs	r24, 7
    
    make_packet(RESPONSE_PN,1,SUCCESS_PN);
     100:	09 c0       	rjmp	.+18     	; 0x114 <main+0x5e>
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	2e d4       	rcall	.+2140   	; 0x962 <draw_edge>
     106:	30 e2       	ldi	r19, 0x20	; 32
     108:	e3 2e       	mov	r14, r19
     10a:	32 e0       	ldi	r19, 0x02	; 2
    
    // P/N 인증 과정
    while(1)
    {
        //P/N 미인증 상태일경우
        if((s_flag&CONFIRM)!=CONFIRM)
     10c:	f3 2e       	mov	r15, r19
     10e:	c0 e0       	ldi	r28, 0x00	; 0
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	28 c0       	rjmp	.+80     	; 0x164 <main+0xae>
        //P/N 인증 상태일경우
        else break;
    }
    

    draw_edge(1);
     114:	20 ec       	ldi	r18, 0xC0	; 192
     116:	e2 2e       	mov	r14, r18
     118:	22 e0       	ldi	r18, 0x02	; 2
     11a:	f2 2e       	mov	r15, r18
     11c:	c0 e0       	ldi	r28, 0x00	; 0
     11e:	d0 e0       	ldi	r29, 0x00	; 0
     120:	ae 01       	movw	r20, r28
     122:	42 5e       	subi	r20, 0xE2	; 226
     124:	5f 4f       	sbci	r21, 0xFF	; 255
     126:	87 01       	movw	r16, r14
     128:	22 e0       	ldi	r18, 0x02	; 2
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	60 e1       	ldi	r22, 0x10	; 16
     12e:	70 e0       	ldi	r23, 0x00	; 0
    
    // P/N 인증 과정
    while(1)
    {
        //P/N 미인증 상태일경우
        if((s_flag&CONFIRM)!=CONFIRM)
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	5e d2       	rcall	.+1212   	; 0x5f2 <draw_char>
     136:	2a 96       	adiw	r28, 0x0a	; 10
     138:	20 e1       	ldi	r18, 0x10	; 16
        {
//            // 제품등록 문구 출력
            for(k=0;k<6;k++)
                draw_char(8,16,30+(k*10),2,font_register[k]);
     13a:	e2 0e       	add	r14, r18
     13c:	f1 1c       	adc	r15, r1
     13e:	cc 33       	cpi	r28, 0x3C	; 60
     140:	d1 05       	cpc	r29, r1
     142:	71 f7       	brne	.-36     	; 0x120 <main+0x6a>
     144:	80 91 41 03 	lds	r24, 0x0341
     148:	87 fd       	sbrc	r24, 7
     14a:	db cf       	rjmp	.-74     	; 0x102 <main+0x4c>
     14c:	8f e0       	ldi	r24, 0x0F	; 15
     14e:	97 e2       	ldi	r25, 0x27	; 39
     150:	01 97       	sbiw	r24, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <main+0x9a>
    {
        //P/N 미인증 상태일경우
        if((s_flag&CONFIRM)!=CONFIRM)
        {
//            // 제품등록 문구 출력
            for(k=0;k<6;k++)
     154:	00 c0       	rjmp	.+0      	; 0x156 <main+0xa0>
     156:	00 00       	nop
     158:	80 91 41 03 	lds	r24, 0x0341
     15c:	81 ff       	sbrs	r24, 1
     15e:	f2 cf       	rjmp	.-28     	; 0x144 <main+0x8e>
     160:	ec d5       	rcall	.+3032   	; 0xd3a <proccess_instruction>
     162:	f0 cf       	rjmp	.-32     	; 0x144 <main+0x8e>
     164:	ae 01       	movw	r20, r28
     166:	42 5e       	subi	r20, 0xE2	; 226
     168:	5f 4f       	sbci	r21, 0xFF	; 255
     16a:	87 01       	movw	r16, r14
     16c:	22 e0       	ldi	r18, 0x02	; 2
            
            //인증완료될때까지 대기
            while(!(s_flag&CONFIRM))
            {
                _delay_ms(2);
                if(s_flag&GET_INSTRUCTION)
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	60 e1       	ldi	r22, 0x10	; 16
     172:	70 e0       	ldi	r23, 0x00	; 0
     174:	88 e0       	ldi	r24, 0x08	; 8
                    proccess_instruction();
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	3c d2       	rcall	.+1144   	; 0x5f2 <draw_char>
     17a:	2a 96       	adiw	r28, 0x0a	; 10
     17c:	90 e1       	ldi	r25, 0x10	; 16
     17e:	e9 0e       	add	r14, r25
     180:	f1 1c       	adc	r15, r1
    }
    

    draw_edge(1);
    for(k=0;k<6;k++)
        draw_char(8,16,30+(k*10),2,font_money[k]);
     182:	cc 33       	cpi	r28, 0x3C	; 60
     184:	d1 05       	cpc	r29, r1
     186:	71 f7       	brne	.-36     	; 0x164 <main+0xae>
     188:	60 91 4e 03 	lds	r22, 0x034E
     18c:	70 91 4f 03 	lds	r23, 0x034F
     190:	80 91 50 03 	lds	r24, 0x0350
     194:	90 91 51 03 	lds	r25, 0x0351
     198:	f3 d2       	rcall	.+1510   	; 0x780 <write_num_to_oled>
     19a:	20 91 4e 03 	lds	r18, 0x034E
        else break;
    }
    

    draw_edge(1);
    for(k=0;k<6;k++)
     19e:	30 91 4f 03 	lds	r19, 0x034F
        draw_char(8,16,30+(k*10),2,font_money[k]);
    
    write_num_to_oled(current_money);
     1a2:	40 91 50 03 	lds	r20, 0x0350
     1a6:	50 91 51 03 	lds	r21, 0x0351
     1aa:	a0 e7       	ldi	r26, 0x70	; 112
     1ac:	b0 e0       	ldi	r27, 0x00	; 0
     1ae:	0e 94 8d 09 	call	0x131a	; 0x131a <__muluhisi3>
     1b2:	20 91 47 03 	lds	r18, 0x0347
    
    
    
    percent = (current_money*112)/goal_money;
     1b6:	30 91 48 03 	lds	r19, 0x0348
     1ba:	40 91 49 03 	lds	r20, 0x0349
     1be:	50 91 4a 03 	lds	r21, 0x034A
     1c2:	0e 94 a3 09 	call	0x1346	; 0x1346 <__udivmodsi4>
     1c6:	82 2f       	mov	r24, r18
     1c8:	b1 d3       	rcall	.+1890   	; 0x92c <draw_percentage>
     1ca:	c1 2c       	mov	r12, r1
     1cc:	94 e0       	ldi	r25, 0x04	; 4
     1ce:	d9 2e       	mov	r13, r25
     1d0:	80 91 41 03 	lds	r24, 0x0341
     1d4:	80 ff       	sbrs	r24, 0
     1d6:	06 c0       	rjmp	.+12     	; 0x1e4 <main+0x12e>
     1d8:	57 d7       	rcall	.+3758   	; 0x1088 <proccess_coin>
     1da:	d0 92 4c 03 	sts	0x034C, r13
     1de:	c0 92 4b 03 	sts	0x034B, r12
     1e2:	f6 cf       	rjmp	.-20     	; 0x1d0 <main+0x11a>
    draw_percentage(percent);
     1e4:	81 ff       	sbrs	r24, 1
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <main+0x136>
    while(1)
    {
        if(s_flag&INPUT_COIN)
        {
            proccess_coin();
            adc_max=1024;
     1e8:	a8 d5       	rcall	.+2896   	; 0xd3a <proccess_instruction>
     1ea:	f2 cf       	rjmp	.-28     	; 0x1d0 <main+0x11a>
     1ec:	18 99       	sbic	0x03, 0	; 3
    percent = (current_money*112)/goal_money;
    draw_percentage(percent);
    
    while(1)
    {
        if(s_flag&INPUT_COIN)
     1ee:	36 c0       	rjmp	.+108    	; 0x25c <main+0x1a6>
     1f0:	22 e4       	ldi	r18, 0x42	; 66
     1f2:	2a 95       	dec	r18
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <main+0x13c>
        {
            proccess_coin();
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x142>
     1f8:	20 91 78 00 	lds	r18, 0x0078
            adc_max=1024;
     1fc:	30 91 79 00 	lds	r19, 0x0079
     200:	80 91 4b 03 	lds	r24, 0x034B
        }
        
        // 명령어가 전송되었을경우
        else if(s_flag&GET_INSTRUCTION)
     204:	90 91 4c 03 	lds	r25, 0x034C
            proccess_instruction();
     208:	28 17       	cp	r18, r24
     20a:	39 07       	cpc	r19, r25
     20c:	48 f4       	brcc	.+18     	; 0x220 <main+0x16a>
     20e:	80 91 78 00 	lds	r24, 0x0078
     212:	90 91 79 00 	lds	r25, 0x0079
     216:	90 93 4c 03 	sts	0x034C, r25
        else if(!(PINB & 0x01))
        {
            while(1)
            {
                _delay_us(10);
                if(ADC < adc_max)
     21a:	80 93 4b 03 	sts	0x034B, r24
     21e:	04 c0       	rjmp	.+8      	; 0x228 <main+0x172>
     220:	86 e0       	ldi	r24, 0x06	; 6
     222:	8a 95       	dec	r24
     224:	f1 f7       	brne	.-4      	; 0x222 <main+0x16c>
     226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x172>
     228:	92 e4       	ldi	r25, 0x42	; 66
     22a:	9a 95       	dec	r25
     22c:	f1 f7       	brne	.-4      	; 0x22a <main+0x174>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x17a>
     230:	18 9b       	sbis	0x03, 0	; 3
     232:	0f c0       	rjmp	.+30     	; 0x252 <main+0x19c>
     234:	22 e4       	ldi	r18, 0x42	; 66
     236:	2a 95       	dec	r18
     238:	f1 f7       	brne	.-4      	; 0x236 <main+0x180>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x186>
     23c:	80 91 4b 03 	lds	r24, 0x034B
     240:	90 91 4c 03 	lds	r25, 0x034C
     244:	88 3e       	cpi	r24, 0xE8	; 232
     246:	93 40       	sbci	r25, 0x03	; 3
     248:	98 f6       	brcc	.-90     	; 0x1f0 <main+0x13a>
     24a:	61 e0       	ldi	r22, 0x01	; 1
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	a0 d0       	rcall	.+320    	; 0x390 <change_bit_val>
     250:	bf cf       	rjmp	.-130    	; 0x1d0 <main+0x11a>
     252:	86 e0       	ldi	r24, 0x06	; 6
     254:	8a 95       	dec	r24
     256:	f1 f7       	brne	.-4      	; 0x254 <main+0x19e>
     258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x1a4>
     25a:	ca cf       	rjmp	.-108    	; 0x1f0 <main+0x13a>
     25c:	84 ff       	sbrs	r24, 4
                _delay_us(10);
                // 동전인식이 종료 & 처리
                if((PINB & 0x01))
                {
                    _delay_us(10);
                    if(adc_max<1000)
     25e:	b8 cf       	rjmp	.-144    	; 0x1d0 <main+0x11a>
     260:	00 99       	sbic	0x00, 0	; 0
     262:	b6 cf       	rjmp	.-148    	; 0x1d0 <main+0x11a>
     264:	00 e0       	ldi	r16, 0x00	; 0
     266:	22 e0       	ldi	r18, 0x02	; 2
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	45 e0       	ldi	r20, 0x05	; 5
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	6c e2       	ldi	r22, 0x2C	; 44
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	87 e7       	ldi	r24, 0x77	; 119
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	46 d2       	rcall	.+1164   	; 0x704 <draw_data>
     278:	80 e2       	ldi	r24, 0x20	; 32
     27a:	e8 2e       	mov	r14, r24
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	f8 2e       	mov	r15, r24
                    _delay_us(1);
            }
        }
        
        // 게임보드와 연결되었던 상태일경우
        else if(s_flag&ISGAME)
     280:	c0 e0       	ldi	r28, 0x00	; 0
     282:	d0 e0       	ldi	r29, 0x00	; 0
        {
            if(!(PINA&0x01))
     284:	ae 01       	movw	r20, r28
     286:	42 5e       	subi	r20, 0xE2	; 226
            {
                // 이전에 그려져있던 그림 클리어
                draw_data(119,44,5,2,0x00);
     288:	5f 4f       	sbci	r21, 0xFF	; 255
     28a:	87 01       	movw	r16, r14
     28c:	22 e0       	ldi	r18, 0x02	; 2
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	60 e1       	ldi	r22, 0x10	; 16
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	88 e0       	ldi	r24, 0x08	; 8
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	ac d1       	rcall	.+856    	; 0x5f2 <draw_char>
     29a:	2a 96       	adiw	r28, 0x0a	; 10
     29c:	90 e1       	ldi	r25, 0x10	; 16
     29e:	e9 0e       	add	r14, r25
     2a0:	f1 1c       	adc	r15, r1
     2a2:	cc 33       	cpi	r28, 0x3C	; 60
     2a4:	d1 05       	cpc	r29, r1
     2a6:	71 f7       	brne	.-36     	; 0x284 <main+0x1ce>
     2a8:	60 91 4e 03 	lds	r22, 0x034E
     2ac:	70 91 4f 03 	lds	r23, 0x034F
                
                for(k=0;k<6;k++)
                    draw_char(8,16,30+(k*10),2,font_money[k]);
     2b0:	80 91 50 03 	lds	r24, 0x0350
     2b4:	90 91 51 03 	lds	r25, 0x0351
     2b8:	63 d2       	rcall	.+1222   	; 0x780 <write_num_to_oled>
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	80 e1       	ldi	r24, 0x10	; 16
     2be:	68 d0       	rcall	.+208    	; 0x390 <change_bit_val>
     2c0:	43 e3       	ldi	r20, 0x33	; 51
     2c2:	53 e0       	ldi	r21, 0x03	; 3
     2c4:	61 e0       	ldi	r22, 0x01	; 1
     2c6:	83 e1       	ldi	r24, 0x13	; 19
     2c8:	84 d4       	rcall	.+2312   	; 0xbd2 <make_packet>
            if(!(PINA&0x01))
            {
                // 이전에 그려져있던 그림 클리어
                draw_data(119,44,5,2,0x00);
                
                for(k=0;k<6;k++)
     2ca:	82 cf       	rjmp	.-252    	; 0x1d0 <main+0x11a>

000002cc <get_eeprom_data>:
#include "eeprom.h"
#include "flowControl.h"
#include "coinCheck.h"

void get_eeprom_data()
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__eerd_byte_m324p>
     000 0000 ~ 000 0000	 (s_flag)데이터
     */
    
    // s_flag 데이터를 eeprom으로 부터 가져온다
    // 인증여부 & 쌓여있는 데이터유무를 알기위해서
    s_flag = eeprom_read(S_FLAG_ADDRESS);
     2d8:	80 93 41 03 	sts	0x0341, r24
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     2dc:	87 e0       	ldi	r24, 0x07	; 7
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__eerd_byte_m324p>
    // 인증여부 & 쌓여있는 데이터유무를 알기위해서
    s_flag = eeprom_read(S_FLAG_ADDRESS);
    //eeprom_write(S_FLAG_ADDRESS,0x00);
    
    // 블루투스 미연결때 저장되어있던 동전갯수를 eeprom으로 부터 얻는다
    saved_coin_cnt  = eeprom_read(UNCONNECT_COIN_CNT_ADD);
     2e4:	80 93 5c 03 	sts	0x035C, r24
    last_coin_add   = UNCONNECT_COIN_DATA_ADD + (saved_coin_cnt * 6);
     2e8:	98 2f       	mov	r25, r24
     2ea:	99 0f       	add	r25, r25
     2ec:	89 0f       	add	r24, r25
     2ee:	88 0f       	add	r24, r24
     2f0:	88 5f       	subi	r24, 0xF8	; 248
     2f2:	80 93 5d 03 	sts	0x035D, r24
     2f6:	c3 e0       	ldi	r28, 0x03	; 3
     2f8:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     2fa:	ce 01       	movw	r24, r28
     2fc:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__eerd_byte_m324p>
    
    // eeprom에 저장되어있는 목표금액을 가져온다
    for( i=0;i<3;i++ )
    {
        tmp = eeprom_read(GOALMONEY_ADDRESS-i)&0xff;
        goal_money = goal_money|tmp;
     300:	40 91 47 03 	lds	r20, 0x0347
     304:	50 91 48 03 	lds	r21, 0x0348
     308:	60 91 49 03 	lds	r22, 0x0349
     30c:	70 91 4a 03 	lds	r23, 0x034A
     310:	48 2b       	or	r20, r24
     312:	40 93 47 03 	sts	0x0347, r20
     316:	50 93 48 03 	sts	0x0348, r21
     31a:	60 93 49 03 	sts	0x0349, r22
     31e:	70 93 4a 03 	sts	0x034A, r23
     322:	8f e0       	ldi	r24, 0x0F	; 15
     324:	97 e2       	ldi	r25, 0x27	; 39
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <get_eeprom_data+0x5a>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <get_eeprom_data+0x60>
     32c:	00 00       	nop
        _delay_ms(2);
        if( i < 2 )
     32e:	c1 30       	cpi	r28, 0x01	; 1
     330:	a1 f0       	breq	.+40     	; 0x35a <get_eeprom_data+0x8e>
            goal_money = goal_money<<8;
     332:	80 91 47 03 	lds	r24, 0x0347
     336:	90 91 48 03 	lds	r25, 0x0348
     33a:	a0 91 49 03 	lds	r26, 0x0349
     33e:	b0 91 4a 03 	lds	r27, 0x034A
     342:	ba 2f       	mov	r27, r26
     344:	a9 2f       	mov	r26, r25
     346:	98 2f       	mov	r25, r24
     348:	88 27       	eor	r24, r24
     34a:	80 93 47 03 	sts	0x0347, r24
     34e:	90 93 48 03 	sts	0x0348, r25
     352:	a0 93 49 03 	sts	0x0349, r26
     356:	b0 93 4a 03 	sts	0x034A, r27
     35a:	21 97       	sbiw	r28, 0x01	; 1
    // 블루투스 미연결때 저장되어있던 동전갯수를 eeprom으로 부터 얻는다
    saved_coin_cnt  = eeprom_read(UNCONNECT_COIN_CNT_ADD);
    last_coin_add   = UNCONNECT_COIN_DATA_ADD + (saved_coin_cnt * 6);
    
    // eeprom에 저장되어있는 목표금액을 가져온다
    for( i=0;i<3;i++ )
     35c:	71 f6       	brne	.-100    	; 0x2fa <get_eeprom_data+0x2e>
}

void eeprom_write(int ad,unsigned char val)
{
    //EEPROM 원하는 주소에 데이터 저장
    eeprom_write_byte(ad,val);
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	ce 01       	movw	r24, r28
     362:	0e 94 13 0a 	call	0x1426	; 0x1426 <__eewr_byte_m324p>
     366:	87 e8       	ldi	r24, 0x87	; 135
     368:	93 e1       	ldi	r25, 0x13	; 19
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <get_eeprom_data+0x9e>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <get_eeprom_data+0xa4>
     370:	00 00       	nop
     372:	21 96       	adiw	r28, 0x01	; 1
    //eeprom에서 획득한 s_flag의 데이터가 0xff라는 의미는
    //default 값이라는 의미이기 때문에 초기화 해준다.
    //if(s_flag == DEFAULT_DATA)
    {
        char i;
        for( i=0;i<10;i++ )
     374:	ca 30       	cpi	r28, 0x0A	; 10
     376:	d1 05       	cpc	r29, r1
     378:	91 f7       	brne	.-28     	; 0x35e <get_eeprom_data+0x92>
        {
            eeprom_write(i,INIT_DATA);
            _delay_ms(1);
        }
        s_flag = INIT_DATA;
     37a:	10 92 41 03 	sts	0x0341, r1
            
            i++;
            current_money = current_money<<8;
        }
    }
}
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <eeprom_write>:

void eeprom_write(int ad,unsigned char val)
{
    //EEPROM 원하는 주소에 데이터 저장
    eeprom_write_byte(ad,val);
     384:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__eewr_byte_m324p>
     388:	08 95       	ret

0000038a <eeprom_read>:
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     38a:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__eerd_byte_m324p>
    return val;
}
     38e:	08 95       	ret

00000390 <change_bit_val>:
#include "flowControl.h"

void change_bit_val(unsigned char position, unsigned char value)
{
     390:	90 91 41 03 	lds	r25, 0x0341
    //값을 1로 set 하는 경우
    if(value)
     394:	66 23       	and	r22, r22
     396:	11 f0       	breq	.+4      	; 0x39c <change_bit_val+0xc>
        s_flag|=position;
     398:	89 2b       	or	r24, r25
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <change_bit_val+0x10>
    //값을 0으로 clear하는 경우
    else
        s_flag&=~(position);
     39c:	80 95       	com	r24
     39e:	89 23       	and	r24, r25
     3a0:	80 93 41 03 	sts	0x0341, r24
     3a4:	08 95       	ret

000003a6 <init_i2c>:
#include "i2c.h"

void init_i2c()
{
    TWCR |= 1<<TWEN; // TWI 사용 ON
     3a6:	ec eb       	ldi	r30, 0xBC	; 188
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	84 60       	ori	r24, 0x04	; 4
     3ae:	80 83       	st	Z, r24
    TWSR  = 0x00;    // TWI 분주비 1로 set
     3b0:	10 92 b9 00 	sts	0x00B9, r1
    TWBR |= 0x12;    // 전송 속도 144
     3b4:	e8 eb       	ldi	r30, 0xB8	; 184
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	82 61       	ori	r24, 0x12	; 18
     3bc:	80 83       	st	Z, r24
     3be:	08 95       	ret

000003c0 <i2c_write>:
     * dev_add : 슬레이브 디바이스 어드레스
     * reg_add : 디바이스 레지스트 어드레스
     * data    : 슬레이브 레지스트에 셋할 데이터
     */
    
    TWCR |= 1<<TWINT | 1<< TWSTA | 1<<TWEN;  // start 비트
     3c0:	90 91 bc 00 	lds	r25, 0x00BC
     3c4:	94 6a       	ori	r25, 0xA4	; 164
     3c6:	90 93 bc 00 	sts	0x00BC, r25
    while (!(TWCR&0x80));           // START 처리가 완료됨을 대기
     3ca:	90 91 bc 00 	lds	r25, 0x00BC
     3ce:	97 ff       	sbrs	r25, 7
     3d0:	fc cf       	rjmp	.-8      	; 0x3ca <i2c_write+0xa>
    
    TWDR = dev_add<<1;              // 슬레이브 디바이스 어드레스설정 : 최하단 비트 0 : write
     3d2:	88 0f       	add	r24, r24
     3d4:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = 1<<TWINT| 1<<TWEN;
     3d8:	84 e8       	ldi	r24, 0x84	; 132
     3da:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR&0x80));
     3de:	80 91 bc 00 	lds	r24, 0x00BC
     3e2:	87 ff       	sbrs	r24, 7
     3e4:	fc cf       	rjmp	.-8      	; 0x3de <i2c_write+0x1e>
    
    TWDR = reg_add;                 // 쓰고자할 레지스터 주소 설정
     3e6:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = 1<<TWINT| 1<<TWEN;
     3ea:	84 e8       	ldi	r24, 0x84	; 132
     3ec:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR&0x80));
     3f0:	80 91 bc 00 	lds	r24, 0x00BC
     3f4:	87 ff       	sbrs	r24, 7
     3f6:	fc cf       	rjmp	.-8      	; 0x3f0 <i2c_write+0x30>
    
    TWDR = data;   // 전송 할  데이터
     3f8:	40 93 bb 00 	sts	0x00BB, r20
    TWCR = 1<<TWINT| 1<<TWEN;
     3fc:	84 e8       	ldi	r24, 0x84	; 132
     3fe:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR&0x80));
     402:	80 91 bc 00 	lds	r24, 0x00BC
     406:	87 ff       	sbrs	r24, 7
     408:	fc cf       	rjmp	.-8      	; 0x402 <i2c_write+0x42>
    
    TWCR = 1<<TWINT | 1<< TWSTO| 1<<TWEN;  //stop 비트
     40a:	84 e9       	ldi	r24, 0x94	; 148
     40c:	80 93 bc 00 	sts	0x00BC, r24
     410:	08 95       	ret

00000412 <set_rtc>:
    return get_time_vale(data);
}

void set_rtc(unsigned char min,unsigned char hour,unsigned char date,
              unsigned char month,unsigned char year)
{
     412:	a1 e0       	ldi	r26, 0x01	; 1
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	ee e0       	ldi	r30, 0x0E	; 14
     418:	f2 e0       	ldi	r31, 0x02	; 2
     41a:	c4 c7       	rjmp	.+3976   	; 0x13a4 <__prologue_saves__+0x1a>
     41c:	16 2f       	mov	r17, r22
     41e:	f4 2e       	mov	r15, r20
     420:	48 2f       	mov	r20, r24
    i2c_write( DS1307_ADD ,MINUTE,  min );  // 분
     422:	61 e0       	ldi	r22, 0x01	; 1
     424:	88 e6       	ldi	r24, 0x68	; 104
     426:	29 83       	std	Y+1, r18	; 0x01
     428:	cb df       	rcall	.-106    	; 0x3c0 <i2c_write>
     42a:	41 2f       	mov	r20, r17
     42c:	62 e0       	ldi	r22, 0x02	; 2
    i2c_write( DS1307_ADD ,HOUR,    hour );  // 시간
     42e:	88 e6       	ldi	r24, 0x68	; 104
     430:	c7 df       	rcall	.-114    	; 0x3c0 <i2c_write>
     432:	4f 2d       	mov	r20, r15
     434:	64 e0       	ldi	r22, 0x04	; 4
     436:	88 e6       	ldi	r24, 0x68	; 104
    i2c_write( DS1307_ADD ,DATE,    date );  // 일
     438:	c3 df       	rcall	.-122    	; 0x3c0 <i2c_write>
     43a:	29 81       	ldd	r18, Y+1	; 0x01
     43c:	42 2f       	mov	r20, r18
     43e:	65 e0       	ldi	r22, 0x05	; 5
     440:	88 e6       	ldi	r24, 0x68	; 104
    i2c_write( DS1307_ADD ,MONTH,   month);   // 월
     442:	be df       	rcall	.-132    	; 0x3c0 <i2c_write>
     444:	40 2f       	mov	r20, r16
     446:	66 e0       	ldi	r22, 0x06	; 6
     448:	88 e6       	ldi	r24, 0x68	; 104
     44a:	ba df       	rcall	.-140    	; 0x3c0 <i2c_write>
     44c:	21 96       	adiw	r28, 0x01	; 1
    i2c_write( DS1307_ADD ,YEAR,    year );  // 년
     44e:	e5 e0       	ldi	r30, 0x05	; 5
     450:	c5 c7       	rjmp	.+3978   	; 0x13dc <__epilogue_restores__+0x1a>

00000452 <get_time_vale>:
    unsigned char real_data;
    char upper_num;
    char lower_num;
    
    lower_num = data & 0x0f;   // 하단부 데이터
    upper_num = (data>>4 &0x0f)*10; // 상단부 데이터
     452:	98 2f       	mov	r25, r24
     454:	92 95       	swap	r25
     456:	9f 70       	andi	r25, 0x0F	; 15
    
    unsigned char real_data;
    char upper_num;
    char lower_num;
    
    lower_num = data & 0x0f;   // 하단부 데이터
     458:	8f 70       	andi	r24, 0x0F	; 15
    upper_num = (data>>4 &0x0f)*10; // 상단부 데이터
    real_data = upper_num + lower_num;
    
    return real_data;
     45a:	2a e0       	ldi	r18, 0x0A	; 10
     45c:	92 9f       	mul	r25, r18
     45e:	80 0d       	add	r24, r0
     460:	11 24       	eor	r1, r1
     462:	08 95       	ret

00000464 <i2c_read>:
     * reg_add : 디바이스 레지스트 어드레스
    */
    
    char data=0;
    
    TWCR |= 1<<TWINT | 1<< TWSTA | 1<<TWEN;   // start 비트
     464:	90 91 bc 00 	lds	r25, 0x00BC
     468:	94 6a       	ori	r25, 0xA4	; 164
     46a:	90 93 bc 00 	sts	0x00BC, r25
    while(!(TWCR&0x80));            // TWINT 가 1값으로 클리어 될때까지 기다림
     46e:	90 91 bc 00 	lds	r25, 0x00BC
     472:	97 ff       	sbrs	r25, 7
     474:	fc cf       	rjmp	.-8      	; 0x46e <i2c_read+0xa>
    
    TWDR = dev_add<<1;              // 슬레이브 디바이스 어드레스설정 : 최하단 비트 0 : write
     476:	98 2f       	mov	r25, r24
     478:	99 0f       	add	r25, r25
     47a:	90 93 bb 00 	sts	0x00BB, r25
    TWCR = 1<<TWINT| 1<<TWEN;
     47e:	94 e8       	ldi	r25, 0x84	; 132
     480:	90 93 bc 00 	sts	0x00BC, r25
    while(!(TWCR&0x80));
     484:	90 91 bc 00 	lds	r25, 0x00BC
     488:	97 ff       	sbrs	r25, 7
     48a:	fc cf       	rjmp	.-8      	; 0x484 <i2c_read+0x20>
    
    TWDR = reg_add;                 // 읽고자 할 레지스터 주소를 셋
     48c:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = 1<<TWINT| 1<<TWEN;
     490:	94 e8       	ldi	r25, 0x84	; 132
     492:	90 93 bc 00 	sts	0x00BC, r25
    while(!(TWCR&0x80));
     496:	90 91 bc 00 	lds	r25, 0x00BC
     49a:	97 ff       	sbrs	r25, 7
     49c:	fc cf       	rjmp	.-8      	; 0x496 <i2c_read+0x32>
    
    TWCR |= 1<<TWINT | 1<< TWSTA| 1<<TWEN;
     49e:	90 91 bc 00 	lds	r25, 0x00BC
     4a2:	94 6a       	ori	r25, 0xA4	; 164
     4a4:	90 93 bc 00 	sts	0x00BC, r25
    while(!(TWCR&0x80));
     4a8:	90 91 bc 00 	lds	r25, 0x00BC
     4ac:	97 ff       	sbrs	r25, 7
     4ae:	fc cf       	rjmp	.-8      	; 0x4a8 <i2c_read+0x44>
    
    TWDR = dev_add<<1 | 0x01;       // 데이터를 읽겠다는 주소 셋
     4b0:	88 0f       	add	r24, r24
     4b2:	81 60       	ori	r24, 0x01	; 1
     4b4:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = 1<<TWINT| 1<<TWEN;
     4b8:	84 e8       	ldi	r24, 0x84	; 132
     4ba:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR&0x80));
     4be:	80 91 bc 00 	lds	r24, 0x00BC
     4c2:	87 ff       	sbrs	r24, 7
     4c4:	fc cf       	rjmp	.-8      	; 0x4be <i2c_read+0x5a>
    
    TWCR = 1<<TWINT| 1<<TWEN;
     4c6:	84 e8       	ldi	r24, 0x84	; 132
     4c8:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR&0x80));
     4cc:	80 91 bc 00 	lds	r24, 0x00BC
     4d0:	87 ff       	sbrs	r24, 7
     4d2:	fc cf       	rjmp	.-8      	; 0x4cc <i2c_read+0x68>
    
    data=TWDR;
     4d4:	80 91 bb 00 	lds	r24, 0x00BB
    TWCR = 1<<TWINT | 1<< TWSTO| 1<<TWEN;  //stop 비트
     4d8:	94 e9       	ldi	r25, 0x94	; 148
     4da:	90 93 bc 00 	sts	0x00BC, r25
    
    return get_time_vale(data);
     4de:	b9 cf       	rjmp	.-142    	; 0x452 <get_time_vale>

000004e0 <__vector_16>:
#include "motor.h"

ISR(TIMER0_COMPA_vect)
{
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
    PORTD |= 0x40;
     4ea:	5e 9a       	sbi	0x0b, 6	; 11
}
     4ec:	0f 90       	pop	r0
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	0f 90       	pop	r0
     4f2:	1f 90       	pop	r1
     4f4:	18 95       	reti

000004f6 <init_motor>:
    }
}

void init_motor()
{
    TCCR0A = (1<<WGM01)|(1<<WGM00);
     4f6:	83 e0       	ldi	r24, 0x03	; 3
     4f8:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1<<CS02)|(1<<CS00);
     4fa:	95 e0       	ldi	r25, 0x05	; 5
     4fc:	95 bd       	out	0x25, r25	; 37
    TIMSK0 = (1<<OCIE0A)|(1<<TOIE0);
     4fe:	80 93 6e 00 	sts	0x006E, r24
    
    // 잠금 해제
    OCR0A  = 226;
     502:	82 ee       	ldi	r24, 0xE2	; 226
     504:	87 bd       	out	0x27, r24	; 39
     506:	08 95       	ret

00000508 <lock_or_unlock>:
}

void lock_or_unlock( unsigned char lock )
{
    // 잠금 명령일경우
    if(lock == 'l')
     508:	8c 36       	cpi	r24, 0x6C	; 108
     50a:	11 f4       	brne	.+4      	; 0x510 <lock_or_unlock+0x8>
        OCR0A = 244;
     50c:	84 ef       	ldi	r24, 0xF4	; 244
     50e:	01 c0       	rjmp	.+2      	; 0x512 <lock_or_unlock+0xa>
    // 잠금 해제 명령일경우
    else
        OCR0A = 226;
     510:	82 ee       	ldi	r24, 0xE2	; 226
     512:	87 bd       	out	0x27, r24	; 39
     514:	08 95       	ret

00000516 <shutdown_motor_voltage>:
}

void shutdown_motor_voltage()
{
    // pwm 발생 인터럽트 해제
    TIMSK0 = (0<<OCIE0A)|(0<<TOIE0);
     516:	10 92 6e 00 	sts	0x006E, r1
    PORTD&=~0xC0;
     51a:	8b b1       	in	r24, 0x0b	; 11
     51c:	8f 73       	andi	r24, 0x3F	; 63
     51e:	8b b9       	out	0x0b, r24	; 11
     520:	08 95       	ret

00000522 <__vector_18>:
{
    PORTD |= 0x40;
}

ISR(TIMER0_OVF_vect)
{
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	2f 93       	push	r18
     52e:	3f 93       	push	r19
     530:	4f 93       	push	r20
     532:	5f 93       	push	r21
     534:	6f 93       	push	r22
     536:	7f 93       	push	r23
     538:	8f 93       	push	r24
     53a:	9f 93       	push	r25
     53c:	af 93       	push	r26
     53e:	bf 93       	push	r27
     540:	ef 93       	push	r30
     542:	ff 93       	push	r31
    static char cnt;
    cnt++;
     544:	80 91 3c 03 	lds	r24, 0x033C
     548:	8f 5f       	subi	r24, 0xFF	; 255
     54a:	80 93 3c 03 	sts	0x033C, r24
    PORTD &= ~0xC0;
     54e:	8b b1       	in	r24, 0x0b	; 11
     550:	8f 73       	andi	r24, 0x3F	; 63
     552:	8b b9       	out	0x0b, r24	; 11
    TCNT0 = 0x00;
     554:	16 bc       	out	0x26, r1	; 38
    
    // 최소 모터 동작 주기후 모터 전원해제
    if(cnt==50)
     556:	80 91 3c 03 	lds	r24, 0x033C
     55a:	82 33       	cpi	r24, 0x32	; 50
     55c:	19 f4       	brne	.+6      	; 0x564 <__vector_18+0x42>
    {
        shutdown_motor_voltage();
     55e:	db df       	rcall	.-74     	; 0x516 <shutdown_motor_voltage>
     560:	10 92 3c 03 	sts	0x033C, r1
        cnt = 0;
     564:	ff 91       	pop	r31
    }
}
     566:	ef 91       	pop	r30
     568:	bf 91       	pop	r27
     56a:	af 91       	pop	r26
     56c:	9f 91       	pop	r25
     56e:	8f 91       	pop	r24
     570:	7f 91       	pop	r23
     572:	6f 91       	pop	r22
     574:	5f 91       	pop	r21
     576:	4f 91       	pop	r20
     578:	3f 91       	pop	r19
     57a:	2f 91       	pop	r18
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <turnon_motor_voltage>:
}

void turnon_motor_voltage()
{
    // pwm 발생 인터럽트 설정
    TIMSK0 = (1<<OCIE0A)|(1<<TOIE0);
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	80 93 6e 00 	sts	0x006E, r24
    PORTD|=0x40;
     58c:	5e 9a       	sbi	0x0b, 6	; 11
     58e:	08 95       	ret

00000590 <init_SPI_master>:
    {0x07,0x07,0x07,0x07,0x07,0xFF,0xFF,0xFF,0xE0,0xE0,0xE0,0xE0,0xE0,0xFF,0xFF,0xFF}  /*"]"*/
};

void init_SPI_master(void)
{
    SPI_DDR |= ((1 << SS) | (1 << SCK) | (1 << MOSI) | (1<<DC)|(1<<RST));
     590:	84 b1       	in	r24, 0x04	; 4
     592:	8c 6b       	ori	r24, 0xBC	; 188
     594:	84 b9       	out	0x04, r24	; 4
    SPI_PORT|= (1 << SS)|(1<<RST);
     596:	85 b1       	in	r24, 0x05	; 5
     598:	84 61       	ori	r24, 0x14	; 20
     59a:	85 b9       	out	0x05, r24	; 5
    SPCR     = ((1 << SPE)|(1 << MSTR)|(1 << SPR0)|(0<<SPR1)); // 16M/16=1Mhz
     59c:	81 e5       	ldi	r24, 0x51	; 81
     59e:	8c bd       	out	0x2c, r24	; 44
     5a0:	08 95       	ret

000005a2 <write_oled>:

}

void write_oled(unsigned char data)
{
    SPI_PORT &=~(1<<SS);
     5a2:	2c 98       	cbi	0x05, 4	; 5
    SPI_PORT &=~(1<<DC);
     5a4:	2b 98       	cbi	0x05, 3	; 5
    SPDR = data;
     5a6:	8e bd       	out	0x2e, r24	; 46
    
    while(!(SPSR&(1<<SPIF)));
     5a8:	0d b4       	in	r0, 0x2d	; 45
     5aa:	07 fe       	sbrs	r0, 7
     5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <write_oled+0x6>
    SPI_PORT|=(1<<SS);
     5ae:	2c 9a       	sbi	0x05, 4	; 5
     5b0:	08 95       	ret

000005b2 <write_oled_data>:
}

void write_oled_data(unsigned char data)
{
    SPI_PORT &=~(1<<SS);
     5b2:	2c 98       	cbi	0x05, 4	; 5
    SPI_PORT |= (1<<DC);
     5b4:	2b 9a       	sbi	0x05, 3	; 5
    SPDR = data;
     5b6:	8e bd       	out	0x2e, r24	; 46
    
    while(!(SPSR&(1<<SPIF)));
     5b8:	0d b4       	in	r0, 0x2d	; 45
     5ba:	07 fe       	sbrs	r0, 7
     5bc:	fd cf       	rjmp	.-6      	; 0x5b8 <write_oled_data+0x6>
    SPI_PORT|=(1<<SS);
     5be:	2c 9a       	sbi	0x05, 4	; 5
    SPI_PORT &=~(1<<DC);
     5c0:	2b 98       	cbi	0x05, 3	; 5
     5c2:	08 95       	ret

000005c4 <clear_oled>:
}

void clear_oled(void)
{
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	c0 eb       	ldi	r28, 0xB0	; 176
    unsigned char i, j;
    
    for (i = 0; i < 8; i ++)
    {
        write_oled(CHANGE_PAGE+i);
     5ca:	8c 2f       	mov	r24, r28
     5cc:	ea df       	rcall	.-44     	; 0x5a2 <write_oled>
     5ce:	d0 e0       	ldi	r29, 0x00	; 0
        for (j = 0; j < 128; j ++)
     5d0:	80 e0       	ldi	r24, 0x00	; 0
        {
            write_oled_data(0x00);
     5d2:	ef df       	rcall	.-34     	; 0x5b2 <write_oled_data>
     5d4:	83 ef       	ldi	r24, 0xF3	; 243
     5d6:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <clear_oled+0x14>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <clear_oled+0x1a>
     5de:	00 00       	nop
     5e0:	df 5f       	subi	r29, 0xFF	; 255
     5e2:	d0 38       	cpi	r29, 0x80	; 128
    unsigned char i, j;
    
    for (i = 0; i < 8; i ++)
    {
        write_oled(CHANGE_PAGE+i);
        for (j = 0; j < 128; j ++)
     5e4:	a9 f7       	brne	.-22     	; 0x5d0 <clear_oled+0xc>
     5e6:	cf 5f       	subi	r28, 0xFF	; 255
     5e8:	c8 3b       	cpi	r28, 0xB8	; 184
     5ea:	79 f7       	brne	.-34     	; 0x5ca <clear_oled+0x6>

void clear_oled(void)
{
    unsigned char i, j;
    
    for (i = 0; i < 8; i ++)
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
        {
            write_oled_data(0x00);
            _delay_us(100);
        }
    }   
}
     5f0:	08 95       	ret

000005f2 <draw_char>:

void draw_char(int w, int h, int x, int y, char *data)
{
     5f2:	a0 e0       	ldi	r26, 0x00	; 0
     5f4:	b0 e0       	ldi	r27, 0x00	; 0
     5f6:	ee ef       	ldi	r30, 0xFE	; 254
     5f8:	f2 e0       	ldi	r31, 0x02	; 2
     5fa:	ca c6       	rjmp	.+3476   	; 0x1390 <__prologue_saves__+0x6>
     5fc:	5c 01       	movw	r10, r24
     5fe:	fb 01       	movw	r30, r22
	 * data : 그려질 데이터 배열
	 */
	
	unsigned char i,j;
	unsigned char idx	= 0 ;
	unsigned height		= h/8; 	    //OLED는 한 페이지당 8픽셀을 차지
     600:	77 fd       	sbrc	r23, 7
     602:	37 96       	adiw	r30, 0x07	; 7
     604:	ef 01       	movw	r28, r30
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	d5 95       	asr	r29
     60a:	c7 95       	ror	r28
     60c:	8a 95       	dec	r24
     60e:	e1 f7       	brne	.-8      	; 0x608 <draw_char+0x16>
     610:	69 01       	movw	r12, r18
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
     612:	80 eb       	ldi	r24, 0xB0	; 176
     614:	c8 0e       	add	r12, r24
     616:	d1 1c       	adc	r13, r1
     618:	7a 01       	movw	r14, r20
	unsigned startX     = x+5;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
     61a:	95 e0       	ldi	r25, 0x05	; 5
     61c:	e9 0e       	add	r14, r25
     61e:	f1 1c       	adc	r15, r1
     620:	47 01       	movw	r8, r14
	unsigned endX		= startX + w;
     622:	8a 0c       	add	r8, r10
     624:	9b 1c       	adc	r9, r11
     626:	61 2c       	mov	r6, r1
	 * y : 그려질 글자의 시작 y 좌표 (0~7)
	 * data : 그려질 데이터 배열
	 */
	
	unsigned char i,j;
	unsigned char idx	= 0 ;
     628:	71 2c       	mov	r7, r1
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
	unsigned startX     = x+5;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
	unsigned endX		= startX + w;
    

	for( i=0;i<height;i++ )
     62a:	87 2d       	mov	r24, r7
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	8c 17       	cp	r24, r28
     630:	9d 07       	cpc	r25, r29
     632:	18 f5       	brcc	.+70     	; 0x67a <draw_char+0x88>
     634:	87 2d       	mov	r24, r7
	{
		write_oled(startY+i);
     636:	8c 0d       	add	r24, r12
     638:	b4 df       	rcall	.-152    	; 0x5a2 <write_oled>
     63a:	81 e2       	ldi	r24, 0x21	; 33
     63c:	b2 df       	rcall	.-156    	; 0x5a2 <write_oled>
		write_oled(CHANGE_COLUM);
     63e:	8e 2d       	mov	r24, r14
     640:	b0 df       	rcall	.-160    	; 0x5a2 <write_oled>
     642:	88 2d       	mov	r24, r8
		write_oled(startX);
     644:	ae df       	rcall	.-164    	; 0x5a2 <write_oled>
     646:	86 2d       	mov	r24, r6
     648:	28 2f       	mov	r18, r24
		write_oled(endX);
     64a:	26 19       	sub	r18, r6
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	2a 15       	cp	r18, r10

		for( j=0;j<w;j++ )
     650:	3b 05       	cpc	r19, r11
     652:	84 f4       	brge	.+32     	; 0x674 <draw_char+0x82>
     654:	55 24       	eor	r5, r5
     656:	53 94       	inc	r5
     658:	58 0e       	add	r5, r24
     65a:	f8 01       	movw	r30, r16
     65c:	e8 0f       	add	r30, r24
		{
			write_oled_data(data[idx++]);
     65e:	f1 1d       	adc	r31, r1
     660:	80 81       	ld	r24, Z
     662:	a7 df       	rcall	.-178    	; 0x5b2 <write_oled_data>
     664:	83 ef       	ldi	r24, 0xF3	; 243
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <draw_char+0x76>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <draw_char+0x7c>
     66e:	00 00       	nop
     670:	85 2d       	mov	r24, r5
     672:	ea cf       	rjmp	.-44     	; 0x648 <draw_char+0x56>
     674:	73 94       	inc	r7
     676:	68 2e       	mov	r6, r24
     678:	d8 cf       	rjmp	.-80     	; 0x62a <draw_char+0x38>
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	ef e0       	ldi	r30, 0x0F	; 15
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
	unsigned startX     = x+5;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
	unsigned endX		= startX + w;
    

	for( i=0;i<height;i++ )
     680:	a3 c6       	rjmp	.+3398   	; 0x13c8 <__epilogue_restores__+0x6>

00000682 <clear_partial>:
		}
	}
}

void clear_partial(int w, int h, int x, int y)
{
     682:	a0 e0       	ldi	r26, 0x00	; 0
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e6 e4       	ldi	r30, 0x46	; 70
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	86 c6       	rjmp	.+3340   	; 0x1398 <__prologue_saves__+0xe>
     68c:	5c 01       	movw	r10, r24
     68e:	fb 01       	movw	r30, r22
     * x : 클리어될 글자의 시작 x 좌표 (0~128)
     * y : 클리어될 글자의 시작 y 좌표 (0~7)
     */
    
    unsigned char i,j;
    unsigned height		= h/8; 	    //OLED는 한 페이지당 8픽셀을 차지
     690:	77 fd       	sbrc	r23, 7
     692:	37 96       	adiw	r30, 0x07	; 7
     694:	ef 01       	movw	r28, r30
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	d5 95       	asr	r29
     69a:	c7 95       	ror	r28
     69c:	8a 95       	dec	r24
     69e:	e1 f7       	brne	.-8      	; 0x698 <clear_partial+0x16>
     6a0:	69 01       	movw	r12, r18
    unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
     6a2:	80 eb       	ldi	r24, 0xB0	; 176
     6a4:	c8 0e       	add	r12, r24
     6a6:	d1 1c       	adc	r13, r1
     6a8:	7a 01       	movw	r14, r20
    unsigned startX     = x+5;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
     6aa:	95 e0       	ldi	r25, 0x05	; 5
     6ac:	e9 0e       	add	r14, r25
     6ae:	f1 1c       	adc	r15, r1
     6b0:	c7 01       	movw	r24, r14
    unsigned endX		= startX + w;
     6b2:	8a 0d       	add	r24, r10
     6b4:	9b 1d       	adc	r25, r11
     6b6:	10 e0       	ldi	r17, 0x00	; 0
    
    for( i=0;i<height;i++ )
     6b8:	0f ef       	ldi	r16, 0xFF	; 255
    {
        write_oled(startY+i);
        write_oled(CHANGE_COLUM);
        write_oled(startX);
        write_oled(endX-1);
     6ba:	08 0f       	add	r16, r24
     6bc:	81 2f       	mov	r24, r17
    unsigned height		= h/8; 	    //OLED는 한 페이지당 8픽셀을 차지
    unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
    unsigned startX     = x+5;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
    unsigned endX		= startX + w;
    
    for( i=0;i<height;i++ )
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	8c 17       	cp	r24, r28
     6c2:	9d 07       	cpc	r25, r29
     6c4:	d8 f4       	brcc	.+54     	; 0x6fc <clear_partial+0x7a>
     6c6:	81 2f       	mov	r24, r17
    {
        write_oled(startY+i);
     6c8:	8c 0d       	add	r24, r12
     6ca:	6b df       	rcall	.-298    	; 0x5a2 <write_oled>
     6cc:	81 e2       	ldi	r24, 0x21	; 33
     6ce:	69 df       	rcall	.-302    	; 0x5a2 <write_oled>
        write_oled(CHANGE_COLUM);
     6d0:	8e 2d       	mov	r24, r14
     6d2:	67 df       	rcall	.-306    	; 0x5a2 <write_oled>
     6d4:	80 2f       	mov	r24, r16
        write_oled(startX);
     6d6:	65 df       	rcall	.-310    	; 0x5a2 <write_oled>
     6d8:	91 2c       	mov	r9, r1
     6da:	89 2d       	mov	r24, r9
        write_oled(endX-1);
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	8a 15       	cp	r24, r10
     6e0:	9b 05       	cpc	r25, r11
        
        for(j=0;j<w;j++)
     6e2:	54 f4       	brge	.+20     	; 0x6f8 <clear_partial+0x76>
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	65 df       	rcall	.-310    	; 0x5b2 <write_oled_data>
     6e8:	83 ef       	ldi	r24, 0xF3	; 243
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <clear_partial+0x6a>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <clear_partial+0x70>
     6f2:	00 00       	nop
     6f4:	93 94       	inc	r9
     6f6:	f1 cf       	rjmp	.-30     	; 0x6da <clear_partial+0x58>
     6f8:	1f 5f       	subi	r17, 0xFF	; 255
     6fa:	e0 cf       	rjmp	.-64     	; 0x6bc <clear_partial+0x3a>
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	eb e0       	ldi	r30, 0x0B	; 11
     702:	66 c6       	rjmp	.+3276   	; 0x13d0 <__epilogue_restores__+0xe>

00000704 <draw_data>:
        }
    }
}

void draw_data(int w, int h, int x, int y, char data)
{
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e0       	ldi	r27, 0x00	; 0
     708:	e7 e8       	ldi	r30, 0x87	; 135
     70a:	f3 e0       	ldi	r31, 0x03	; 3
     70c:	44 c6       	rjmp	.+3208   	; 0x1396 <__prologue_saves__+0xc>
     70e:	7c 01       	movw	r14, r24
     710:	6a 01       	movw	r12, r20
     712:	fb 01       	movw	r30, r22
	 * y : 그려질 글자의 시작 y 좌표 (0~7)
	 * data : 그려질 데이터
	 */
	
	unsigned char i,j;
	unsigned height		= h/8; 	    //OLED는 한 페이지당 8픽셀을 차지
     714:	77 fd       	sbrc	r23, 7
     716:	37 96       	adiw	r30, 0x07	; 7
     718:	ef 01       	movw	r28, r30
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	d5 95       	asr	r29
     71e:	c7 95       	ror	r28
     720:	8a 95       	dec	r24
     722:	e1 f7       	brne	.-8      	; 0x71c <draw_data+0x18>
     724:	59 01       	movw	r10, r18
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
     726:	80 eb       	ldi	r24, 0xB0	; 176
     728:	a8 0e       	add	r10, r24
     72a:	b1 1c       	adc	r11, r1
     72c:	91 2c       	mov	r9, r1
	unsigned startX     = x;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
	unsigned endX		= startX + w;
    
	for( i=0;i<height;i++ )
     72e:	b6 01       	movw	r22, r12
	{
		write_oled(startY+i);
		write_oled(CHANGE_COLUM);
		write_oled(startX);
		write_oled(endX-1);
     730:	6e 0d       	add	r22, r14
     732:	7f 1d       	adc	r23, r15
     734:	1f ef       	ldi	r17, 0xFF	; 255
     736:	16 0f       	add	r17, r22
     738:	29 2d       	mov	r18, r9
	unsigned height		= h/8; 	    //OLED는 한 페이지당 8픽셀을 차지
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
	unsigned startX     = x;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
	unsigned endX		= startX + w;
    
	for( i=0;i<height;i++ )
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	2c 17       	cp	r18, r28
     73e:	3d 07       	cpc	r19, r29
     740:	d8 f4       	brcc	.+54     	; 0x778 <draw_data+0x74>
     742:	89 2d       	mov	r24, r9
	{
		write_oled(startY+i);
     744:	8a 0d       	add	r24, r10
     746:	2d df       	rcall	.-422    	; 0x5a2 <write_oled>
     748:	81 e2       	ldi	r24, 0x21	; 33
     74a:	2b df       	rcall	.-426    	; 0x5a2 <write_oled>
		write_oled(CHANGE_COLUM);
     74c:	8c 2d       	mov	r24, r12
     74e:	29 df       	rcall	.-430    	; 0x5a2 <write_oled>
     750:	81 2f       	mov	r24, r17
		write_oled(startX);
     752:	27 df       	rcall	.-434    	; 0x5a2 <write_oled>
     754:	81 2c       	mov	r8, r1
     756:	88 2d       	mov	r24, r8
		write_oled(endX-1);
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	8e 15       	cp	r24, r14
     75c:	9f 05       	cpc	r25, r15
        
		for(j=0;j<w;j++)
     75e:	54 f4       	brge	.+20     	; 0x774 <draw_data+0x70>
     760:	80 2f       	mov	r24, r16
     762:	27 df       	rcall	.-434    	; 0x5b2 <write_oled_data>
     764:	83 ef       	ldi	r24, 0xF3	; 243
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <draw_data+0x64>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <draw_data+0x6a>
     76e:	00 00       	nop
     770:	83 94       	inc	r8
     772:	f1 cf       	rjmp	.-30     	; 0x756 <draw_data+0x52>
     774:	93 94       	inc	r9
     776:	e0 cf       	rjmp	.-64     	; 0x738 <draw_data+0x34>
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	ec e0       	ldi	r30, 0x0C	; 12
     77e:	27 c6       	rjmp	.+3150   	; 0x13ce <__epilogue_restores__+0xc>

00000780 <write_num_to_oled>:
		}
	}
}

void write_num_to_oled(unsigned long current_money)
{
     780:	aa e0       	ldi	r26, 0x0A	; 10
     782:	b0 e0       	ldi	r27, 0x00	; 0
     784:	e5 ec       	ldi	r30, 0xC5	; 197
     786:	f3 e0       	ldi	r31, 0x03	; 3
     788:	02 c6       	rjmp	.+3076   	; 0x138e <__prologue_saves__+0x4>
     78a:	4b 01       	movw	r8, r22
     78c:	5c 01       	movw	r10, r24
     78e:	d1 2c       	mov	r13, r1
	unsigned char curr_coin[10];
	unsigned char position 	= 0;
     790:	fa e0       	ldi	r31, 0x0A	; 10
	unsigned char startX = 0;

	cu_co = current_money;
	while(1)
	{
		curr_coin[position++] = cu_co%10;
     792:	4f 2e       	mov	r4, r31
     794:	51 2c       	mov	r5, r1
     796:	61 2c       	mov	r6, r1
     798:	71 2c       	mov	r7, r1
     79a:	ff 24       	eor	r15, r15
     79c:	f3 94       	inc	r15
     79e:	fd 0c       	add	r15, r13
     7a0:	01 e0       	ldi	r16, 0x01	; 1
     7a2:	10 e0       	ldi	r17, 0x00	; 0
     7a4:	0c 0f       	add	r16, r28
     7a6:	1d 1f       	adc	r17, r29
     7a8:	0d 0d       	add	r16, r13
     7aa:	11 1d       	adc	r17, r1
     7ac:	a3 01       	movw	r20, r6
     7ae:	92 01       	movw	r18, r4
     7b0:	ca d5       	rcall	.+2964   	; 0x1346 <__udivmodsi4>
     7b2:	f8 01       	movw	r30, r16
     7b4:	60 83       	st	Z, r22
     7b6:	b9 01       	movw	r22, r18
     7b8:	ca 01       	movw	r24, r20
     7ba:	ef e0       	ldi	r30, 0x0F	; 15
     7bc:	f7 e2       	ldi	r31, 0x27	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	f1 f7       	brne	.-4      	; 0x7be <write_num_to_oled+0x3e>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <write_num_to_oled+0x44>
     7c4:	00 00       	nop
     7c6:	61 15       	cp	r22, r1
     7c8:	71 05       	cpc	r23, r1
		cu_co = cu_co/10;

        _delay_ms(2);
		if(cu_co == 0)
     7ca:	81 05       	cpc	r24, r1
     7cc:	91 05       	cpc	r25, r1
     7ce:	11 f0       	breq	.+4      	; 0x7d4 <write_num_to_oled+0x54>
     7d0:	df 2c       	mov	r13, r15
     7d2:	e3 cf       	rjmp	.-58     	; 0x79a <write_num_to_oled+0x1a>
	unsigned char startX = 0;

	cu_co = current_money;
	while(1)
	{
		curr_coin[position++] = cu_co%10;
     7d4:	cd 2c       	mov	r12, r13
     7d6:	8f 2d       	mov	r24, r15
     7d8:	90 e0       	ldi	r25, 0x00	; 0
        _delay_ms(2);
		if(cu_co == 0)
			break;
	}

	startX = (110 - ((position+1) * 8))/2 ; // 출력할 숫자를 가운데 정렬하기위한
     7da:	7c 01       	movw	r14, r24
     7dc:	e0 94       	com	r14
     7de:	f0 94       	com	r15
     7e0:	2e 2d       	mov	r18, r14
     7e2:	22 0f       	add	r18, r18
     7e4:	22 0f       	add	r18, r18
     7e6:	47 e3       	ldi	r20, 0x37	; 55
     7e8:	42 0f       	add	r20, r18
     7ea:	e4 2e       	mov	r14, r20
     7ec:	f1 2c       	mov	r15, r1
     7ee:	81 14       	cp	r8, r1
     7f0:	91 04       	cpc	r9, r1
    
    if(current_money==0)
     7f2:	a1 04       	cpc	r10, r1
     7f4:	b1 04       	cpc	r11, r1
     7f6:	59 f4       	brne	.+22     	; 0x80e <write_num_to_oled+0x8e>
     7f8:	00 e0       	ldi	r16, 0x00	; 0
     7fa:	25 e0       	ldi	r18, 0x05	; 5
        draw_data(100,16,5,5,0x00);
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	45 e0       	ldi	r20, 0x05	; 5
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	60 e1       	ldi	r22, 0x10	; 16
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	84 e6       	ldi	r24, 0x64	; 100
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	7c df       	rcall	.-264    	; 0x704 <draw_data>
     80c:	0c c0       	rjmp	.+24     	; 0x826 <write_num_to_oled+0xa6>
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	25 e0       	ldi	r18, 0x05	; 5
     812:	30 e0       	ldi	r19, 0x00	; 0
        
    else
        clear_partial(8*(position+1),16,startX,5); // 그려진부분에 겹처서 그리는것을 방지하기위해 그리고자하는 부분에 그려져있던것을 클리어
     814:	a7 01       	movw	r20, r14
     816:	60 e1       	ldi	r22, 0x10	; 16
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	e3 e0       	ldi	r30, 0x03	; 3
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	ea 95       	dec	r30
     822:	e1 f7       	brne	.-8      	; 0x81c <write_num_to_oled+0x9c>
     824:	2e df       	rcall	.-420    	; 0x682 <clear_partial>
     826:	a1 2c       	mov	r10, r1
     828:	b1 2c       	mov	r11, r1
     82a:	dd 20       	and	r13, r13
     82c:	e1 f0       	breq	.+56     	; 0x866 <write_num_to_oled+0xe6>

	for( position = position-1 ; position > 0 ; position-- )
     82e:	e1 e0       	ldi	r30, 0x01	; 1
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	ec 0f       	add	r30, r28
     834:	fd 1f       	adc	r31, r29
   		draw_char(8,16,startX+(i++*10),5,font_num[curr_coin[position]]);
     836:	ed 0d       	add	r30, r13
     838:	f1 1d       	adc	r31, r1
     83a:	00 81       	ld	r16, Z
     83c:	f0 e1       	ldi	r31, 0x10	; 16
     83e:	0f 9f       	mul	r16, r31
     840:	80 01       	movw	r16, r0
     842:	11 24       	eor	r1, r1
     844:	00 5a       	subi	r16, 0xA0	; 160
     846:	1e 4f       	sbci	r17, 0xFE	; 254
     848:	a5 01       	movw	r20, r10
     84a:	4e 0d       	add	r20, r14
     84c:	5f 1d       	adc	r21, r15
     84e:	25 e0       	ldi	r18, 0x05	; 5
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	60 e1       	ldi	r22, 0x10	; 16
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	88 e0       	ldi	r24, 0x08	; 8
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	cb de       	rcall	.-618    	; 0x5f2 <draw_char>
     85c:	da 94       	dec	r13
     85e:	8a e0       	ldi	r24, 0x0A	; 10
     860:	a8 0e       	add	r10, r24
     862:	b1 1c       	adc	r11, r1
     864:	e2 cf       	rjmp	.-60     	; 0x82a <write_num_to_oled+0xaa>
        draw_data(100,16,5,5,0x00);
        
    else
        clear_partial(8*(position+1),16,startX,5); // 그려진부분에 겹처서 그리는것을 방지하기위해 그리고자하는 부분에 그려져있던것을 클리어

	for( position = position-1 ; position > 0 ; position-- )
     866:	dd 24       	eor	r13, r13
     868:	d3 94       	inc	r13
     86a:	dc 0c       	add	r13, r12
     86c:	09 81       	ldd	r16, Y+1	; 0x01
     86e:	e0 e1       	ldi	r30, 0x10	; 16
   		draw_char(8,16,startX+(i++*10),5,font_num[curr_coin[position]]);
	
   	draw_char(8,16,startX+(i++*10),5,font_num[curr_coin[0]]);
     870:	0e 9f       	mul	r16, r30
     872:	80 01       	movw	r16, r0
     874:	11 24       	eor	r1, r1
     876:	00 5a       	subi	r16, 0xA0	; 160
     878:	1e 4f       	sbci	r17, 0xFE	; 254
     87a:	a7 01       	movw	r20, r14
     87c:	fa e0       	ldi	r31, 0x0A	; 10
     87e:	cf 9e       	mul	r12, r31
     880:	40 0d       	add	r20, r0
     882:	51 1d       	adc	r21, r1
     884:	11 24       	eor	r1, r1
     886:	25 e0       	ldi	r18, 0x05	; 5
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	60 e1       	ldi	r22, 0x10	; 16
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	88 e0       	ldi	r24, 0x08	; 8
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	af de       	rcall	.-674    	; 0x5f2 <draw_char>
     894:	a7 01       	movw	r20, r14
     896:	8a e0       	ldi	r24, 0x0A	; 10
     898:	d8 9e       	mul	r13, r24
     89a:	40 0d       	add	r20, r0
     89c:	51 1d       	adc	r21, r1
     89e:	11 24       	eor	r1, r1
   	draw_char(8,16,startX+(i++*10),5,font_num[10]); //글자 "원"출력
     8a0:	00 e0       	ldi	r16, 0x00	; 0
     8a2:	12 e0       	ldi	r17, 0x02	; 2
     8a4:	25 e0       	ldi	r18, 0x05	; 5
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	60 e1       	ldi	r22, 0x10	; 16
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	88 e0       	ldi	r24, 0x08	; 8
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	a0 de       	rcall	.-704    	; 0x5f2 <draw_char>
     8b2:	2a 96       	adiw	r28, 0x0a	; 10
     8b4:	e0 e1       	ldi	r30, 0x10	; 16
     8b6:	87 c5       	rjmp	.+2830   	; 0x13c6 <__epilogue_restores__+0x4>

000008b8 <init_oled>:
}

void init_oled(void)
{
    init_SPI_master(); //init SPI
     8b8:	6b de       	rcall	.-810    	; 0x590 <init_SPI_master>
     8ba:	8e ea       	ldi	r24, 0xAE	; 174
    
    write_oled(0xAE); //display off
     8bc:	72 de       	rcall	.-796    	; 0x5a2 <write_oled>
     8be:	80 e2       	ldi	r24, 0x20	; 32
     8c0:	70 de       	rcall	.-800    	; 0x5a2 <write_oled>
    write_oled(0x20); //Set Memory Addressing Mode
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	6e de       	rcall	.-804    	; 0x5a2 <write_oled>
     8c6:	80 eb       	ldi	r24, 0xB0	; 176
    write_oled(0x02); //00);Horizontal Addressing Mode;01);Vertical Addressing Mode;10);Page Addressing Mode (RESET);11);Invalid
     8c8:	6c de       	rcall	.-808    	; 0x5a2 <write_oled>
     8ca:	88 ec       	ldi	r24, 0xC8	; 200
     8cc:	6a de       	rcall	.-812    	; 0x5a2 <write_oled>
    write_oled(CHANGE_PAGE); //Set Page Start Address for Page Addressing Mode);0-7
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	68 de       	rcall	.-816    	; 0x5a2 <write_oled>
     8d2:	80 e1       	ldi	r24, 0x10	; 16
    write_oled(0xc8); //Set COM Output Scan Direction
     8d4:	66 de       	rcall	.-820    	; 0x5a2 <write_oled>
     8d6:	80 e4       	ldi	r24, 0x40	; 64
     8d8:	64 de       	rcall	.-824    	; 0x5a2 <write_oled>
    write_oled(0x00); //---set low column address
     8da:	81 e8       	ldi	r24, 0x81	; 129
     8dc:	62 de       	rcall	.-828    	; 0x5a2 <write_oled>
     8de:	8f e7       	ldi	r24, 0x7F	; 127
    write_oled(0x10); //---set high column address
     8e0:	60 de       	rcall	.-832    	; 0x5a2 <write_oled>
     8e2:	81 ea       	ldi	r24, 0xA1	; 161
     8e4:	5e de       	rcall	.-836    	; 0x5a2 <write_oled>
    write_oled(0x40); //--set start line address
     8e6:	88 ea       	ldi	r24, 0xA8	; 168
     8e8:	5c de       	rcall	.-840    	; 0x5a2 <write_oled>
     8ea:	8f e3       	ldi	r24, 0x3F	; 63
    write_oled(0x81); //--set contrast control register
     8ec:	5a de       	rcall	.-844    	; 0x5a2 <write_oled>
     8ee:	84 ea       	ldi	r24, 0xA4	; 164
     8f0:	58 de       	rcall	.-848    	; 0x5a2 <write_oled>
    write_oled(0x7f);
     8f2:	83 ed       	ldi	r24, 0xD3	; 211
     8f4:	56 de       	rcall	.-852    	; 0x5a2 <write_oled>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
    write_oled(0xa1); //--set segment re-map 0 to 127
     8f8:	54 de       	rcall	.-856    	; 0x5a2 <write_oled>
     8fa:	85 ed       	ldi	r24, 0xD5	; 213
     8fc:	52 de       	rcall	.-860    	; 0x5a2 <write_oled>
    write_oled(0xa8); //--set multiplex ratio(1 to 64)
     8fe:	80 ef       	ldi	r24, 0xF0	; 240
     900:	50 de       	rcall	.-864    	; 0x5a2 <write_oled>
     902:	89 ed       	ldi	r24, 0xD9	; 217
    write_oled(0x3F);
     904:	4e de       	rcall	.-868    	; 0x5a2 <write_oled>
     906:	82 e2       	ldi	r24, 0x22	; 34
     908:	4c de       	rcall	.-872    	; 0x5a2 <write_oled>
    write_oled(0xa4); //0xa4);Output follows RAM content;0xa5);Output ignores RAM content
     90a:	8a ed       	ldi	r24, 0xDA	; 218
     90c:	4a de       	rcall	.-876    	; 0x5a2 <write_oled>
     90e:	82 e1       	ldi	r24, 0x12	; 18
    write_oled(0xd3); //-set display offset
     910:	48 de       	rcall	.-880    	; 0x5a2 <write_oled>
     912:	8b ed       	ldi	r24, 0xDB	; 219
     914:	46 de       	rcall	.-884    	; 0x5a2 <write_oled>
    write_oled(0x00); //-not offset
     916:	80 e2       	ldi	r24, 0x20	; 32
     918:	44 de       	rcall	.-888    	; 0x5a2 <write_oled>
     91a:	8d e8       	ldi	r24, 0x8D	; 141
    write_oled(0xd5); //--set display clock divide ratio/oscillator frequency
     91c:	42 de       	rcall	.-892    	; 0x5a2 <write_oled>
     91e:	84 e1       	ldi	r24, 0x14	; 20
     920:	40 de       	rcall	.-896    	; 0x5a2 <write_oled>
    write_oled(0xf0); //--set divide ratio
     922:	86 ea       	ldi	r24, 0xA6	; 166
     924:	3e de       	rcall	.-900    	; 0x5a2 <write_oled>
     926:	8f ea       	ldi	r24, 0xAF	; 175
    write_oled(0xd9); //--set pre-charge period
     928:	3c de       	rcall	.-904    	; 0x5a2 <write_oled>
     92a:	4c ce       	rjmp	.-872    	; 0x5c4 <clear_oled>

0000092c <draw_percentage>:
    
    clear_oled(); // 화면 클리어
}

void draw_percentage(unsigned char percent)
{
     92c:	0f 93       	push	r16
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
    
    draw_data(percent,8,7,0,0xCf);
     932:	c8 2f       	mov	r28, r24
     934:	d0 e0       	ldi	r29, 0x00	; 0
     936:	0f ec       	ldi	r16, 0xCF	; 207
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	47 e0       	ldi	r20, 0x07	; 7
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	68 e0       	ldi	r22, 0x08	; 8
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ce 01       	movw	r24, r28
     946:	de de       	rcall	.-580    	; 0x704 <draw_data>
     948:	03 ef       	ldi	r16, 0xF3	; 243
    draw_data(percent,8,7,1,0xf3);
     94a:	21 e0       	ldi	r18, 0x01	; 1
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	47 e0       	ldi	r20, 0x07	; 7
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	68 e0       	ldi	r22, 0x08	; 8
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	ce 01       	movw	r24, r28
     958:	d5 de       	rcall	.-598    	; 0x704 <draw_data>
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
}
     95e:	0f 91       	pop	r16
     960:	08 95       	ret

00000962 <draw_edge>:


void draw_edge(unsigned char ispercent)
{
     962:	0f 93       	push	r16
     964:	cf 93       	push	r28
     966:	c8 2f       	mov	r28, r24
    draw_data(128,8,0,0,0x0f);
     968:	0f e0       	ldi	r16, 0x0F	; 15
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	68 e0       	ldi	r22, 0x08	; 8
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	80 e8       	ldi	r24, 0x80	; 128
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	c4 de       	rcall	.-632    	; 0x704 <draw_data>
     97c:	cc 23       	and	r28, r28
    if(ispercent)
     97e:	e9 f0       	breq	.+58     	; 0x9ba <draw_edge+0x58>
     980:	00 ef       	ldi	r16, 0xF0	; 240
    {
        draw_data(128,8,0,1,0xf0);
     982:	21 e0       	ldi	r18, 0x01	; 1
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	68 e0       	ldi	r22, 0x08	; 8
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	80 e8       	ldi	r24, 0x80	; 128
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	b8 de       	rcall	.-656    	; 0x704 <draw_data>
     994:	0f e0       	ldi	r16, 0x0F	; 15
     996:	22 e0       	ldi	r18, 0x02	; 2
        draw_data(26,8,4,2,0x0f);
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	44 e0       	ldi	r20, 0x04	; 4
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	68 e0       	ldi	r22, 0x08	; 8
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	8a e1       	ldi	r24, 0x1A	; 26
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	ae de       	rcall	.-676    	; 0x704 <draw_data>
     9a8:	22 e0       	ldi	r18, 0x02	; 2
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	42 e6       	ldi	r20, 0x62	; 98
        draw_data(26,8,98,2,0x0f);
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	68 e0       	ldi	r22, 0x08	; 8
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	8a e1       	ldi	r24, 0x1A	; 26
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	a5 de       	rcall	.-694    	; 0x704 <draw_data>
     9ba:	0f ef       	ldi	r16, 0xFF	; 255
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	40 e0       	ldi	r20, 0x00	; 0
    }
    draw_data(4, 64,0,0,0xff);
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	60 e4       	ldi	r22, 0x40	; 64
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	84 e0       	ldi	r24, 0x04	; 4
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	9b de       	rcall	.-714    	; 0x704 <draw_data>
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	4c e7       	ldi	r20, 0x7C	; 124
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	60 e4       	ldi	r22, 0x40	; 64
    draw_data(4, 64,124,0,0xff);
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	84 e0       	ldi	r24, 0x04	; 4
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	92 de       	rcall	.-732    	; 0x704 <draw_data>
     9e0:	00 ef       	ldi	r16, 0xF0	; 240
     9e2:	28 e0       	ldi	r18, 0x08	; 8
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	44 e0       	ldi	r20, 0x04	; 4
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	68 e0       	ldi	r22, 0x08	; 8
    draw_data(120,8,4,8,0xf0);
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	88 e7       	ldi	r24, 0x78	; 120
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	88 de       	rcall	.-752    	; 0x704 <draw_data>
     9f4:	cf 91       	pop	r28
     9f6:	0f 91       	pop	r16
     9f8:	08 95       	ret

000009fa <init_interaction>:
#include "interaction.h"

void init_interaction(void)
{
    DDRD |= (1<<COIN_LED);
     9fa:	57 9a       	sbi	0x0a, 7	; 10
     9fc:	08 95       	ret

000009fe <led_interaction>:
    int i = 0;
    int j = 0;
    
    unsigned char flag = 0;
    
    while(j!= (time*5))
     9fe:	25 e0       	ldi	r18, 0x05	; 5
     a00:	28 9f       	mul	r18, r24
     a02:	d0 01       	movw	r26, r0
     a04:	29 9f       	mul	r18, r25
     a06:	b0 0d       	add	r27, r0
     a08:	11 24       	eor	r1, r1
     */
     
    int i = 0;
    int j = 0;
    
    unsigned char flag = 0;
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     speed      : led 최대로 밝아질때까지의 속도 지정
     threshold  : led 최대 밝기 지정
     */
     
    int i = 0;
    int j = 0;
     a0c:	e0 e0       	ldi	r30, 0x00	; 0
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
    
    unsigned char flag = 0;
    
    while(j!= (time*5))
     a10:	ea 17       	cp	r30, r26
     a12:	fb 07       	cpc	r31, r27
     a14:	f9 f0       	breq	.+62     	; 0xa54 <led_interaction+0x56>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
    {
        for(i=0;i<speed;i++)
     a1a:	26 17       	cp	r18, r22
     a1c:	37 07       	cpc	r19, r23
     a1e:	49 f0       	breq	.+18     	; 0xa32 <led_interaction+0x34>
        {
            if(i<threshold)
     a20:	24 17       	cp	r18, r20
     a22:	35 07       	cpc	r19, r21
     a24:	10 f4       	brcc	.+4      	; 0xa2a <led_interaction+0x2c>
                PORTD |= (1<<COIN_LED);
     a26:	5f 9a       	sbi	0x0b, 7	; 11
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <led_interaction+0x2e>
            else
                PORTD &= ~(1<<COIN_LED);
     a2a:	5f 98       	cbi	0x0b, 7	; 11
    
    unsigned char flag = 0;
    
    while(j!= (time*5))
    {
        for(i=0;i<speed;i++)
     a2c:	2f 5f       	subi	r18, 0xFF	; 255
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	f4 cf       	rjmp	.-24     	; 0xa1a <led_interaction+0x1c>
            if(i<threshold)
                PORTD |= (1<<COIN_LED);
            else
                PORTD &= ~(1<<COIN_LED);
        }
        if(threshold==speed)
     a32:	46 17       	cp	r20, r22
     a34:	57 07       	cpc	r21, r23
     a36:	29 f0       	breq	.+10     	; 0xa42 <led_interaction+0x44>
            flag=1;
        else if(threshold==0)
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	31 f0       	breq	.+12     	; 0xa4a <led_interaction+0x4c>
            flag=0;
        
        if(flag)
     a3e:	99 23       	and	r25, r25
     a40:	21 f0       	breq	.+8      	; 0xa4a <led_interaction+0x4c>
            threshold--;
     a42:	41 50       	subi	r20, 0x01	; 1
     a44:	51 09       	sbc	r21, r1
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	03 c0       	rjmp	.+6      	; 0xa50 <led_interaction+0x52>
        else
            threshold++;
     a4a:	4f 5f       	subi	r20, 0xFF	; 255
     a4c:	5f 4f       	sbci	r21, 0xFF	; 255
     a4e:	90 e0       	ldi	r25, 0x00	; 0
        j++;
     a50:	31 96       	adiw	r30, 0x01	; 1
     a52:	de cf       	rjmp	.-68     	; 0xa10 <led_interaction+0x12>
     a54:	08 95       	ret

00000a56 <__vector_20>:

unsigned char temp_pn[17]="1234123412341234";
unsigned long game_money = 0;

ISR(USART0_RX_vect)
{
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	0f 92       	push	r0
     a5e:	11 24       	eor	r1, r1
     a60:	2f 93       	push	r18
     a62:	3f 93       	push	r19
     a64:	4f 93       	push	r20
     a66:	5f 93       	push	r21
     a68:	6f 93       	push	r22
     a6a:	7f 93       	push	r23
     a6c:	8f 93       	push	r24
     a6e:	9f 93       	push	r25
     a70:	af 93       	push	r26
     a72:	bf 93       	push	r27
     a74:	cf 93       	push	r28
     a76:	ef 93       	push	r30
     a78:	ff 93       	push	r31
    unsigned char data = UDR0;
     a7a:	c0 91 c6 00 	lds	r28, 0x00C6
    
    if(data==START_BYTE && idxArr==0)
     a7e:	c3 35       	cpi	r28, 0x53	; 83
     a80:	41 f4       	brne	.+16     	; 0xa92 <__vector_20+0x3c>
     a82:	80 91 42 03 	lds	r24, 0x0342
     a86:	81 11       	cpse	r24, r1
     a88:	11 c0       	rjmp	.+34     	; 0xaac <__vector_20+0x56>
        isStart = 1;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 93 4d 03 	sts	0x034D, r24
     a90:	0d c0       	rjmp	.+26     	; 0xaac <__vector_20+0x56>
    
    else if(data==END_BYTE && idxArr!=0)
     a92:	c5 34       	cpi	r28, 0x45	; 69
     a94:	59 f4       	brne	.+22     	; 0xaac <__vector_20+0x56>
     a96:	80 91 42 03 	lds	r24, 0x0342
     a9a:	88 23       	and	r24, r24
     a9c:	39 f0       	breq	.+14     	; 0xaac <__vector_20+0x56>
    {
        //s_flag Get_INSTRUCTION bit 1 set
        change_bit_val(GET_INSTRUCTION,1);
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	76 dc       	rcall	.-1812   	; 0x390 <change_bit_val>
     aa4:	10 92 42 03 	sts	0x0342, r1
        idxArr  = INIT_DATA;
     aa8:	10 92 4d 03 	sts	0x034D, r1
        isStart = INIT_DATA;
     aac:	80 91 4d 03 	lds	r24, 0x034D
    }
    
    if(isStart && data!=START_BYTE)
     ab0:	88 23       	and	r24, r24
     ab2:	a9 f0       	breq	.+42     	; 0xade <__vector_20+0x88>
     ab4:	c3 35       	cpi	r28, 0x53	; 83
     ab6:	99 f0       	breq	.+38     	; 0xade <__vector_20+0x88>
     ab8:	80 91 42 03 	lds	r24, 0x0342
    {
        data_buffer[idxArr] = data;
     abc:	e8 2f       	mov	r30, r24
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	ee 5a       	subi	r30, 0xAE	; 174
     ac2:	fc 4f       	sbci	r31, 0xFC	; 252
     ac4:	c0 83       	st	Z, r28
     ac6:	c3 30       	cpi	r28, 0x03	; 3
        
        // 받은 명령어가 ack 신호 일경우
        if(data==GET_ACK && idxArr==0)
     ac8:	29 f4       	brne	.+10     	; 0xad4 <__vector_20+0x7e>
     aca:	81 11       	cpse	r24, r1
     acc:	03 c0       	rjmp	.+6      	; 0xad4 <__vector_20+0x7e>
     ace:	61 e0       	ldi	r22, 0x01	; 1
            change_bit_val(CONNECT,1);
     ad0:	80 e4       	ldi	r24, 0x40	; 64
     ad2:	5e dc       	rcall	.-1860   	; 0x390 <change_bit_val>
     ad4:	80 91 42 03 	lds	r24, 0x0342

        idxArr++;
     ad8:	8f 5f       	subi	r24, 0xFF	; 255
     ada:	80 93 42 03 	sts	0x0342, r24
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
    }
}
     ae2:	cf 91       	pop	r28
     ae4:	bf 91       	pop	r27
     ae6:	af 91       	pop	r26
     ae8:	9f 91       	pop	r25
     aea:	8f 91       	pop	r24
     aec:	7f 91       	pop	r23
     aee:	6f 91       	pop	r22
     af0:	5f 91       	pop	r21
     af2:	4f 91       	pop	r20
     af4:	3f 91       	pop	r19
     af6:	2f 91       	pop	r18
     af8:	0f 90       	pop	r0
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	0f 90       	pop	r0
     afe:	1f 90       	pop	r1
     b00:	18 95       	reti

00000b02 <__vector_28>:

ISR(USART1_RX_vect)
{
     b02:	1f 92       	push	r1
     b04:	0f 92       	push	r0
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	0f 92       	push	r0
     b0a:	11 24       	eor	r1, r1
     b0c:	2f 93       	push	r18
     b0e:	3f 93       	push	r19
     b10:	4f 93       	push	r20
     b12:	5f 93       	push	r21
     b14:	6f 93       	push	r22
     b16:	7f 93       	push	r23
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
     b1c:	af 93       	push	r26
     b1e:	bf 93       	push	r27
     b20:	cf 93       	push	r28
     b22:	ef 93       	push	r30
     b24:	ff 93       	push	r31
    unsigned char data = UDR1;
     b26:	c0 91 ce 00 	lds	r28, 0x00CE
    
    if(data==START_BYTE && idxArr==0)
     b2a:	c3 35       	cpi	r28, 0x53	; 83
     b2c:	41 f4       	brne	.+16     	; 0xb3e <__vector_28+0x3c>
     b2e:	80 91 42 03 	lds	r24, 0x0342
     b32:	81 11       	cpse	r24, r1
     b34:	11 c0       	rjmp	.+34     	; 0xb58 <__vector_28+0x56>
        isStart = 1;
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	80 93 4d 03 	sts	0x034D, r24
     b3c:	0d c0       	rjmp	.+26     	; 0xb58 <__vector_28+0x56>
    
    else if(data==END_BYTE && idxArr!=0)
     b3e:	c5 34       	cpi	r28, 0x45	; 69
     b40:	59 f4       	brne	.+22     	; 0xb58 <__vector_28+0x56>
     b42:	80 91 42 03 	lds	r24, 0x0342
     b46:	88 23       	and	r24, r24
     b48:	39 f0       	breq	.+14     	; 0xb58 <__vector_28+0x56>
    {
        //s_flag Get_INSTRUCTION bit 1 set
        change_bit_val(GET_INSTRUCTION,1);
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	20 dc       	rcall	.-1984   	; 0x390 <change_bit_val>
     b50:	10 92 42 03 	sts	0x0342, r1
        idxArr  = INIT_DATA;
     b54:	10 92 4d 03 	sts	0x034D, r1
        isStart = INIT_DATA;
     b58:	80 91 4d 03 	lds	r24, 0x034D
    }
    
    if(isStart && data!=START_BYTE)
     b5c:	88 23       	and	r24, r24
     b5e:	61 f0       	breq	.+24     	; 0xb78 <__vector_28+0x76>
     b60:	c3 35       	cpi	r28, 0x53	; 83
     b62:	51 f0       	breq	.+20     	; 0xb78 <__vector_28+0x76>
     b64:	80 91 42 03 	lds	r24, 0x0342
    {
        data_buffer[idxArr] = data;
     b68:	e8 2f       	mov	r30, r24
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	ee 5a       	subi	r30, 0xAE	; 174
     b6e:	fc 4f       	sbci	r31, 0xFC	; 252
     b70:	c0 83       	st	Z, r28
     b72:	8f 5f       	subi	r24, 0xFF	; 255
        idxArr++;
     b74:	80 93 42 03 	sts	0x0342, r24
     b78:	ff 91       	pop	r31
    }
}
     b7a:	ef 91       	pop	r30
     b7c:	cf 91       	pop	r28
     b7e:	bf 91       	pop	r27
     b80:	af 91       	pop	r26
     b82:	9f 91       	pop	r25
     b84:	8f 91       	pop	r24
     b86:	7f 91       	pop	r23
     b88:	6f 91       	pop	r22
     b8a:	5f 91       	pop	r21
     b8c:	4f 91       	pop	r20
     b8e:	3f 91       	pop	r19
     b90:	2f 91       	pop	r18
     b92:	0f 90       	pop	r0
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	0f 90       	pop	r0
     b98:	1f 90       	pop	r1
     b9a:	18 95       	reti

00000b9c <init_uart>:
{
    /*
     uart0 사용
     속도 : 57600
     */
    UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     b9c:	e1 ec       	ldi	r30, 0xC1	; 193
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	88 69       	ori	r24, 0x98	; 152
     ba4:	80 83       	st	Z, r24
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     ba6:	e2 ec       	ldi	r30, 0xC2	; 194
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	86 60       	ori	r24, 0x06	; 6
     bae:	80 83       	st	Z, r24
    UBRR0L  = 21; // 20Mhz에서 57600은 21 16Mhz에서 57600은 16
     bb0:	85 e1       	ldi	r24, 0x15	; 21
     bb2:	80 93 c4 00 	sts	0x00C4, r24
    
    /*
     uart1 사용
     속도 : 57600
     */
    UCSR1B |= (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
     bb6:	e9 ec       	ldi	r30, 0xC9	; 201
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	88 69       	ori	r24, 0x98	; 152
     bbe:	80 83       	st	Z, r24
    UCSR1C |= (1<<UCSZ11)|(1<<UCSZ10);
     bc0:	ea ec       	ldi	r30, 0xCA	; 202
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	86 60       	ori	r24, 0x06	; 6
     bc8:	80 83       	st	Z, r24
    UBRR1L  = 129; // 20Mhz에서 57600은 21 16Mhz에서 57600은 16
     bca:	81 e8       	ldi	r24, 0x81	; 129
     bcc:	80 93 cc 00 	sts	0x00CC, r24
     bd0:	08 95       	ret

00000bd2 <make_packet>:
                  // 9600은 129
}

void make_packet(unsigned char opcode, char length, unsigned char data[])
{
     bd2:	a4 e1       	ldi	r26, 0x14	; 20
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ee ee       	ldi	r30, 0xEE	; 238
     bd8:	f5 e0       	ldi	r31, 0x05	; 5
     bda:	e7 c3       	rjmp	.+1998   	; 0x13aa <__prologue_saves__+0x20>
     bdc:	93 e5       	ldi	r25, 0x53	; 83
    char idx;
    char i;
    
    idx = 0;
    //start make packet
    packet[idx++] = START_BYTE;
     bde:	99 83       	std	Y+1, r25	; 0x01
     be0:	8a 83       	std	Y+2, r24	; 0x02
    packet[idx++] = opcode;
     be2:	6b 83       	std	Y+3, r22	; 0x03
    packet[idx++] = length;
     be4:	94 2f       	mov	r25, r20
     be6:	fa 01       	movw	r30, r20
    
    for( i=0 ;i<length;i++ )
     be8:	83 e0       	ldi	r24, 0x03	; 3
     bea:	84 1b       	sub	r24, r20
     bec:	38 2f       	mov	r19, r24
     bee:	3e 0f       	add	r19, r30
     bf0:	2e 2f       	mov	r18, r30
     bf2:	29 1b       	sub	r18, r25
     bf4:	26 17       	cp	r18, r22
     bf6:	48 f4       	brcc	.+18     	; 0xc0a <make_packet+0x38>
     bf8:	21 91       	ld	r18, Z+
        packet[idx++] = data[i];
     bfa:	a1 e0       	ldi	r26, 0x01	; 1
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	ac 0f       	add	r26, r28
     c00:	bd 1f       	adc	r27, r29
     c02:	a3 0f       	add	r26, r19
     c04:	b1 1d       	adc	r27, r1
     c06:	2c 93       	st	X, r18
     c08:	f1 cf       	rjmp	.-30     	; 0xbec <make_packet+0x1a>
     c0a:	83 e0       	ldi	r24, 0x03	; 3
     c0c:	86 0f       	add	r24, r22
     c0e:	e1 e0       	ldi	r30, 0x01	; 1
    
    packet[idx] = END_BYTE;
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	ec 0f       	add	r30, r28
     c14:	fd 1f       	adc	r31, r29
     c16:	e8 0f       	add	r30, r24
     c18:	f1 1d       	adc	r31, r1
     c1a:	85 e4       	ldi	r24, 0x45	; 69
     c1c:	80 83       	st	Z, r24
     c1e:	20 e0       	ldi	r18, 0x00	; 0
    
    //start send packet
    for( i=0;i<length+4;i++ )
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	6d 5f       	subi	r22, 0xFD	; 253
     c24:	7f 4f       	sbci	r23, 0xFF	; 255
     c26:	82 2f       	mov	r24, r18
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	68 17       	cp	r22, r24
     c2c:	79 07       	cpc	r23, r25
     c2e:	7c f0       	brlt	.+30     	; 0xc4e <make_packet+0x7c>
     c30:	30 91 c0 00 	lds	r19, 0x00C0
    {
        while(!(UCSR0A&(1<<UDRE0)));
     c34:	35 ff       	sbrs	r19, 5
     c36:	fc cf       	rjmp	.-8      	; 0xc30 <make_packet+0x5e>
     c38:	e1 e0       	ldi	r30, 0x01	; 1
        UDR0 = packet[i];
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	ec 0f       	add	r30, r28
     c3e:	fd 1f       	adc	r31, r29
     c40:	e8 0f       	add	r30, r24
     c42:	f9 1f       	adc	r31, r25
     c44:	80 81       	ld	r24, Z
     c46:	80 93 c6 00 	sts	0x00C6, r24
     c4a:	2f 5f       	subi	r18, 0xFF	; 255
        packet[idx++] = data[i];
    
    packet[idx] = END_BYTE;
    
    //start send packet
    for( i=0;i<length+4;i++ )
     c4c:	ec cf       	rjmp	.-40     	; 0xc26 <make_packet+0x54>
     c4e:	64 96       	adiw	r28, 0x14	; 20
    {
        while(!(UCSR0A&(1<<UDRE0)));
        UDR0 = packet[i];
    }
}
     c50:	e2 e0       	ldi	r30, 0x02	; 2
     c52:	c7 c3       	rjmp	.+1934   	; 0x13e2 <__epilogue_restores__+0x20>

00000c54 <compare_pn>:
{
    unsigned char length;
    char i;
    char isMatch;
    
    length = data_buffer[idx++];
     c54:	e1 e0       	ldi	r30, 0x01	; 1
     c56:	e8 0f       	add	r30, r24
     c58:	a8 2f       	mov	r26, r24
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	ae 5a       	subi	r26, 0xAE	; 174
     c5e:	bc 4f       	sbci	r27, 0xFC	; 252
     c60:	8c 91       	ld	r24, X
     c62:	20 e2       	ldi	r18, 0x20	; 32
     c64:	33 e0       	ldi	r19, 0x03	; 3
    
    for( i=0;i<length;i++ )
     c66:	d9 01       	movw	r26, r18
     c68:	9a 2f       	mov	r25, r26
     c6a:	92 1b       	sub	r25, r18
     c6c:	98 17       	cp	r25, r24
     c6e:	58 f4       	brcc	.+22     	; 0xc86 <compare_pn+0x32>
    {
        if(temp_pn[i]==data_buffer[idx++])
     c70:	5d 91       	ld	r21, X+
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	9e 0f       	add	r25, r30
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	ee 5a       	subi	r30, 0xAE	; 174
     c7a:	fc 4f       	sbci	r31, 0xFC	; 252
     c7c:	40 81       	ld	r20, Z
     c7e:	54 13       	cpse	r21, r20
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <compare_pn+0x36>
     c82:	e9 2f       	mov	r30, r25
     c84:	f1 cf       	rjmp	.-30     	; 0xc68 <compare_pn+0x14>
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	08 95       	ret
            isMatch = 1;
        else
        {
            isMatch = 0;
     c8a:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return isMatch;
}
     c8c:	08 95       	ret

00000c8e <get_goal>:

void get_goal( unsigned char idx )
{
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ec e4       	ldi	r30, 0x4C	; 76
     c94:	f6 e0       	ldi	r31, 0x06	; 6
     c96:	83 c3       	rjmp	.+1798   	; 0x139e <__prologue_saves__+0x14>
     c98:	dd 24       	eor	r13, r13
    unsigned long tmp;
    unsigned char len = data_buffer[idx++];
     c9a:	d3 94       	inc	r13
     c9c:	d8 0e       	add	r13, r24
     c9e:	e8 2f       	mov	r30, r24
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	ee 5a       	subi	r30, 0xAE	; 174
     ca4:	fc 4f       	sbci	r31, 0xFC	; 252
     ca6:	c0 80       	ld	r12, Z
     ca8:	c0 e0       	ldi	r28, 0x00	; 0
    unsigned char i;
    
    for( i=0;i<len;i++ )
     caa:	d0 e0       	ldi	r29, 0x00	; 0
     cac:	33 e0       	ldi	r19, 0x03	; 3
     cae:	e3 2e       	mov	r14, r19
     cb0:	f1 2c       	mov	r15, r1
     cb2:	0c 2d       	mov	r16, r12
        tmp = data_buffer[idx++]&0xff;
        _delay_ms(2);
        
        goal_money = goal_money|tmp;
        eeprom_write(GOALMONEY_ADDRESS-i,(unsigned char)tmp);
        if( i < len-1 )
     cb4:	10 e0       	ldi	r17, 0x00	; 0
     cb6:	01 50       	subi	r16, 0x01	; 1
     cb8:	11 09       	sbc	r17, r1
     cba:	ec 2f       	mov	r30, r28
     cbc:	ed 0d       	add	r30, r13
     cbe:	cc 15       	cp	r28, r12
{
    unsigned long tmp;
    unsigned char len = data_buffer[idx++];
    unsigned char i;
    
    for( i=0;i<len;i++ )
     cc0:	c0 f5       	brcc	.+112    	; 0xd32 <get_goal+0xa4>
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
    {
        tmp = data_buffer[idx++]&0xff;
     cc4:	ee 5a       	subi	r30, 0xAE	; 174
     cc6:	fc 4f       	sbci	r31, 0xFC	; 252
     cc8:	60 81       	ld	r22, Z
     cca:	8f e0       	ldi	r24, 0x0F	; 15
     ccc:	97 e2       	ldi	r25, 0x27	; 39
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <get_goal+0x40>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <get_goal+0x46>
     cd4:	00 00       	nop
     cd6:	80 91 47 03 	lds	r24, 0x0347
        _delay_ms(2);
        
        goal_money = goal_money|tmp;
     cda:	90 91 48 03 	lds	r25, 0x0348
     cde:	a0 91 49 03 	lds	r26, 0x0349
     ce2:	b0 91 4a 03 	lds	r27, 0x034A
     ce6:	86 2b       	or	r24, r22
     ce8:	80 93 47 03 	sts	0x0347, r24
     cec:	90 93 48 03 	sts	0x0348, r25
     cf0:	a0 93 49 03 	sts	0x0349, r26
     cf4:	b0 93 4a 03 	sts	0x034A, r27
     cf8:	c7 01       	movw	r24, r14
        eeprom_write(GOALMONEY_ADDRESS-i,(unsigned char)tmp);
     cfa:	8c 1b       	sub	r24, r28
     cfc:	9d 0b       	sbc	r25, r29
     cfe:	42 db       	rcall	.-2428   	; 0x384 <eeprom_write>
     d00:	c0 17       	cp	r28, r16
     d02:	d1 07       	cpc	r29, r17
        if( i < len-1 )
     d04:	a4 f4       	brge	.+40     	; 0xd2e <get_goal+0xa0>
     d06:	80 91 47 03 	lds	r24, 0x0347
            goal_money = goal_money<<8;
     d0a:	90 91 48 03 	lds	r25, 0x0348
     d0e:	a0 91 49 03 	lds	r26, 0x0349
     d12:	b0 91 4a 03 	lds	r27, 0x034A
     d16:	ba 2f       	mov	r27, r26
     d18:	a9 2f       	mov	r26, r25
     d1a:	98 2f       	mov	r25, r24
     d1c:	88 27       	eor	r24, r24
     d1e:	80 93 47 03 	sts	0x0347, r24
     d22:	90 93 48 03 	sts	0x0348, r25
     d26:	a0 93 49 03 	sts	0x0349, r26
     d2a:	b0 93 4a 03 	sts	0x034A, r27
     d2e:	21 96       	adiw	r28, 0x01	; 1
     d30:	c4 cf       	rjmp	.-120    	; 0xcba <get_goal+0x2c>
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
    }
}
     d36:	e8 e0       	ldi	r30, 0x08	; 8
     d38:	4e c3       	rjmp	.+1692   	; 0x13d6 <__epilogue_restores__+0x14>

00000d3a <proccess_instruction>:

void proccess_instruction(void)
{
     d3a:	a9 e0       	ldi	r26, 0x09	; 9
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e2 ea       	ldi	r30, 0xA2	; 162
     d40:	f6 e0       	ldi	r31, 0x06	; 6
     d42:	2d c3       	rjmp	.+1626   	; 0x139e <__prologue_saves__+0x14>
     d44:	80 91 52 03 	lds	r24, 0x0352
    
    int m=0;
    int len ;
    int k;
    
    switch(data_buffer[idx++])
     d48:	89 30       	cpi	r24, 0x09	; 9
     d4a:	09 f4       	brne	.+2      	; 0xd4e <proccess_instruction+0x14>
     d4c:	f6 c0       	rjmp	.+492    	; 0xf3a <proccess_instruction+0x200>
     d4e:	90 f4       	brcc	.+36     	; 0xd74 <proccess_instruction+0x3a>
     d50:	84 30       	cpi	r24, 0x04	; 4
     d52:	09 f4       	brne	.+2      	; 0xd56 <proccess_instruction+0x1c>
     d54:	48 c1       	rjmp	.+656    	; 0xfe6 <proccess_instruction+0x2ac>
     d56:	20 f4       	brcc	.+8      	; 0xd60 <proccess_instruction+0x26>
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	09 f4       	brne	.+2      	; 0xd5e <proccess_instruction+0x24>
     d5c:	5f c0       	rjmp	.+190    	; 0xe1c <proccess_instruction+0xe2>
     d5e:	7c c1       	rjmp	.+760    	; 0x1058 <proccess_instruction+0x31e>
     d60:	85 30       	cpi	r24, 0x05	; 5
     d62:	09 f4       	brne	.+2      	; 0xd66 <proccess_instruction+0x2c>
     d64:	66 c1       	rjmp	.+716    	; 0x1032 <proccess_instruction+0x2f8>
     d66:	87 30       	cpi	r24, 0x07	; 7
     d68:	09 f0       	breq	.+2      	; 0xd6c <proccess_instruction+0x32>
     d6a:	76 c1       	rjmp	.+748    	; 0x1058 <proccess_instruction+0x31e>
     d6c:	0c dc       	rcall	.-2024   	; 0x586 <turnon_motor_voltage>
            make_packet(SEND_MONEY,3,d);
            break;
            
            // 잠금or 해제명령어일경우
        case LOCK_UNLOCK:
            turnon_motor_voltage();
     d6e:	80 91 54 03 	lds	r24, 0x0354
            lock_or_unlock(data_buffer[++idx]);
     d72:	64 c1       	rjmp	.+712    	; 0x103c <proccess_instruction+0x302>
     d74:	81 31       	cpi	r24, 0x11	; 17
     d76:	09 f4       	brne	.+2      	; 0xd7a <proccess_instruction+0x40>
    
    int m=0;
    int len ;
    int k;
    
    switch(data_buffer[idx++])
     d78:	b7 c0       	rjmp	.+366    	; 0xee8 <proccess_instruction+0x1ae>
     d7a:	20 f4       	brcc	.+8      	; 0xd84 <proccess_instruction+0x4a>
     d7c:	80 31       	cpi	r24, 0x10	; 16
     d7e:	09 f4       	brne	.+2      	; 0xd82 <proccess_instruction+0x48>
     d80:	5f c1       	rjmp	.+702    	; 0x1040 <proccess_instruction+0x306>
     d82:	6a c1       	rjmp	.+724    	; 0x1058 <proccess_instruction+0x31e>
     d84:	82 31       	cpi	r24, 0x12	; 18
     d86:	09 f4       	brne	.+2      	; 0xd8a <proccess_instruction+0x50>
     d88:	11 c1       	rjmp	.+546    	; 0xfac <proccess_instruction+0x272>
     d8a:	87 34       	cpi	r24, 0x47	; 71
     d8c:	09 f0       	breq	.+2      	; 0xd90 <proccess_instruction+0x56>
     d8e:	64 c1       	rjmp	.+712    	; 0x1058 <proccess_instruction+0x31e>
     d90:	40 91 55 03 	lds	r20, 0x0355
        
        case SEND_GAMEDATA:
            game_money = 0;
            len = data_buffer[idx++];
            game_money += data_buffer[idx++]*500;
            game_money += data_buffer[idx++]*100;
     d94:	00 91 56 03 	lds	r16, 0x0356
            game_money += data_buffer[idx++]*50;
     d98:	80 91 57 03 	lds	r24, 0x0357
            game_money += data_buffer[idx++]*10;
     d9c:	24 e6       	ldi	r18, 0x64	; 100
     d9e:	42 9f       	mul	r20, r18
        
        case SEND_GAMEDATA:
            game_money = 0;
            len = data_buffer[idx++];
            game_money += data_buffer[idx++]*500;
            game_money += data_buffer[idx++]*100;
     da0:	a0 01       	movw	r20, r0
     da2:	11 24       	eor	r1, r1
     da4:	6a 01       	movw	r12, r20
     da6:	ee 24       	eor	r14, r14
     da8:	d7 fc       	sbrc	r13, 7
     daa:	e0 94       	com	r14
     dac:	fe 2c       	mov	r15, r14
     dae:	90 91 54 03 	lds	r25, 0x0354
            break;
        
        case SEND_GAMEDATA:
            game_money = 0;
            len = data_buffer[idx++];
            game_money += data_buffer[idx++]*500;
     db2:	24 ef       	ldi	r18, 0xF4	; 244
     db4:	31 e0       	ldi	r19, 0x01	; 1
     db6:	92 9f       	mul	r25, r18
     db8:	a0 01       	movw	r20, r0
     dba:	93 9f       	mul	r25, r19
     dbc:	50 0d       	add	r21, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	66 27       	eor	r22, r22
     dc2:	57 fd       	sbrc	r21, 7
     dc4:	60 95       	com	r22
     dc6:	76 2f       	mov	r23, r22
     dc8:	4c 0d       	add	r20, r12
     dca:	5d 1d       	adc	r21, r13
            game_money += data_buffer[idx++]*100;
     dcc:	6e 1d       	adc	r22, r14
     dce:	7f 1d       	adc	r23, r15
     dd0:	32 e3       	ldi	r19, 0x32	; 50
     dd2:	03 9f       	mul	r16, r19
            game_money += data_buffer[idx++]*50;
     dd4:	80 01       	movw	r16, r0
     dd6:	11 24       	eor	r1, r1
     dd8:	22 27       	eor	r18, r18
     dda:	17 fd       	sbrc	r17, 7
     ddc:	20 95       	com	r18
     dde:	32 2f       	mov	r19, r18
     de0:	40 0f       	add	r20, r16
     de2:	51 1f       	adc	r21, r17
     de4:	62 1f       	adc	r22, r18
     de6:	73 1f       	adc	r23, r19
     de8:	ea e0       	ldi	r30, 0x0A	; 10
     dea:	8e 9f       	mul	r24, r30
            game_money += data_buffer[idx++]*10;
     dec:	c0 01       	movw	r24, r0
     dee:	11 24       	eor	r1, r1
     df0:	aa 27       	eor	r26, r26
     df2:	97 fd       	sbrc	r25, 7
     df4:	a0 95       	com	r26
     df6:	ba 2f       	mov	r27, r26
     df8:	8a 01       	movw	r16, r20
     dfa:	9b 01       	movw	r18, r22
     dfc:	08 0f       	add	r16, r24
     dfe:	19 1f       	adc	r17, r25
     e00:	2a 1f       	adc	r18, r26
     e02:	3b 1f       	adc	r19, r27
     e04:	c9 01       	movw	r24, r18
     e06:	b8 01       	movw	r22, r16
     e08:	00 93 3d 03 	sts	0x033D, r16
     e0c:	10 93 3e 03 	sts	0x033E, r17
     e10:	20 93 3f 03 	sts	0x033F, r18
     e14:	30 93 40 03 	sts	0x0340, r19
     e18:	b3 dc       	rcall	.-1690   	; 0x780 <write_num_to_oled>
     e1a:	1e c1       	rjmp	.+572    	; 0x1058 <proccess_instruction+0x31e>
            write_num_to_oled(game_money);
     e1c:	80 91 41 03 	lds	r24, 0x0341
            break;
     e20:	87 fd       	sbrc	r24, 7
    int k;
    
    switch(data_buffer[idx++])
    {
        case REQUEST_PN:
            if(!(s_flag&CONFIRM))
     e22:	1a c1       	rjmp	.+564    	; 0x1058 <proccess_instruction+0x31e>
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	16 df       	rcall	.-468    	; 0xc54 <compare_pn>
     e28:	88 23       	and	r24, r24
            {
                // PN 등록요청이오면 PN번호를 비교한다
                if(compare_pn(idx++))
     e2a:	71 f1       	breq	.+92     	; 0xe88 <proccess_instruction+0x14e>
     e2c:	41 e3       	ldi	r20, 0x31	; 49
     e2e:	53 e0       	ldi	r21, 0x03	; 3
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	82 e0       	ldi	r24, 0x02	; 2
                {
                    make_packet(RESPONSE_PN,1,SUCCESS_PN);
     e34:	ce de       	rcall	.-612    	; 0xbd2 <make_packet>
     e36:	60 91 41 03 	lds	r22, 0x0341
     e3a:	60 54       	subi	r22, 0x40	; 64
     e3c:	80 e8       	ldi	r24, 0x80	; 128
     e3e:	a8 da       	rcall	.-2736   	; 0x390 <change_bit_val>
                    change_bit_val(CONFIRM,s_flag-64);	// s_flag CONFIRM bit 1로 set
     e40:	60 e8       	ldi	r22, 0x80	; 128
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9e da       	rcall	.-2756   	; 0x384 <eeprom_write>
     e48:	00 ea       	ldi	r16, 0xA0	; 160
     e4a:	12 e0       	ldi	r17, 0x02	; 2
                    eeprom_write(S_FLAG_ADDRESS, 0x80);	// eeprom에 인증여부 저장
     e4c:	25 e0       	ldi	r18, 0x05	; 5
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	4d e2       	ldi	r20, 0x2D	; 45
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	60 e1       	ldi	r22, 0x10	; 16
                    
                    //성공 문구 출력
                    for(k=0;k<2;k++)
                        draw_char(8,16,45+(k*10),5,font_success[k]);
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	88 e0       	ldi	r24, 0x08	; 8
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	ca db       	rcall	.-2156   	; 0x5f2 <draw_char>
     e5e:	00 eb       	ldi	r16, 0xB0	; 176
     e60:	12 e0       	ldi	r17, 0x02	; 2
     e62:	25 e0       	ldi	r18, 0x05	; 5
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	47 e3       	ldi	r20, 0x37	; 55
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	60 e1       	ldi	r22, 0x10	; 16
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	88 e0       	ldi	r24, 0x08	; 8
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	bf db       	rcall	.-2178   	; 0x5f2 <draw_char>
     e74:	0a e2       	ldi	r16, 0x2A	; 42
     e76:	10 e5       	ldi	r17, 0x50	; 80
     e78:	2e ef       	ldi	r18, 0xFE	; 254
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	01 50       	subi	r16, 0x01	; 1
     e7e:	10 40       	sbci	r17, 0x00	; 0
     e80:	20 40       	sbci	r18, 0x00	; 0
     e82:	30 40       	sbci	r19, 0x00	; 0
     e84:	d9 f7       	brne	.-10     	; 0xe7c <proccess_instruction+0x142>
     e86:	24 c0       	rjmp	.+72     	; 0xed0 <proccess_instruction+0x196>
     e88:	45 e3       	ldi	r20, 0x35	; 53
     e8a:	53 e0       	ldi	r21, 0x03	; 3
     e8c:	61 e0       	ldi	r22, 0x01	; 1
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	a0 de       	rcall	.-704    	; 0xbd2 <make_packet>
     e92:	00 e8       	ldi	r16, 0x80	; 128
     e94:	12 e0       	ldi	r17, 0x02	; 2
     e96:	25 e0       	ldi	r18, 0x05	; 5
     e98:	30 e0       	ldi	r19, 0x00	; 0
                    draw_data(30, 16, 45,5,0x00);
                }
                
                else
                {
                    make_packet(RESPONSE_PN,1,FAIL_PN);
     e9a:	4d e2       	ldi	r20, 0x2D	; 45
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	60 e1       	ldi	r22, 0x10	; 16
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	88 e0       	ldi	r24, 0x08	; 8
     ea4:	90 e0       	ldi	r25, 0x00	; 0
                    //실패 문구 출력
                    for(k=0;k<2;k++)
                        draw_char(8,16,45+(k*10),5,font_fail[k]);
     ea6:	a5 db       	rcall	.-2230   	; 0x5f2 <draw_char>
     ea8:	00 e9       	ldi	r16, 0x90	; 144
     eaa:	12 e0       	ldi	r17, 0x02	; 2
     eac:	25 e0       	ldi	r18, 0x05	; 5
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	47 e3       	ldi	r20, 0x37	; 55
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	60 e1       	ldi	r22, 0x10	; 16
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	88 e0       	ldi	r24, 0x08	; 8
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9a db       	rcall	.-2252   	; 0x5f2 <draw_char>
     ebe:	6a e2       	ldi	r22, 0x2A	; 42
     ec0:	80 e5       	ldi	r24, 0x50	; 80
     ec2:	9e ef       	ldi	r25, 0xFE	; 254
     ec4:	e0 e0       	ldi	r30, 0x00	; 0
     ec6:	61 50       	subi	r22, 0x01	; 1
     ec8:	80 40       	sbci	r24, 0x00	; 0
     eca:	90 40       	sbci	r25, 0x00	; 0
     ecc:	e0 40       	sbci	r30, 0x00	; 0
     ece:	d9 f7       	brne	.-10     	; 0xec6 <proccess_instruction+0x18c>
     ed0:	00 00       	nop
     ed2:	00 e0       	ldi	r16, 0x00	; 0
     ed4:	25 e0       	ldi	r18, 0x05	; 5
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	4d e2       	ldi	r20, 0x2D	; 45
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	60 e1       	ldi	r22, 0x10	; 16
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	8e e1       	ldi	r24, 0x1E	; 30
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0f dc       	rcall	.-2018   	; 0x704 <draw_data>
     ee6:	b8 c0       	rjmp	.+368    	; 0x1058 <proccess_instruction+0x31e>
     ee8:	00 e0       	ldi	r16, 0x00	; 0
                    
                    _delay_ms(5000);
                    
                    //앞에 그렸던 문구 클리어
                    draw_data(30, 16, 45,5,0x00);
     eea:	22 e0       	ldi	r18, 0x02	; 2
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	45 e0       	ldi	r20, 0x05	; 5
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	6c e2       	ldi	r22, 0x2C	; 44
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	87 e7       	ldi	r24, 0x77	; 119
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	04 dc       	rcall	.-2040   	; 0x704 <draw_data>
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	c3 2e       	mov	r12, r19
     f00:	31 e0       	ldi	r19, 0x01	; 1
                }
            }
            break;
        case START_GAME:
            // 이전에 그려져있던 그림 클리어
            draw_data(119,44,5,2,0x00);
     f02:	d3 2e       	mov	r13, r19
     f04:	e1 2c       	mov	r14, r1
     f06:	f1 2c       	mov	r15, r1
     f08:	a7 01       	movw	r20, r14
     f0a:	42 5e       	subi	r20, 0xE2	; 226
     f0c:	5f 4f       	sbci	r21, 0xFF	; 255
     f0e:	86 01       	movw	r16, r12
     f10:	22 e0       	ldi	r18, 0x02	; 2
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	60 e1       	ldi	r22, 0x10	; 16
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	88 e0       	ldi	r24, 0x08	; 8
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	6a db       	rcall	.-2348   	; 0x5f2 <draw_char>
     f1e:	fa e0       	ldi	r31, 0x0A	; 10
     f20:	ef 0e       	add	r14, r31
     f22:	f1 1c       	adc	r15, r1
     f24:	00 e1       	ldi	r16, 0x10	; 16
     f26:	c0 0e       	add	r12, r16
     f28:	d1 1c       	adc	r13, r1
            
            for(k=0;k<6;k++)
                draw_char(8,16,30+(k*10),2,font_game[k]);
     f2a:	1c e3       	ldi	r17, 0x3C	; 60
     f2c:	e1 16       	cp	r14, r17
     f2e:	f1 04       	cpc	r15, r1
     f30:	59 f7       	brne	.-42     	; 0xf08 <proccess_instruction+0x1ce>
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	80 e1       	ldi	r24, 0x10	; 16
     f36:	2c da       	rcall	.-2984   	; 0x390 <change_bit_val>
     f38:	8f c0       	rjmp	.+286    	; 0x1058 <proccess_instruction+0x31e>
     f3a:	87 e0       	ldi	r24, 0x07	; 7
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	25 da       	rcall	.-2998   	; 0x38a <eeprom_read>
     f40:	80 93 5c 03 	sts	0x035C, r24
     f44:	e1 2c       	mov	r14, r1
     f46:	f1 2c       	mov	r15, r1
            break;
        case START_GAME:
            // 이전에 그려져있던 그림 클리어
            draw_data(119,44,5,2,0x00);
            
            for(k=0;k<6;k++)
     f48:	08 e0       	ldi	r16, 0x08	; 8
     f4a:	80 91 5c 03 	lds	r24, 0x035C
     f4e:	90 e0       	ldi	r25, 0x00	; 0
                draw_char(8,16,30+(k*10),2,font_game[k]);
            change_bit_val(ISGAME,1);	// s_flag ISGAME bit 1로 set
     f50:	e8 16       	cp	r14, r24
     f52:	f9 06       	cpc	r15, r25
     f54:	d4 f4       	brge	.+52     	; 0xf8a <proccess_instruction+0x250>
     f56:	9e 01       	movw	r18, r28
            break;
     f58:	2f 5f       	subi	r18, 0xFF	; 255
            game_money += data_buffer[idx++]*10;
            write_num_to_oled(game_money);
            break;
            
        case REQUEST_SAVED_COIN:
            saved_coin_cnt = eeprom_read(UNCONNECT_COIN_CNT_ADD);
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	69 01       	movw	r12, r18
     f5e:	10 e0       	ldi	r17, 0x00	; 0
     f60:	81 2f       	mov	r24, r17
     f62:	80 0f       	add	r24, r16
     f64:	90 e0       	ldi	r25, 0x00	; 0
            for(m=0;m<saved_coin_cnt;m++)
     f66:	11 da       	rcall	.-3038   	; 0x38a <eeprom_read>
     f68:	f6 01       	movw	r30, r12
{
    unsigned char idx = 0;
    unsigned char d[3];
    unsigned char data[6];
    unsigned char tmp;
    unsigned char add = UNCONNECT_COIN_DATA_ADD;
     f6a:	81 93       	st	Z+, r24
            write_num_to_oled(game_money);
            break;
            
        case REQUEST_SAVED_COIN:
            saved_coin_cnt = eeprom_read(UNCONNECT_COIN_CNT_ADD);
            for(m=0;m<saved_coin_cnt;m++)
     f6c:	6f 01       	movw	r12, r30
     f6e:	1f 5f       	subi	r17, 0xFF	; 255
     f70:	16 30       	cpi	r17, 0x06	; 6
     f72:	b1 f7       	brne	.-20     	; 0xf60 <proccess_instruction+0x226>
     f74:	0a 5f       	subi	r16, 0xFA	; 250
     f76:	ae 01       	movw	r20, r28
     f78:	4f 5f       	subi	r20, 0xFF	; 255
     f7a:	5f 4f       	sbci	r21, 0xFF	; 255
     f7c:	66 e0       	ldi	r22, 0x06	; 6
     f7e:	86 e0       	ldi	r24, 0x06	; 6
     f80:	28 de       	rcall	.-944    	; 0xbd2 <make_packet>
     f82:	ff ef       	ldi	r31, 0xFF	; 255
     f84:	ef 1a       	sub	r14, r31
            {
                for(k=0;k<6;k++)
                    data[k] = eeprom_read(add++);
     f86:	ff 0a       	sbc	r15, r31
     f88:	e0 cf       	rjmp	.-64     	; 0xf4a <proccess_instruction+0x210>
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	87 e0       	ldi	r24, 0x07	; 7
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	f9 d9       	rcall	.-3086   	; 0x384 <eeprom_write>
     f92:	87 e0       	ldi	r24, 0x07	; 7
            
        case REQUEST_SAVED_COIN:
            saved_coin_cnt = eeprom_read(UNCONNECT_COIN_CNT_ADD);
            for(m=0;m<saved_coin_cnt;m++)
            {
                for(k=0;k<6;k++)
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	f9 d9       	rcall	.-3086   	; 0x38a <eeprom_read>
     f98:	80 93 5c 03 	sts	0x035C, r24
                    data[k] = eeprom_read(add++);
                make_packet(SYNC_DATA,6,data);
     f9c:	98 2f       	mov	r25, r24
     f9e:	99 0f       	add	r25, r25
     fa0:	89 0f       	add	r24, r25
     fa2:	88 0f       	add	r24, r24
     fa4:	88 5f       	subi	r24, 0xF8	; 248
     fa6:	80 93 5d 03 	sts	0x035D, r24
            write_num_to_oled(game_money);
            break;
            
        case REQUEST_SAVED_COIN:
            saved_coin_cnt = eeprom_read(UNCONNECT_COIN_CNT_ADD);
            for(m=0;m<saved_coin_cnt;m++)
     faa:	56 c0       	rjmp	.+172    	; 0x1058 <proccess_instruction+0x31e>
     fac:	80 91 3d 03 	lds	r24, 0x033D
            {
                for(k=0;k<6;k++)
                    data[k] = eeprom_read(add++);
                make_packet(SYNC_DATA,6,data);
            }
            eeprom_write(UNCONNECT_COIN_CNT_ADD,INIT_DATA);
     fb0:	90 91 3e 03 	lds	r25, 0x033E
     fb4:	a0 91 3f 03 	lds	r26, 0x033F
     fb8:	b0 91 40 03 	lds	r27, 0x0340
            
            // 블루투스 미연결때 저장되어있던 동전갯수를 eeprom으로 부터 얻는다
            saved_coin_cnt  = eeprom_read(UNCONNECT_COIN_CNT_ADD);
     fbc:	89 87       	std	Y+9, r24	; 0x09
     fbe:	98 87       	std	Y+8, r25	; 0x08
     fc0:	af 83       	std	Y+7, r26	; 0x07
     fc2:	8b 2f       	mov	r24, r27
     fc4:	99 27       	eor	r25, r25
            last_coin_add   = UNCONNECT_COIN_DATA_ADD + (saved_coin_cnt * 6);
     fc6:	aa 27       	eor	r26, r26
     fc8:	bb 27       	eor	r27, r27
     fca:	80 93 3d 03 	sts	0x033D, r24
     fce:	90 93 3e 03 	sts	0x033E, r25
     fd2:	a0 93 3f 03 	sts	0x033F, r26
            break;
     fd6:	b0 93 40 03 	sts	0x0340, r27
     fda:	ae 01       	movw	r20, r28
     fdc:	49 5f       	subi	r20, 0xF9	; 249
     fde:	5f 4f       	sbci	r21, 0xFF	; 255
     fe0:	63 e0       	ldi	r22, 0x03	; 3
     fe2:	88 e0       	ldi	r24, 0x08	; 8
     fe4:	38 c0       	rjmp	.+112    	; 0x1056 <proccess_instruction+0x31c>
            
        case SUMMIT_DATA:
            for(m=0;m<3;m++ )
            {
                // 8비트씩 char 배열에 저장
                d[2-m] = game_money & 0xff;
     fe6:	30 91 53 03 	lds	r19, 0x0353
     fea:	a4 e5       	ldi	r26, 0x54	; 84
                game_money = game_money>>8;
     fec:	b3 e0       	ldi	r27, 0x03	; 3
     fee:	fe 01       	movw	r30, r28
     ff0:	31 96       	adiw	r30, 0x01	; 1
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	4a e0       	ldi	r20, 0x0A	; 10
     ff6:	23 17       	cp	r18, r19
     ff8:	61 f0       	breq	.+24     	; 0x1012 <proccess_instruction+0x2d8>
     ffa:	8d 91       	ld	r24, X+
     ffc:	64 2f       	mov	r22, r20
     ffe:	97 d1       	rcall	.+814    	; 0x132e <__udivmodqi4>
    1000:	59 2f       	mov	r21, r25
    1002:	60 e1       	ldi	r22, 0x10	; 16
            }
            
            // 게임보드에서 전송 버튼을 클릭했을경우 전송
            make_packet(SEND_MONEY,3,d);
    1004:	86 9f       	mul	r24, r22
    1006:	c0 01       	movw	r24, r0
    1008:	11 24       	eor	r1, r1
    100a:	85 2b       	or	r24, r21
    100c:	81 93       	st	Z+, r24
    100e:	2f 5f       	subi	r18, 0xFF	; 255
            
        case GET_UTC_TIME:
            m   = 0;
            tmp = 0;
            
            len = data_buffer[idx++];
    1010:	f2 cf       	rjmp	.-28     	; 0xff6 <proccess_instruction+0x2bc>
    1012:	09 81       	ldd	r16, Y+1	; 0x01
    1014:	10 e0       	ldi	r17, 0x00	; 0
    1016:	2a 81       	ldd	r18, Y+2	; 0x02
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	4b 81       	ldd	r20, Y+3	; 0x03
            for(m=0;m<len;m++)
    101c:	50 e0       	ldi	r21, 0x00	; 0
            {
                data[m] = 0;
                tmp = data_buffer[idx++];
                data[m] |= (tmp/10)<<4;
    101e:	6c 81       	ldd	r22, Y+4	; 0x04
        case GET_UTC_TIME:
            m   = 0;
            tmp = 0;
            
            len = data_buffer[idx++];
            for(m=0;m<len;m++)
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
            {
                data[m] = 0;
                tmp = data_buffer[idx++];
    1024:	90 e0       	ldi	r25, 0x00	; 0
                data[m] |= (tmp/10)<<4;
    1026:	f5 d9       	rcall	.-3094   	; 0x412 <set_rtc>
    1028:	41 e3       	ldi	r20, 0x31	; 49
    102a:	53 e0       	ldi	r21, 0x03	; 3
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	12 c0       	rjmp	.+36     	; 0x1056 <proccess_instruction+0x31c>
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	2c de       	rcall	.-936    	; 0xc8e <get_goal>
                data[m] |= (tmp%10);
    1036:	a7 da       	rcall	.-2738   	; 0x586 <turnon_motor_voltage>
    1038:	80 91 55 03 	lds	r24, 0x0355
    103c:	65 da       	rcall	.-2870   	; 0x508 <lock_or_unlock>
            }
            
            set_rtc(data[4],data[3],data[2],data[1],data[0]);
    103e:	f4 cf       	rjmp	.-24     	; 0x1028 <proccess_instruction+0x2ee>
    1040:	80 91 41 03 	lds	r24, 0x0341
    1044:	84 ff       	sbrs	r24, 4
    1046:	03 c0       	rjmp	.+6      	; 0x104e <proccess_instruction+0x314>
    1048:	47 e3       	ldi	r20, 0x37	; 55
    104a:	53 e0       	ldi	r21, 0x03	; 3
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <proccess_instruction+0x318>
    104e:	49 e3       	ldi	r20, 0x39	; 57
    1050:	53 e0       	ldi	r21, 0x03	; 3
    1052:	61 e0       	ldi	r22, 0x01	; 1
    1054:	81 e1       	ldi	r24, 0x11	; 17
            // 사용자로부터 년월일시분값을 받아서 RTC에 셋한다.
            
            //성공적으로 데이터 수신했음을 앱에게 알림
            make_packet(ACK,1,SUCCESS_ACK);
    1056:	bd dd       	rcall	.-1158   	; 0xbd2 <make_packet>
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	99 d9       	rcall	.-3278   	; 0x390 <change_bit_val>
    105e:	29 96       	adiw	r28, 0x09	; 9

            break;
            
            // 목표데이터를 전송받을경우
        case GET_GOAL:
            get_goal(idx++);
    1060:	e8 e0       	ldi	r30, 0x08	; 8
    1062:	b9 c1       	rjmp	.+882    	; 0x13d6 <__epilogue_restores__+0x14>

00001064 <init_adc>:
#include "eeprom.h"
#include "i2c.h"

void init_adc()
{
    ADMUX   |= (1<<REFS0) | (1<<REFS1) | (1<<MUX0);
    1064:	ec e7       	ldi	r30, 0x7C	; 124
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	81 6c       	ori	r24, 0xC1	; 193
    106c:	80 83       	st	Z, r24
    ADCSRA  |= (1<<ADEN) | (1<<ADPS2)|(2<<ADPS1)|(ADPS0)|
    106e:	ea e7       	ldi	r30, 0x7A	; 122
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	84 6e       	ori	r24, 0xE4	; 228
    1076:	80 83       	st	Z, r24
    (1<<ADSC) | (1<<ADATE) | (0<<ADIE);
    
    DDRB &= ~(1<<COINDETEC_PIN);
    1078:	20 98       	cbi	0x04, 0	; 4
    
    adc_max = 1024;
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	94 e0       	ldi	r25, 0x04	; 4
    107e:	90 93 4c 03 	sts	0x034C, r25
    1082:	80 93 4b 03 	sts	0x034B, r24
    1086:	08 95       	ret

00001088 <proccess_coin>:
}

void proccess_coin()
{
    1088:	a3 e0       	ldi	r26, 0x03	; 3
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e9 e4       	ldi	r30, 0x49	; 73
    108e:	f8 e0       	ldi	r31, 0x08	; 8
    1090:	7c c1       	rjmp	.+760    	; 0x138a <__prologue_saves__>
    1092:	83 ec       	ldi	r24, 0xC3	; 195
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1094:	99 e0       	ldi	r25, 0x09	; 9
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <proccess_coin+0xe>
    109a:	00 c0       	rjmp	.+0      	; 0x109c <proccess_coin+0x14>
    109c:	00 00       	nop
    109e:	80 91 4b 03 	lds	r24, 0x034B
    unsigned long   coin_flag;
    unsigned char   percent;
    
    _delay_us(500);
    // 금액 처리
    if( adc_max>800 && adc_max<1000 )
    10a2:	90 91 4c 03 	lds	r25, 0x034C
    10a6:	9c 01       	movw	r18, r24
    10a8:	21 52       	subi	r18, 0x21	; 33
    10aa:	33 40       	sbci	r19, 0x03	; 3
    10ac:	27 3c       	cpi	r18, 0xC7	; 199
    10ae:	31 05       	cpc	r19, r1
    10b0:	98 f0       	brcs	.+38     	; 0x10d8 <proccess_coin+0x50>
    10b2:	2a 56       	subi	r18, 0x6A	; 106
        coin_flag = SHIPWON;
    else if( adc_max>650 && adc_max<800)
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	25 39       	cpi	r18, 0x95	; 149
    10b8:	31 05       	cpc	r19, r1
    10ba:	08 f4       	brcc	.+2      	; 0x10be <proccess_coin+0x36>
    10bc:	0e c1       	rjmp	.+540    	; 0x12da <proccess_coin+0x252>
    10be:	28 53       	subi	r18, 0x38	; 56
        coin_flag = OHSHIPWON;
    else if( adc_max>450 && adc_max<600 )
    10c0:	3f 4f       	sbci	r19, 0xFF	; 255
    10c2:	25 39       	cpi	r18, 0x95	; 149
    10c4:	31 05       	cpc	r19, r1
    10c6:	08 f4       	brcc	.+2      	; 0x10ca <proccess_coin+0x42>
    10c8:	0e c1       	rjmp	.+540    	; 0x12e6 <proccess_coin+0x25e>
    10ca:	89 5c       	subi	r24, 0xC9	; 201
        coin_flag = BACKWON;
    else if (adc_max>200 && adc_max<400 )
    10cc:	91 09       	sbc	r25, r1
    10ce:	87 3c       	cpi	r24, 0xC7	; 199
    10d0:	91 05       	cpc	r25, r1
    10d2:	08 f4       	brcc	.+2      	; 0x10d6 <proccess_coin+0x4e>
    10d4:	0e c1       	rjmp	.+540    	; 0x12f2 <proccess_coin+0x26a>
    10d6:	f2 c0       	rjmp	.+484    	; 0x12bc <proccess_coin+0x234>
    10d8:	4a e0       	ldi	r20, 0x0A	; 10
    unsigned char   percent;
    
    _delay_us(500);
    // 금액 처리
    if( adc_max>800 && adc_max<1000 )
        coin_flag = SHIPWON;
    10da:	c4 2e       	mov	r12, r20
    10dc:	d1 2c       	mov	r13, r1
    10de:	e1 2c       	mov	r14, r1
    10e0:	f1 2c       	mov	r15, r1
    10e2:	80 90 4e 03 	lds	r8, 0x034E
    
    
    // 제대로 인식되었을경우 led 인터렉션
    if(coin_flag!=0)
    {
        current_money += coin_flag; // 현재 저축된 총금액 연산
    10e6:	90 90 4f 03 	lds	r9, 0x034F
    10ea:	a0 90 50 03 	lds	r10, 0x0350
    10ee:	b0 90 51 03 	lds	r11, 0x0351
    10f2:	8c 0c       	add	r8, r12
    10f4:	9d 1c       	adc	r9, r13
    10f6:	ae 1c       	adc	r10, r14
    10f8:	bf 1c       	adc	r11, r15
    10fa:	80 92 4e 03 	sts	0x034E, r8
    10fe:	90 92 4f 03 	sts	0x034F, r9
    1102:	a0 92 50 03 	sts	0x0350, r10
    1106:	b0 92 51 03 	sts	0x0351, r11
    110a:	8e 01       	movw	r16, r28
    110c:	0c 5f       	subi	r16, 0xFC	; 252
    110e:	1f 4f       	sbci	r17, 0xFF	; 255
    1110:	16 01       	movw	r2, r12
    1112:	27 01       	movw	r4, r14
    1114:	84 e0       	ldi	r24, 0x04	; 4
    1116:	68 2e       	mov	r6, r24
    1118:	71 2c       	mov	r7, r1
    111a:	f8 01       	movw	r30, r16
        tmp_current    = current_money;
        
        for( i=0;i<length;i++ )
        {
            // 8비트씩 char 배열에 저장
            data[2-i] = coin_flag & 0xff;
    111c:	22 92       	st	-Z, r2
    111e:	8f 01       	movw	r16, r30
    1120:	23 2c       	mov	r2, r3
            coin_flag = coin_flag>>8;
    1122:	34 2c       	mov	r3, r4
    1124:	45 2c       	mov	r4, r5
    1126:	55 24       	eor	r5, r5
    1128:	68 2d       	mov	r22, r8
            tmp = tmp_current & 0xff;
            
            //eeprom에 현재금액 저장
            eeprom_write((CURRENT_MONEY-2)+i,tmp);
    112a:	c3 01       	movw	r24, r6
    112c:	2b d9       	rcall	.-3498   	; 0x384 <eeprom_write>
    112e:	89 2c       	mov	r8, r9
    1130:	9a 2c       	mov	r9, r10
            tmp_current = tmp_current>>8;
    1132:	ab 2c       	mov	r10, r11
    1134:	bb 24       	eor	r11, r11
    1136:	ff ef       	ldi	r31, 0xFF	; 255
    1138:	6f 1a       	sub	r6, r31
    113a:	7f 0a       	sbc	r7, r31
    113c:	27 e0       	ldi	r18, 0x07	; 7
    113e:	62 16       	cp	r6, r18
    if(coin_flag!=0)
    {
        current_money += coin_flag; // 현재 저축된 총금액 연산
        tmp_current    = current_money;
        
        for( i=0;i<length;i++ )
    1140:	71 04       	cpc	r7, r1
    1142:	59 f7       	brne	.-42     	; 0x111a <proccess_coin+0x92>
    1144:	ae 01       	movw	r20, r28
    1146:	4f 5f       	subi	r20, 0xFF	; 255
            eeprom_write((CURRENT_MONEY-2)+i,tmp);
            tmp_current = tmp_current>>8;
        }
        
        // 저금한 금액 전송 시도
        make_packet(SEND_MONEY,length,data);
    1148:	5f 4f       	sbci	r21, 0xFF	; 255
    114a:	63 e0       	ldi	r22, 0x03	; 3
    114c:	88 e0       	ldi	r24, 0x08	; 8
    114e:	41 dd       	rcall	.-1406   	; 0xbd2 <make_packet>
    1150:	86 e0       	ldi	r24, 0x06	; 6
    1152:	90 91 41 03 	lds	r25, 0x0341
    1156:	96 ff       	sbrs	r25, 6
        
        i=0;
        
        while(1)
        {
            if(s_flag&CONNECT)
    1158:	d3 c0       	rjmp	.+422    	; 0x1300 <proccess_coin+0x278>
    115a:	80 91 41 03 	lds	r24, 0x0341
    115e:	86 fd       	sbrc	r24, 6
                break;
            i++;
        }
        
        // 블루투스 미연결 상태일경우 정보 eeprom에 저장
        if(!(s_flag&CONNECT))
    1160:	86 c0       	rjmp	.+268    	; 0x126e <proccess_coin+0x1e6>
    1162:	60 91 5c 03 	lds	r22, 0x035C
    1166:	6f 5f       	subi	r22, 0xFF	; 255
        {
            saved_coin_cnt++;
    1168:	60 93 5c 03 	sts	0x035C, r22
    116c:	87 e0       	ldi	r24, 0x07	; 7
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	09 d9       	rcall	.-3566   	; 0x384 <eeprom_write>
            eeprom_write(UNCONNECT_COIN_CNT_ADD,saved_coin_cnt);
    1172:	66 e0       	ldi	r22, 0x06	; 6
    1174:	88 e6       	ldi	r24, 0x68	; 104
    1176:	76 d9       	rcall	.-3348   	; 0x464 <i2c_read>
    1178:	90 91 5d 03 	lds	r25, 0x035D
            // 블루 투스 미연결시 데이터 저장
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x06)); // 년
    117c:	21 e0       	ldi	r18, 0x01	; 1
    117e:	29 0f       	add	r18, r25
    1180:	20 93 5d 03 	sts	0x035D, r18
    1184:	68 2f       	mov	r22, r24
    1186:	89 2f       	mov	r24, r25
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	fc d8       	rcall	.-3592   	; 0x384 <eeprom_write>
    118c:	87 e8       	ldi	r24, 0x87	; 135
    118e:	93 e1       	ldi	r25, 0x13	; 19
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <proccess_coin+0x108>
    1194:	00 c0       	rjmp	.+0      	; 0x1196 <proccess_coin+0x10e>
    1196:	00 00       	nop
    1198:	65 e0       	ldi	r22, 0x05	; 5
    119a:	88 e6       	ldi	r24, 0x68	; 104
    119c:	63 d9       	rcall	.-3386   	; 0x464 <i2c_read>
    119e:	90 91 5d 03 	lds	r25, 0x035D
    11a2:	21 e0       	ldi	r18, 0x01	; 1
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x05)); // 월
    11a4:	29 0f       	add	r18, r25
    11a6:	20 93 5d 03 	sts	0x035D, r18
    11aa:	68 2f       	mov	r22, r24
    11ac:	89 2f       	mov	r24, r25
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	e9 d8       	rcall	.-3630   	; 0x384 <eeprom_write>
    11b2:	e7 e8       	ldi	r30, 0x87	; 135
    11b4:	f3 e1       	ldi	r31, 0x13	; 19
    11b6:	31 97       	sbiw	r30, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <proccess_coin+0x12e>
    11ba:	00 c0       	rjmp	.+0      	; 0x11bc <proccess_coin+0x134>
    11bc:	00 00       	nop
    11be:	64 e0       	ldi	r22, 0x04	; 4
    11c0:	88 e6       	ldi	r24, 0x68	; 104
    11c2:	50 d9       	rcall	.-3424   	; 0x464 <i2c_read>
    11c4:	90 91 5d 03 	lds	r25, 0x035D
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	29 0f       	add	r18, r25
    11cc:	20 93 5d 03 	sts	0x035D, r18
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x04)); // 일
    11d0:	68 2f       	mov	r22, r24
    11d2:	89 2f       	mov	r24, r25
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	d6 d8       	rcall	.-3668   	; 0x384 <eeprom_write>
    11d8:	87 e8       	ldi	r24, 0x87	; 135
    11da:	93 e1       	ldi	r25, 0x13	; 19
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <proccess_coin+0x154>
    11e0:	00 c0       	rjmp	.+0      	; 0x11e2 <proccess_coin+0x15a>
    11e2:	00 00       	nop
    11e4:	62 e0       	ldi	r22, 0x02	; 2
    11e6:	88 e6       	ldi	r24, 0x68	; 104
    11e8:	3d d9       	rcall	.-3462   	; 0x464 <i2c_read>
    11ea:	90 91 5d 03 	lds	r25, 0x035D
    11ee:	21 e0       	ldi	r18, 0x01	; 1
    11f0:	29 0f       	add	r18, r25
    11f2:	20 93 5d 03 	sts	0x035D, r18
    11f6:	68 2f       	mov	r22, r24
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x02)); // 시
    11f8:	89 2f       	mov	r24, r25
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	c3 d8       	rcall	.-3706   	; 0x384 <eeprom_write>
    11fe:	e7 e8       	ldi	r30, 0x87	; 135
    1200:	f3 e1       	ldi	r31, 0x13	; 19
    1202:	31 97       	sbiw	r30, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <proccess_coin+0x17a>
    1206:	00 c0       	rjmp	.+0      	; 0x1208 <proccess_coin+0x180>
    1208:	00 00       	nop
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	88 e6       	ldi	r24, 0x68	; 104
    120e:	2a d9       	rcall	.-3500   	; 0x464 <i2c_read>
    1210:	90 91 5d 03 	lds	r25, 0x035D
    1214:	21 e0       	ldi	r18, 0x01	; 1
    1216:	29 0f       	add	r18, r25
    1218:	20 93 5d 03 	sts	0x035D, r18
    121c:	68 2f       	mov	r22, r24
    121e:	89 2f       	mov	r24, r25
    1220:	90 e0       	ldi	r25, 0x00	; 0
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x01)); // 분
    1222:	b0 d8       	rcall	.-3744   	; 0x384 <eeprom_write>
    1224:	87 e8       	ldi	r24, 0x87	; 135
    1226:	93 e1       	ldi	r25, 0x13	; 19
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	f1 f7       	brne	.-4      	; 0x1228 <proccess_coin+0x1a0>
    122c:	00 c0       	rjmp	.+0      	; 0x122e <proccess_coin+0x1a6>
    122e:	00 00       	nop
    1230:	10 91 5d 03 	lds	r17, 0x035D
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	81 0f       	add	r24, r17
    1238:	80 93 5d 03 	sts	0x035D, r24
    123c:	c7 01       	movw	r24, r14
    123e:	b6 01       	movw	r22, r12
    1240:	2a e0       	ldi	r18, 0x0A	; 10
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	7e d0       	rcall	.+252    	; 0x1346 <__udivmodsi4>
    124a:	62 2f       	mov	r22, r18
            _delay_ms(1);
            eeprom_write(last_coin_add++,tpm); // 돈
    124c:	81 2f       	mov	r24, r17
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	99 d8       	rcall	.-3790   	; 0x384 <eeprom_write>
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	80 e2       	ldi	r24, 0x20	; 32
    1256:	9c d8       	rcall	.-3784   	; 0x390 <change_bit_val>
    else if (adc_max>200 && adc_max<400 )
        coin_flag = OHBACKWON;
    else
        coin_flag = 0;
    
    tpm = coin_flag/10;
    1258:	60 91 41 03 	lds	r22, 0x0341
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	91 d8       	rcall	.-3806   	; 0x384 <eeprom_write>
    1262:	e7 e8       	ldi	r30, 0x87	; 135
    1264:	f3 e1       	ldi	r31, 0x13	; 19
    1266:	31 97       	sbiw	r30, 0x01	; 1
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x02)); // 시
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x01)); // 분
            _delay_ms(1);
            eeprom_write(last_coin_add++,tpm); // 돈
    1268:	f1 f7       	brne	.-4      	; 0x1266 <proccess_coin+0x1de>
    126a:	00 c0       	rjmp	.+0      	; 0x126c <proccess_coin+0x1e4>
    126c:	00 00       	nop
    126e:	20 91 4e 03 	lds	r18, 0x034E
            
            change_bit_val( ISDATA, 1 );
    1272:	30 91 4f 03 	lds	r19, 0x034F
    1276:	40 91 50 03 	lds	r20, 0x0350
    127a:	50 91 51 03 	lds	r21, 0x0351
    127e:	a0 e7       	ldi	r26, 0x70	; 112
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	4b d0       	rcall	.+150    	; 0x131a <__muluhisi3>
    1284:	20 91 47 03 	lds	r18, 0x0347
    1288:	30 91 48 03 	lds	r19, 0x0348
    128c:	40 91 49 03 	lds	r20, 0x0349
    1290:	50 91 4a 03 	lds	r21, 0x034A
            eeprom_write( S_FLAG_ADDRESS, s_flag);
            _delay_ms(1);
        }
        
        percent = (current_money*112)/goal_money;
    1294:	58 d0       	rcall	.+176    	; 0x1346 <__udivmodsi4>
    1296:	82 2f       	mov	r24, r18
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	48 db       	rcall	.-2416   	; 0x92c <draw_percentage>
    129c:	60 91 4e 03 	lds	r22, 0x034E
    12a0:	70 91 4f 03 	lds	r23, 0x034F
    12a4:	80 91 50 03 	lds	r24, 0x0350
    12a8:	90 91 51 03 	lds	r25, 0x0351
    12ac:	69 da       	rcall	.-2862   	; 0x780 <write_num_to_oled>
    12ae:	4a e0       	ldi	r20, 0x0A	; 10
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	68 ee       	ldi	r22, 0xE8	; 232
    12b4:	73 e0       	ldi	r23, 0x03	; 3
    12b6:	8e e5       	ldi	r24, 0x5E	; 94
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	a1 db       	rcall	.-2238   	; 0x9fe <led_interaction>
    12bc:	60 e0       	ldi	r22, 0x00	; 0
        draw_percentage(percent);
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	67 d8       	rcall	.-3890   	; 0x390 <change_bit_val>
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	80 e4       	ldi	r24, 0x40	; 64
        
        write_num_to_oled(current_money);
    12c6:	64 d8       	rcall	.-3896   	; 0x390 <change_bit_val>
    12c8:	87 e8       	ldi	r24, 0x87	; 135
    12ca:	93 e1       	ldi	r25, 0x13	; 19
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <proccess_coin+0x244>
    12d0:	00 c0       	rjmp	.+0      	; 0x12d2 <proccess_coin+0x24a>
    12d2:	00 00       	nop
    12d4:	23 96       	adiw	r28, 0x03	; 3
    12d6:	e2 e1       	ldi	r30, 0x12	; 18
    12d8:	74 c0       	rjmp	.+232    	; 0x13c2 <__epilogue_restores__>
        led_interaction(350,1000,10);
    12da:	32 e3       	ldi	r19, 0x32	; 50
    12dc:	c3 2e       	mov	r12, r19
    12de:	d1 2c       	mov	r13, r1
    12e0:	e1 2c       	mov	r14, r1
    12e2:	f1 2c       	mov	r15, r1
    12e4:	fe ce       	rjmp	.-516    	; 0x10e2 <proccess_coin+0x5a>
    12e6:	24 e6       	ldi	r18, 0x64	; 100
    12e8:	c2 2e       	mov	r12, r18
    }
    
    // s_flag 0으로 클리어
    change_bit_val(INPUT_COIN,0);
    12ea:	d1 2c       	mov	r13, r1
    12ec:	e1 2c       	mov	r14, r1
    12ee:	f1 2c       	mov	r15, r1
    12f0:	f8 ce       	rjmp	.-528    	; 0x10e2 <proccess_coin+0x5a>
    12f2:	94 ef       	ldi	r25, 0xF4	; 244
    12f4:	c9 2e       	mov	r12, r25
    12f6:	dd 24       	eor	r13, r13
    12f8:	d3 94       	inc	r13
    12fa:	e1 2c       	mov	r14, r1
    12fc:	f1 2c       	mov	r15, r1
    12fe:	f1 ce       	rjmp	.-542    	; 0x10e2 <proccess_coin+0x5a>
    1300:	3f e3       	ldi	r19, 0x3F	; 63
    1302:	9d e0       	ldi	r25, 0x0D	; 13
    1304:	e3 e0       	ldi	r30, 0x03	; 3
    change_bit_val(CONNECT,0);
    _delay_ms(1);
}
    1306:	31 50       	subi	r19, 0x01	; 1
    1308:	90 40       	sbci	r25, 0x00	; 0
    130a:	e0 40       	sbci	r30, 0x00	; 0
    130c:	e1 f7       	brne	.-8      	; 0x1306 <proccess_coin+0x27e>
    _delay_us(500);
    // 금액 처리
    if( adc_max>800 && adc_max<1000 )
        coin_flag = SHIPWON;
    else if( adc_max>650 && adc_max<800)
        coin_flag = OHSHIPWON;
    130e:	00 c0       	rjmp	.+0      	; 0x1310 <proccess_coin+0x288>
    1310:	00 00       	nop
    1312:	81 50       	subi	r24, 0x01	; 1
    1314:	09 f0       	breq	.+2      	; 0x1318 <proccess_coin+0x290>
    1316:	1d cf       	rjmp	.-454    	; 0x1152 <proccess_coin+0xca>
    1318:	20 cf       	rjmp	.-448    	; 0x115a <proccess_coin+0xd2>

0000131a <__muluhisi3>:
    131a:	6e d0       	rcall	.+220    	; 0x13f8 <__umulhisi3>
    131c:	a5 9f       	mul	r26, r21
    131e:	90 0d       	add	r25, r0
    1320:	b4 9f       	mul	r27, r20
    1322:	90 0d       	add	r25, r0
    1324:	a4 9f       	mul	r26, r20
    1326:	80 0d       	add	r24, r0
    1328:	91 1d       	adc	r25, r1
    132a:	11 24       	eor	r1, r1
    132c:	08 95       	ret

0000132e <__udivmodqi4>:
    132e:	99 1b       	sub	r25, r25
    1330:	79 e0       	ldi	r23, 0x09	; 9
    1332:	04 c0       	rjmp	.+8      	; 0x133c <__udivmodqi4_ep>

00001334 <__udivmodqi4_loop>:
    1334:	99 1f       	adc	r25, r25
    1336:	96 17       	cp	r25, r22
    1338:	08 f0       	brcs	.+2      	; 0x133c <__udivmodqi4_ep>
    133a:	96 1b       	sub	r25, r22

0000133c <__udivmodqi4_ep>:
    133c:	88 1f       	adc	r24, r24
    133e:	7a 95       	dec	r23
    1340:	c9 f7       	brne	.-14     	; 0x1334 <__udivmodqi4_loop>
    1342:	80 95       	com	r24
    1344:	08 95       	ret

00001346 <__udivmodsi4>:
    1346:	a1 e2       	ldi	r26, 0x21	; 33
    1348:	1a 2e       	mov	r1, r26
    134a:	aa 1b       	sub	r26, r26
    134c:	bb 1b       	sub	r27, r27
    134e:	fd 01       	movw	r30, r26
    1350:	0d c0       	rjmp	.+26     	; 0x136c <__udivmodsi4_ep>

00001352 <__udivmodsi4_loop>:
    1352:	aa 1f       	adc	r26, r26
    1354:	bb 1f       	adc	r27, r27
    1356:	ee 1f       	adc	r30, r30
    1358:	ff 1f       	adc	r31, r31
    135a:	a2 17       	cp	r26, r18
    135c:	b3 07       	cpc	r27, r19
    135e:	e4 07       	cpc	r30, r20
    1360:	f5 07       	cpc	r31, r21
    1362:	20 f0       	brcs	.+8      	; 0x136c <__udivmodsi4_ep>
    1364:	a2 1b       	sub	r26, r18
    1366:	b3 0b       	sbc	r27, r19
    1368:	e4 0b       	sbc	r30, r20
    136a:	f5 0b       	sbc	r31, r21

0000136c <__udivmodsi4_ep>:
    136c:	66 1f       	adc	r22, r22
    136e:	77 1f       	adc	r23, r23
    1370:	88 1f       	adc	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	1a 94       	dec	r1
    1376:	69 f7       	brne	.-38     	; 0x1352 <__udivmodsi4_loop>
    1378:	60 95       	com	r22
    137a:	70 95       	com	r23
    137c:	80 95       	com	r24
    137e:	90 95       	com	r25
    1380:	9b 01       	movw	r18, r22
    1382:	ac 01       	movw	r20, r24
    1384:	bd 01       	movw	r22, r26
    1386:	cf 01       	movw	r24, r30
    1388:	08 95       	ret

0000138a <__prologue_saves__>:
    138a:	2f 92       	push	r2
    138c:	3f 92       	push	r3
    138e:	4f 92       	push	r4
    1390:	5f 92       	push	r5
    1392:	6f 92       	push	r6
    1394:	7f 92       	push	r7
    1396:	8f 92       	push	r8
    1398:	9f 92       	push	r9
    139a:	af 92       	push	r10
    139c:	bf 92       	push	r11
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	ca 1b       	sub	r28, r26
    13b4:	db 0b       	sbc	r29, r27
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	09 94       	ijmp

000013c2 <__epilogue_restores__>:
    13c2:	2a 88       	ldd	r2, Y+18	; 0x12
    13c4:	39 88       	ldd	r3, Y+17	; 0x11
    13c6:	48 88       	ldd	r4, Y+16	; 0x10
    13c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    13ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    13cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    13ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    13d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    13d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    13d4:	b9 84       	ldd	r11, Y+9	; 0x09
    13d6:	c8 84       	ldd	r12, Y+8	; 0x08
    13d8:	df 80       	ldd	r13, Y+7	; 0x07
    13da:	ee 80       	ldd	r14, Y+6	; 0x06
    13dc:	fd 80       	ldd	r15, Y+5	; 0x05
    13de:	0c 81       	ldd	r16, Y+4	; 0x04
    13e0:	1b 81       	ldd	r17, Y+3	; 0x03
    13e2:	aa 81       	ldd	r26, Y+2	; 0x02
    13e4:	b9 81       	ldd	r27, Y+1	; 0x01
    13e6:	ce 0f       	add	r28, r30
    13e8:	d1 1d       	adc	r29, r1
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	ed 01       	movw	r28, r26
    13f6:	08 95       	ret

000013f8 <__umulhisi3>:
    13f8:	a2 9f       	mul	r26, r18
    13fa:	b0 01       	movw	r22, r0
    13fc:	b3 9f       	mul	r27, r19
    13fe:	c0 01       	movw	r24, r0
    1400:	a3 9f       	mul	r26, r19
    1402:	70 0d       	add	r23, r0
    1404:	81 1d       	adc	r24, r1
    1406:	11 24       	eor	r1, r1
    1408:	91 1d       	adc	r25, r1
    140a:	b2 9f       	mul	r27, r18
    140c:	70 0d       	add	r23, r0
    140e:	81 1d       	adc	r24, r1
    1410:	11 24       	eor	r1, r1
    1412:	91 1d       	adc	r25, r1
    1414:	08 95       	ret

00001416 <__eerd_byte_m324p>:
    1416:	f9 99       	sbic	0x1f, 1	; 31
    1418:	fe cf       	rjmp	.-4      	; 0x1416 <__eerd_byte_m324p>
    141a:	92 bd       	out	0x22, r25	; 34
    141c:	81 bd       	out	0x21, r24	; 33
    141e:	f8 9a       	sbi	0x1f, 0	; 31
    1420:	99 27       	eor	r25, r25
    1422:	80 b5       	in	r24, 0x20	; 32
    1424:	08 95       	ret

00001426 <__eewr_byte_m324p>:
    1426:	26 2f       	mov	r18, r22

00001428 <__eewr_r18_m324p>:
    1428:	f9 99       	sbic	0x1f, 1	; 31
    142a:	fe cf       	rjmp	.-4      	; 0x1428 <__eewr_r18_m324p>
    142c:	1f ba       	out	0x1f, r1	; 31
    142e:	92 bd       	out	0x22, r25	; 34
    1430:	81 bd       	out	0x21, r24	; 33
    1432:	20 bd       	out	0x20, r18	; 32
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	fa 9a       	sbi	0x1f, 2	; 31
    143a:	f9 9a       	sbi	0x1f, 1	; 31
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	08 95       	ret

00001442 <_exit>:
    1442:	f8 94       	cli

00001444 <__stop_program>:
    1444:	ff cf       	rjmp	.-2      	; 0x1444 <__stop_program>
