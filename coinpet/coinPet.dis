
coinPet.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
       6:	00 00       	nop
       8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
       a:	00 00       	nop
       c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
       e:	00 00       	nop
      10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
      12:	00 00       	nop
      14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
      16:	00 00       	nop
      18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
      22:	00 00       	nop
      24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
      26:	00 00       	nop
      28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
      32:	00 00       	nop
      34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
      36:	00 00       	nop
      38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b6 c2       	rjmp	.+1388   	; 0x5ae <__vector_16>
      42:	00 00       	nop
      44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
      46:	00 00       	nop
      48:	d1 c2       	rjmp	.+1442   	; 0x5ec <__vector_18>
      4a:	00 00       	nop
      4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2b c5       	rjmp	.+2646   	; 0xaa8 <__vector_20>
      52:	00 00       	nop
      54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
      56:	00 00       	nop
      58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
      62:	00 00       	nop
      64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
      66:	00 00       	nop
      68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c5       	rjmp	.+2786   	; 0xb54 <__vector_28>
      72:	00 00       	nop
      74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
      76:	00 00       	nop
      78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	13 e0       	ldi	r17, 0x03	; 3
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e0 e1       	ldi	r30, 0x10	; 16
      90:	f6 e1       	ldi	r31, 0x16	; 22
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ac 39       	cpi	r26, 0x9C	; 156
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	13 e0       	ldi	r17, 0x03	; 3
      a0:	ac e9       	ldi	r26, 0x9C	; 156
      a2:	b3 e0       	ldi	r27, 0x03	; 3
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a0 3c       	cpi	r26, 0xC0	; 192
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	03 d0       	rcall	.+6      	; 0xb6 <main>
      b0:	0c 94 06 0b 	jmp	0x160c	; 0x160c <_exit>

000000b4 <__bad_interrupt>:
      b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <main>:

#define GAMEBOARD_DETEC_PIN     PA0


int main(void)
{
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e1 e6       	ldi	r30, 0x61	; 97
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__prologue_saves__+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c2:	2f e7       	ldi	r18, 0x7F	; 127
      c4:	84 e8       	ldi	r24, 0x84	; 132
      c6:	9e e1       	ldi	r25, 0x1E	; 30
      c8:	21 50       	subi	r18, 0x01	; 1
      ca:	80 40       	sbci	r24, 0x00	; 0
      cc:	90 40       	sbci	r25, 0x00	; 0
      ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x12>
      d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x1c>
      d2:	00 00       	nop
    unsigned char percent;
    int k = 0;
    
    _delay_ms(500);
    
    init_oled();
      d4:	01 d4       	rcall	.+2050   	; 0x8d8 <init_oled>
      d6:	98 d5       	rcall	.+2864   	; 0xc08 <init_uart>
    init_uart();
      d8:	0e 94 02 09 	call	0x1204	; 0x1204 <init_adc>
    init_adc();
      dc:	9e d4       	rcall	.+2364   	; 0xa1a <init_interaction>
      de:	c3 d1       	rcall	.+902    	; 0x466 <init_i2c>
    init_interaction();
      e0:	71 d2       	rcall	.+1250   	; 0x5c4 <init_motor>
      e2:	1e d1       	rcall	.+572    	; 0x320 <get_eeprom_data>
    init_i2c();
      e4:	78 94       	sei
      e6:	08 98       	cbi	0x01, 0	; 1
    init_motor();
      e8:	2b 98       	cbi	0x05, 3	; 5
      ea:	13 b8       	out	0x03, r1	; 3
    get_eeprom_data();  // EEPROM으로 부터 데이터 획득
      ec:	10 b8       	out	0x00, r1	; 0
      ee:	80 e0       	ldi	r24, 0x00	; 0
    
    
    sei();
      f0:	48 d4       	rcall	.+2192   	; 0x982 <draw_edge>
    DDRA &= ~(1<<GAMEBOARD_DETEC_PIN);
      f2:	80 91 a1 03 	lds	r24, 0x03A1
    PORTB &=0xf7;
    PINB = 0x00;
      f6:	87 ff       	sbrs	r24, 7
    PINA = 0x00;
      f8:	07 c0       	rjmp	.+14     	; 0x108 <main+0x52>
    
    draw_edge(0);
      fa:	40 e2       	ldi	r20, 0x20	; 32
      fc:	e4 2e       	mov	r14, r20
      fe:	42 e0       	ldi	r20, 0x02	; 2

    // P/N 인증 과정
    while(1)
    {
        //P/N 미인증 상태일경우
        if((s_flag&CONFIRM)!=CONFIRM)
     100:	f4 2e       	mov	r15, r20
     102:	c0 e0       	ldi	r28, 0x00	; 0
     104:	d0 e0       	ldi	r29, 0x00	; 0
     106:	28 c0       	rjmp	.+80     	; 0x158 <main+0xa2>
     108:	30 ec       	ldi	r19, 0xC0	; 192
     10a:	e3 2e       	mov	r14, r19
     10c:	32 e0       	ldi	r19, 0x02	; 2
     10e:	f3 2e       	mov	r15, r19
     110:	c0 e0       	ldi	r28, 0x00	; 0
     112:	d0 e0       	ldi	r29, 0x00	; 0
     114:	ae 01       	movw	r20, r28
     116:	42 5e       	subi	r20, 0xE2	; 226
     118:	5f 4f       	sbci	r21, 0xFF	; 255
     11a:	87 01       	movw	r16, r14
     11c:	22 e0       	ldi	r18, 0x02	; 2
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	60 e1       	ldi	r22, 0x10	; 16
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	88 e0       	ldi	r24, 0x08	; 8
     126:	90 e0       	ldi	r25, 0x00	; 0
        {
            // 제품등록 문구 출력
            for(k=0;k<6;k++)
                draw_char(8,16,30+(k*10),2,font_register[k]);
     128:	b0 d2       	rcall	.+1376   	; 0x68a <draw_char>
     12a:	2a 96       	adiw	r28, 0x0a	; 10
     12c:	20 e1       	ldi	r18, 0x10	; 16
     12e:	e2 0e       	add	r14, r18
     130:	f1 1c       	adc	r15, r1
     132:	cc 33       	cpi	r28, 0x3C	; 60
     134:	d1 05       	cpc	r29, r1
     136:	71 f7       	brne	.-36     	; 0x114 <main+0x5e>
     138:	80 91 a1 03 	lds	r24, 0x03A1
     13c:	87 fd       	sbrc	r24, 7
     13e:	dd cf       	rjmp	.-70     	; 0xfa <main+0x44>
     140:	8f e0       	ldi	r24, 0x0F	; 15
    {
        //P/N 미인증 상태일경우
        if((s_flag&CONFIRM)!=CONFIRM)
        {
            // 제품등록 문구 출력
            for(k=0;k<6;k++)
     142:	97 e2       	ldi	r25, 0x27	; 39
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <main+0x8e>
     148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x94>
     14a:	00 00       	nop
     14c:	80 91 a1 03 	lds	r24, 0x03A1
     150:	81 ff       	sbrs	r24, 1
     152:	f2 cf       	rjmp	.-28     	; 0x138 <main+0x82>
     154:	a3 d6       	rcall	.+3398   	; 0xe9c <proccess_instruction>
     156:	f0 cf       	rjmp	.-32     	; 0x138 <main+0x82>
     158:	ae 01       	movw	r20, r28
     15a:	42 5e       	subi	r20, 0xE2	; 226
            
            //인증완료될때까지 대기
            while(!(s_flag&CONFIRM))
            {
                _delay_ms(2);
                if(s_flag&GET_INSTRUCTION)
     15c:	5f 4f       	sbci	r21, 0xFF	; 255
     15e:	87 01       	movw	r16, r14
     160:	22 e0       	ldi	r18, 0x02	; 2
     162:	30 e0       	ldi	r19, 0x00	; 0
                    proccess_instruction();
     164:	60 e1       	ldi	r22, 0x10	; 16
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	88 e0       	ldi	r24, 0x08	; 8
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	8e d2       	rcall	.+1308   	; 0x68a <draw_char>
     16e:	2a 96       	adiw	r28, 0x0a	; 10
        //P/N 인증 상태일경우
        else break;
    }
    
    for(k=0;k<6;k++)
        draw_char(8,16,30+(k*10),2,font_money[k]);
     170:	90 e1       	ldi	r25, 0x10	; 16
     172:	e9 0e       	add	r14, r25
     174:	f1 1c       	adc	r15, r1
     176:	cc 33       	cpi	r28, 0x3C	; 60
     178:	d1 05       	cpc	r29, r1
     17a:	71 f7       	brne	.-36     	; 0x158 <main+0xa2>
     17c:	60 91 ae 03 	lds	r22, 0x03AE
     180:	70 91 af 03 	lds	r23, 0x03AF
     184:	80 91 b0 03 	lds	r24, 0x03B0
     188:	90 91 b1 03 	lds	r25, 0x03B1
        
        //P/N 인증 상태일경우
        else break;
    }
    
    for(k=0;k<6;k++)
     18c:	11 d3       	rcall	.+1570   	; 0x7b0 <write_num_to_oled>
     18e:	80 91 a1 03 	lds	r24, 0x03A1
        draw_char(8,16,30+(k*10),2,font_money[k]);
    
    write_num_to_oled(current_money);
     192:	83 ff       	sbrs	r24, 3
     194:	1a c0       	rjmp	.+52     	; 0x1ca <main+0x114>
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	f4 d3       	rcall	.+2024   	; 0x982 <draw_edge>
     19a:	20 91 ae 03 	lds	r18, 0x03AE
     19e:	30 91 af 03 	lds	r19, 0x03AF
     1a2:	40 91 b0 03 	lds	r20, 0x03B0
    
    
    if(s_flag&ISGOAL)
     1a6:	50 91 b1 03 	lds	r21, 0x03B1
     1aa:	a0 e7       	ldi	r26, 0x70	; 112
    {
        draw_edge(1);
     1ac:	b0 e0       	ldi	r27, 0x00	; 0
     1ae:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__muluhisi3>
        percent = (current_money*112)/goal_money;
     1b2:	20 91 a7 03 	lds	r18, 0x03A7
     1b6:	30 91 a8 03 	lds	r19, 0x03A8
     1ba:	40 91 a9 03 	lds	r20, 0x03A9
     1be:	50 91 aa 03 	lds	r21, 0x03AA
     1c2:	0e 94 88 0a 	call	0x1510	; 0x1510 <__udivmodsi4>
     1c6:	82 2f       	mov	r24, r18
     1c8:	c1 d3       	rcall	.+1922   	; 0x94c <draw_percentage>
     1ca:	93 e6       	ldi	r25, 0x63	; 99
     1cc:	b9 2e       	mov	r11, r25
     1ce:	c1 2c       	mov	r12, r1
     1d0:	24 e0       	ldi	r18, 0x04	; 4
     1d2:	d2 2e       	mov	r13, r18
     1d4:	80 91 a1 03 	lds	r24, 0x03A1
     1d8:	80 ff       	sbrs	r24, 0
     1da:	07 c0       	rjmp	.+14     	; 0x1ea <main+0x134>
     1dc:	0e 94 14 09 	call	0x1228	; 0x1228 <proccess_coin>
        draw_percentage(percent);
     1e0:	d0 92 ac 03 	sts	0x03AC, r13
        else if(s_flag&ISGAME)
        {
            unsigned isconnected;
            
            // 게임보드 연결확인 패킷 전송
            UDR1 = ISCONNECTED;
     1e4:	c0 92 ab 03 	sts	0x03AB, r12
    while(1)
    {
        if(s_flag&INPUT_COIN)
        {
            proccess_coin();
            adc_max=1024;
     1e8:	f5 cf       	rjmp	.-22     	; 0x1d4 <main+0x11e>
     1ea:	81 ff       	sbrs	r24, 1
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <main+0x13c>
        draw_percentage(percent);
    }

    while(1)
    {
        if(s_flag&INPUT_COIN)
     1ee:	56 d6       	rcall	.+3244   	; 0xe9c <proccess_instruction>
     1f0:	f1 cf       	rjmp	.-30     	; 0x1d4 <main+0x11e>
     1f2:	18 99       	sbic	0x03, 0	; 3
     1f4:	32 c0       	rjmp	.+100    	; 0x25a <main+0x1a4>
        {
            proccess_coin();
     1f6:	22 e4       	ldi	r18, 0x42	; 66
     1f8:	2a 95       	dec	r18
            adc_max=1024;
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x142>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x148>
     1fe:	20 91 78 00 	lds	r18, 0x0078
     202:	30 91 79 00 	lds	r19, 0x0079
        }
        
        // 명령어가 전송되었을경우
        else if(s_flag&GET_INSTRUCTION)
     206:	80 91 ab 03 	lds	r24, 0x03AB
            proccess_instruction();
     20a:	90 91 ac 03 	lds	r25, 0x03AC
     20e:	28 17       	cp	r18, r24
     210:	39 07       	cpc	r19, r25
     212:	48 f4       	brcc	.+18     	; 0x226 <main+0x170>
     214:	80 91 78 00 	lds	r24, 0x0078
     218:	90 91 79 00 	lds	r25, 0x0079
        {
            while(1)
            {
               
                _delay_us(10);
                if(ADC < adc_max)
     21c:	90 93 ac 03 	sts	0x03AC, r25
     220:	80 93 ab 03 	sts	0x03AB, r24
     224:	04 c0       	rjmp	.+8      	; 0x22e <main+0x178>
     226:	86 e0       	ldi	r24, 0x06	; 6
     228:	8a 95       	dec	r24
     22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x172>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x178>
     22e:	18 9b       	sbis	0x03, 0	; 3
     230:	0f c0       	rjmp	.+30     	; 0x250 <main+0x19a>
     232:	92 e4       	ldi	r25, 0x42	; 66
     234:	9a 95       	dec	r25
     236:	f1 f7       	brne	.-4      	; 0x234 <main+0x17e>
     238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x184>
     23a:	80 91 ab 03 	lds	r24, 0x03AB
     23e:	90 91 ac 03 	lds	r25, 0x03AC
     242:	88 3e       	cpi	r24, 0xE8	; 232
     244:	93 40       	sbci	r25, 0x03	; 3
     246:	30 f6       	brcc	.-116    	; 0x1d4 <main+0x11e>
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	01 d1       	rcall	.+514    	; 0x450 <change_bit_val>
     24e:	c2 cf       	rjmp	.-124    	; 0x1d4 <main+0x11e>
     250:	86 e0       	ldi	r24, 0x06	; 6
     252:	8a 95       	dec	r24
     254:	f1 f7       	brne	.-4      	; 0x252 <main+0x19c>
                
                // 동전인식이 종료 & 처리
                if(PINB & 0x01)
                {
                    _delay_us(10);
                    if(adc_max<1000)
     256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x1a2>
     258:	ce cf       	rjmp	.-100    	; 0x1f6 <main+0x140>
     25a:	84 ff       	sbrs	r24, 4
     25c:	bb cf       	rjmp	.-138    	; 0x1d4 <main+0x11e>
     25e:	b0 92 ce 00 	sts	0x00CE, r11
     262:	80 91 c8 00 	lds	r24, 0x00C8
                    {
                        change_bit_val(INPUT_COIN,1);
     266:	85 ff       	sbrs	r24, 5
     268:	fc cf       	rjmp	.-8      	; 0x262 <main+0x1ac>
     26a:	87 ea       	ldi	r24, 0xA7	; 167
     26c:	91 e6       	ldi	r25, 0x61	; 97
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <main+0x1b8>
     272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x1be>
     274:	00 00       	nop
     276:	c1 d4       	rcall	.+2434   	; 0xbfa <check_gameboard_connect>
                    _delay_us(1);
            }
        }
        
        // 게임보드와 연결되었던 상태일경우
        else if(s_flag&ISGAME)
     278:	81 11       	cpse	r24, r1
     27a:	ac cf       	rjmp	.-168    	; 0x1d4 <main+0x11e>
        {
            unsigned isconnected;
            
            // 게임보드 연결확인 패킷 전송
            UDR1 = ISCONNECTED;
     27c:	00 e0       	ldi	r16, 0x00	; 0
     27e:	22 e0       	ldi	r18, 0x02	; 2
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	45 e0       	ldi	r20, 0x05	; 5
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	6c e2       	ldi	r22, 0x2C	; 44
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	87 e7       	ldi	r24, 0x77	; 119
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	45 d2       	rcall	.+1162   	; 0x71a <draw_data>
     290:	80 91 a1 03 	lds	r24, 0x03A1
            while(!(UCSR1A&(1<<UDRE1)));
            
            _delay_ms(5);

            if(!check_gameboard_connect())
     294:	83 ff       	sbrs	r24, 3
     296:	1a c0       	rjmp	.+52     	; 0x2cc <main+0x216>
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	73 d3       	rcall	.+1766   	; 0x982 <draw_edge>
            {

                // 이전에 그려져있던 그림 클리어
                draw_data(119,44,5,2,0x00);
     29c:	20 91 ae 03 	lds	r18, 0x03AE
     2a0:	30 91 af 03 	lds	r19, 0x03AF
     2a4:	40 91 b0 03 	lds	r20, 0x03B0
     2a8:	50 91 b1 03 	lds	r21, 0x03B1
     2ac:	a0 e7       	ldi	r26, 0x70	; 112
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__muluhisi3>
                if(s_flag&ISGOAL)
     2b4:	20 91 a7 03 	lds	r18, 0x03A7
     2b8:	30 91 a8 03 	lds	r19, 0x03A8
                {
                    draw_edge(1);
     2bc:	40 91 a9 03 	lds	r20, 0x03A9
                    percent = (current_money*112)/goal_money;
     2c0:	50 91 aa 03 	lds	r21, 0x03AA
     2c4:	0e 94 88 0a 	call	0x1510	; 0x1510 <__udivmodsi4>
     2c8:	82 2f       	mov	r24, r18
     2ca:	40 d3       	rcall	.+1664   	; 0x94c <draw_percentage>
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	e8 2e       	mov	r14, r24
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	f8 2e       	mov	r15, r24
     2d4:	c0 e0       	ldi	r28, 0x00	; 0
     2d6:	d0 e0       	ldi	r29, 0x00	; 0
     2d8:	ae 01       	movw	r20, r28
     2da:	42 5e       	subi	r20, 0xE2	; 226
     2dc:	5f 4f       	sbci	r21, 0xFF	; 255
     2de:	87 01       	movw	r16, r14
     2e0:	22 e0       	ldi	r18, 0x02	; 2
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	60 e1       	ldi	r22, 0x10	; 16
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	88 e0       	ldi	r24, 0x08	; 8
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	ce d1       	rcall	.+924    	; 0x68a <draw_char>
                    draw_percentage(percent);
     2ee:	2a 96       	adiw	r28, 0x0a	; 10
     2f0:	90 e1       	ldi	r25, 0x10	; 16

    // P/N 인증 과정
    while(1)
    {
        //P/N 미인증 상태일경우
        if((s_flag&CONFIRM)!=CONFIRM)
     2f2:	e9 0e       	add	r14, r25
     2f4:	f1 1c       	adc	r15, r1
     2f6:	cc 33       	cpi	r28, 0x3C	; 60
     2f8:	d1 05       	cpc	r29, r1
     2fa:	71 f7       	brne	.-36     	; 0x2d8 <main+0x222>
     2fc:	60 91 ae 03 	lds	r22, 0x03AE
     300:	70 91 af 03 	lds	r23, 0x03AF
                    percent = (current_money*112)/goal_money;
                    draw_percentage(percent);
                }
                
                for(k=0;k<6;k++)
                    draw_char(8,16,30+(k*10),2,font_money[k]);
     304:	80 91 b0 03 	lds	r24, 0x03B0
     308:	90 91 b1 03 	lds	r25, 0x03B1
     30c:	51 d2       	rcall	.+1186   	; 0x7b0 <write_num_to_oled>
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	80 e1       	ldi	r24, 0x10	; 16
     312:	9e d0       	rcall	.+316    	; 0x450 <change_bit_val>
     314:	41 e9       	ldi	r20, 0x91	; 145
     316:	53 e0       	ldi	r21, 0x03	; 3
     318:	61 e0       	ldi	r22, 0x01	; 1
     31a:	83 e1       	ldi	r24, 0x13	; 19
     31c:	90 d4       	rcall	.+2336   	; 0xc3e <make_packet>
                    draw_edge(1);
                    percent = (current_money*112)/goal_money;
                    draw_percentage(percent);
                }
                
                for(k=0;k<6;k++)
     31e:	5a cf       	rjmp	.-332    	; 0x1d4 <main+0x11e>

00000320 <get_eeprom_data>:
#include "eeprom.h"
#include "flowControl.h"
#include "coinCheck.h"

void get_eeprom_data()
{
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__eerd_byte_m324p>
     000 0000 ~ 000 0000	 (s_flag)데이터
     */
    
    // s_flag 데이터를 eeprom으로 부터 가져온다
    // 인증여부 & 쌓여있는 데이터유무를 알기위해서
    s_flag = eeprom_read(S_FLAG_ADDRESS);
     32c:	80 93 a1 03 	sts	0x03A1, r24
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     330:	87 e0       	ldi	r24, 0x07	; 7
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__eerd_byte_m324p>
    // 인증여부 & 쌓여있는 데이터유무를 알기위해서
    s_flag = eeprom_read(S_FLAG_ADDRESS);
    //eeprom_write(S_FLAG_ADDRESS,0x00);
    
    // 블루투스 미연결때 저장되어있던 동전갯수를 eeprom으로 부터 얻는다
    saved_coin_cnt  = eeprom_read(UNCONNECT_COIN_CNT_ADD);
     338:	80 93 bc 03 	sts	0x03BC, r24
    last_coin_add   = UNCONNECT_COIN_DATA_ADD + (saved_coin_cnt * 6);
     33c:	98 2f       	mov	r25, r24
     33e:	99 0f       	add	r25, r25
     340:	89 0f       	add	r24, r25
     342:	88 0f       	add	r24, r24
     344:	88 5f       	subi	r24, 0xF8	; 248
     346:	80 93 bd 03 	sts	0x03BD, r24
     34a:	c3 e0       	ldi	r28, 0x03	; 3
     34c:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     34e:	ce 01       	movw	r24, r28
     350:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__eerd_byte_m324p>
    
    // eeprom에 저장되어있는 목표금액을 가져온다
    for( i=0;i<3;i++ )
    {
        tmp = eeprom_read(GOALMONEY_ADDRESS-i)&0xff;
        goal_money = goal_money|tmp;
     354:	40 91 a7 03 	lds	r20, 0x03A7
     358:	50 91 a8 03 	lds	r21, 0x03A8
     35c:	60 91 a9 03 	lds	r22, 0x03A9
     360:	70 91 aa 03 	lds	r23, 0x03AA
     364:	48 2b       	or	r20, r24
     366:	40 93 a7 03 	sts	0x03A7, r20
     36a:	50 93 a8 03 	sts	0x03A8, r21
     36e:	60 93 a9 03 	sts	0x03A9, r22
     372:	70 93 aa 03 	sts	0x03AA, r23
     376:	8f e0       	ldi	r24, 0x0F	; 15
     378:	97 e2       	ldi	r25, 0x27	; 39
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <get_eeprom_data+0x5a>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <get_eeprom_data+0x60>
     380:	00 00       	nop
        _delay_ms(2);
        if( i < 2 )
     382:	c1 30       	cpi	r28, 0x01	; 1
     384:	a1 f0       	breq	.+40     	; 0x3ae <get_eeprom_data+0x8e>
            goal_money = goal_money<<8;
     386:	80 91 a7 03 	lds	r24, 0x03A7
     38a:	90 91 a8 03 	lds	r25, 0x03A8
     38e:	a0 91 a9 03 	lds	r26, 0x03A9
     392:	b0 91 aa 03 	lds	r27, 0x03AA
     396:	ba 2f       	mov	r27, r26
     398:	a9 2f       	mov	r26, r25
     39a:	98 2f       	mov	r25, r24
     39c:	88 27       	eor	r24, r24
     39e:	80 93 a7 03 	sts	0x03A7, r24
     3a2:	90 93 a8 03 	sts	0x03A8, r25
     3a6:	a0 93 a9 03 	sts	0x03A9, r26
     3aa:	b0 93 aa 03 	sts	0x03AA, r27
     3ae:	21 97       	sbiw	r28, 0x01	; 1
    // 블루투스 미연결때 저장되어있던 동전갯수를 eeprom으로 부터 얻는다
    saved_coin_cnt  = eeprom_read(UNCONNECT_COIN_CNT_ADD);
    last_coin_add   = UNCONNECT_COIN_DATA_ADD + (saved_coin_cnt * 6);
    
    // eeprom에 저장되어있는 목표금액을 가져온다
    for( i=0;i<3;i++ )
     3b0:	71 f6       	brne	.-100    	; 0x34e <get_eeprom_data+0x2e>
            goal_money = goal_money<<8;
    }

    //eeprom에서 획득한 s_flag의 데이터가 0xff라는 의미는
    //default 값이라는 의미이기 때문에 초기화 해준다.
    if(s_flag == DEFAULT_DATA)
     3b2:	80 91 a1 03 	lds	r24, 0x03A1
     3b6:	8f 3f       	cpi	r24, 0xFF	; 255
     3b8:	81 f4       	brne	.+32     	; 0x3da <get_eeprom_data+0xba>
}

void eeprom_write(int ad,unsigned char val)
{
    //EEPROM 원하는 주소에 데이터 저장
    eeprom_write_byte(ad,val);
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	ce 01       	movw	r24, r28
     3be:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__eewr_byte_m324p>
     3c2:	e7 e8       	ldi	r30, 0x87	; 135
     3c4:	f3 e1       	ldi	r31, 0x13	; 19
     3c6:	31 97       	sbiw	r30, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <get_eeprom_data+0xa6>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <get_eeprom_data+0xac>
     3cc:	00 00       	nop
     3ce:	21 96       	adiw	r28, 0x01	; 1
    //eeprom에서 획득한 s_flag의 데이터가 0xff라는 의미는
    //default 값이라는 의미이기 때문에 초기화 해준다.
    if(s_flag == DEFAULT_DATA)
    {
        char i;
        for( i=0;i<10;i++ )
     3d0:	ca 30       	cpi	r28, 0x0A	; 10
     3d2:	d1 05       	cpc	r29, r1
     3d4:	91 f7       	brne	.-28     	; 0x3ba <get_eeprom_data+0x9a>
        {
            eeprom_write(i,INIT_DATA);
            _delay_ms(1);
        }
        s_flag = INIT_DATA;
     3d6:	10 92 a1 03 	sts	0x03A1, r1
    }
    
    // 나중에 변경해야함 -> CONFIRM에서 ISDATA로
    if((s_flag&CONFIRM)==CONFIRM)
     3da:	80 91 a1 03 	lds	r24, 0x03A1
     3de:	87 ff       	sbrs	r24, 7
     3e0:	2e c0       	rjmp	.+92     	; 0x43e <get_eeprom_data+0x11e>
     3e2:	c6 e0       	ldi	r28, 0x06	; 6
     3e4:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     3e6:	ce 01       	movw	r24, r28
     3e8:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__eerd_byte_m324p>
     3ec:	e7 e8       	ldi	r30, 0x87	; 135
     3ee:	f3 e1       	ldi	r31, 0x13	; 19
     3f0:	31 97       	sbiw	r30, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <get_eeprom_data+0xd0>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <get_eeprom_data+0xd6>
     3f6:	00 00       	nop
        for( ; ; )
        {
            tmp = eeprom_read(CURRENT_MONEY-i);
            _delay_ms(1);

            current_money = current_money | tmp;
     3f8:	40 91 ae 03 	lds	r20, 0x03AE
     3fc:	50 91 af 03 	lds	r21, 0x03AF
     400:	60 91 b0 03 	lds	r22, 0x03B0
     404:	70 91 b1 03 	lds	r23, 0x03B1
     408:	48 2b       	or	r20, r24
     40a:	21 97       	sbiw	r28, 0x01	; 1
            if( i==2 )
     40c:	c3 30       	cpi	r28, 0x03	; 3
     40e:	d1 05       	cpc	r29, r1
     410:	49 f4       	brne	.+18     	; 0x424 <get_eeprom_data+0x104>
        for( ; ; )
        {
            tmp = eeprom_read(CURRENT_MONEY-i);
            _delay_ms(1);

            current_money = current_money | tmp;
     412:	40 93 ae 03 	sts	0x03AE, r20
     416:	50 93 af 03 	sts	0x03AF, r21
     41a:	60 93 b0 03 	sts	0x03B0, r22
     41e:	70 93 b1 03 	sts	0x03B1, r23
     422:	0d c0       	rjmp	.+26     	; 0x43e <get_eeprom_data+0x11e>
            if( i==2 )
                break;
            
            i++;
            current_money = current_money<<8;
     424:	76 2f       	mov	r23, r22
     426:	65 2f       	mov	r22, r21
     428:	54 2f       	mov	r21, r20
     42a:	44 27       	eor	r20, r20
     42c:	40 93 ae 03 	sts	0x03AE, r20
     430:	50 93 af 03 	sts	0x03AF, r21
     434:	60 93 b0 03 	sts	0x03B0, r22
     438:	70 93 b1 03 	sts	0x03B1, r23
        }
     43c:	d4 cf       	rjmp	.-88     	; 0x3e6 <get_eeprom_data+0xc6>
    }
}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <eeprom_write>:

void eeprom_write(int ad,unsigned char val)
{
    //EEPROM 원하는 주소에 데이터 저장
    eeprom_write_byte(ad,val);
     444:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__eewr_byte_m324p>
     448:	08 95       	ret

0000044a <eeprom_read>:
unsigned char eeprom_read(int ad)
{
    //EEPROM 원하는 주소에 데이터 호출
    unsigned char val;
    
    val = eeprom_read_byte(ad);
     44a:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__eerd_byte_m324p>
    return val;
}
     44e:	08 95       	ret

00000450 <change_bit_val>:
#include "flowControl.h"

void change_bit_val(unsigned char position, unsigned char value)
{
     450:	90 91 a1 03 	lds	r25, 0x03A1
    //값을 1로 set 하는 경우
    if(value)
     454:	66 23       	and	r22, r22
     456:	11 f0       	breq	.+4      	; 0x45c <change_bit_val+0xc>
        s_flag|=position;
     458:	89 2b       	or	r24, r25
     45a:	02 c0       	rjmp	.+4      	; 0x460 <change_bit_val+0x10>
    //값을 0으로 clear하는 경우
    else
        s_flag&=~(position);
     45c:	80 95       	com	r24
     45e:	89 23       	and	r24, r25
     460:	80 93 a1 03 	sts	0x03A1, r24
     464:	08 95       	ret

00000466 <init_i2c>:
#include "i2c.h"

void init_i2c()
{
    TWCR |= 1<<TWEN; // TWI 사용 ON
     466:	ec eb       	ldi	r30, 0xBC	; 188
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	84 60       	ori	r24, 0x04	; 4
     46e:	80 83       	st	Z, r24
    TWSR  = 0x00;    // TWI 분주비 1로 set
     470:	10 92 b9 00 	sts	0x00B9, r1
    TWBR |= 0x12;    // 전송 속도 144
     474:	e8 eb       	ldi	r30, 0xB8	; 184
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	82 61       	ori	r24, 0x12	; 18
     47c:	80 83       	st	Z, r24
     47e:	08 95       	ret

00000480 <i2c_write>:
     * dev_add : 슬레이브 디바이스 어드레스
     * reg_add : 디바이스 레지스트 어드레스
     * data    : 슬레이브 레지스트에 셋할 데이터
     */
    
    TWCR |= 1<<TWINT | 1<< TWSTA | 1<<TWEN;  // start 비트
     480:	90 91 bc 00 	lds	r25, 0x00BC
     484:	94 6a       	ori	r25, 0xA4	; 164
     486:	90 93 bc 00 	sts	0x00BC, r25
    while (!(TWCR&0x80));           // START 처리가 완료됨을 대기
     48a:	90 91 bc 00 	lds	r25, 0x00BC
     48e:	97 ff       	sbrs	r25, 7
     490:	fc cf       	rjmp	.-8      	; 0x48a <i2c_write+0xa>
    
    TWDR = dev_add<<1;              // 슬레이브 디바이스 어드레스설정 : 최하단 비트 0 : write
     492:	88 0f       	add	r24, r24
     494:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = 1<<TWINT| 1<<TWEN;
     498:	84 e8       	ldi	r24, 0x84	; 132
     49a:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR&0x80));
     49e:	80 91 bc 00 	lds	r24, 0x00BC
     4a2:	87 ff       	sbrs	r24, 7
     4a4:	fc cf       	rjmp	.-8      	; 0x49e <i2c_write+0x1e>
    
    TWDR = reg_add;                 // 쓰고자할 레지스터 주소 설정
     4a6:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = 1<<TWINT| 1<<TWEN;
     4aa:	84 e8       	ldi	r24, 0x84	; 132
     4ac:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR&0x80));
     4b0:	80 91 bc 00 	lds	r24, 0x00BC
     4b4:	87 ff       	sbrs	r24, 7
     4b6:	fc cf       	rjmp	.-8      	; 0x4b0 <i2c_write+0x30>
    
    TWDR = data;   // 전송 할  데이터
     4b8:	40 93 bb 00 	sts	0x00BB, r20
    TWCR = 1<<TWINT| 1<<TWEN;
     4bc:	84 e8       	ldi	r24, 0x84	; 132
     4be:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR&0x80));
     4c2:	80 91 bc 00 	lds	r24, 0x00BC
     4c6:	87 ff       	sbrs	r24, 7
     4c8:	fc cf       	rjmp	.-8      	; 0x4c2 <i2c_write+0x42>
    
    TWCR = 1<<TWINT | 1<< TWSTO| 1<<TWEN;  //stop 비트
     4ca:	84 e9       	ldi	r24, 0x94	; 148
     4cc:	80 93 bc 00 	sts	0x00BC, r24
     4d0:	08 95       	ret

000004d2 <set_rtc>:
    return get_time_vale(data);
}

void set_rtc(unsigned char min,unsigned char hour,unsigned char date,
              unsigned char month,unsigned char year)
{
     4d2:	a1 e0       	ldi	r26, 0x01	; 1
     4d4:	b0 e0       	ldi	r27, 0x00	; 0
     4d6:	ef e6       	ldi	r30, 0x6F	; 111
     4d8:	f2 e0       	ldi	r31, 0x02	; 2
     4da:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__prologue_saves__+0x18>
     4de:	18 2f       	mov	r17, r24
     4e0:	f6 2e       	mov	r15, r22
     4e2:	e4 2e       	mov	r14, r20
    i2c_write( DS1307_ADD , 0x00,   0);
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	88 e6       	ldi	r24, 0x68	; 104
     4ea:	29 83       	std	Y+1, r18	; 0x01
     4ec:	c9 df       	rcall	.-110    	; 0x480 <i2c_write>
     4ee:	41 2f       	mov	r20, r17
    i2c_write( DS1307_ADD ,MINUTE,  min );  // 분
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	88 e6       	ldi	r24, 0x68	; 104
     4f4:	c5 df       	rcall	.-118    	; 0x480 <i2c_write>
     4f6:	4f 2d       	mov	r20, r15
     4f8:	62 e0       	ldi	r22, 0x02	; 2
    i2c_write( DS1307_ADD ,HOUR,    hour );  // 시간
     4fa:	88 e6       	ldi	r24, 0x68	; 104
     4fc:	c1 df       	rcall	.-126    	; 0x480 <i2c_write>
     4fe:	4e 2d       	mov	r20, r14
     500:	64 e0       	ldi	r22, 0x04	; 4
     502:	88 e6       	ldi	r24, 0x68	; 104
    i2c_write( DS1307_ADD ,DATE,    date );  // 일
     504:	bd df       	rcall	.-134    	; 0x480 <i2c_write>
     506:	29 81       	ldd	r18, Y+1	; 0x01
     508:	42 2f       	mov	r20, r18
     50a:	65 e0       	ldi	r22, 0x05	; 5
     50c:	88 e6       	ldi	r24, 0x68	; 104
    i2c_write( DS1307_ADD ,MONTH,   month);   // 월
     50e:	b8 df       	rcall	.-144    	; 0x480 <i2c_write>
     510:	40 2f       	mov	r20, r16
     512:	66 e0       	ldi	r22, 0x06	; 6
     514:	88 e6       	ldi	r24, 0x68	; 104
     516:	b4 df       	rcall	.-152    	; 0x480 <i2c_write>
     518:	21 96       	adiw	r28, 0x01	; 1
    i2c_write( DS1307_ADD ,YEAR,    year );  // 년
     51a:	e6 e0       	ldi	r30, 0x06	; 6
     51c:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__epilogue_restores__+0x18>

00000520 <get_time_vale>:
    unsigned char real_data;
    char upper_num;
    char lower_num;
    
    lower_num = data & 0x0f;   // 하단부 데이터
    upper_num = (data>>4 &0x0f)*10; // 상단부 데이터
     520:	98 2f       	mov	r25, r24
     522:	92 95       	swap	r25
     524:	9f 70       	andi	r25, 0x0F	; 15
    
    unsigned char real_data;
    char upper_num;
    char lower_num;
    
    lower_num = data & 0x0f;   // 하단부 데이터
     526:	8f 70       	andi	r24, 0x0F	; 15
    upper_num = (data>>4 &0x0f)*10; // 상단부 데이터
    real_data = upper_num + lower_num;
    
    return real_data;
     528:	2a e0       	ldi	r18, 0x0A	; 10
     52a:	92 9f       	mul	r25, r18
     52c:	80 0d       	add	r24, r0
     52e:	11 24       	eor	r1, r1
     530:	08 95       	ret

00000532 <i2c_read>:
     * reg_add : 디바이스 레지스트 어드레스
    */
    
    char data=0;
    
    TWCR |= 1<<TWINT | 1<< TWSTA | 1<<TWEN;   // start 비트
     532:	90 91 bc 00 	lds	r25, 0x00BC
     536:	94 6a       	ori	r25, 0xA4	; 164
     538:	90 93 bc 00 	sts	0x00BC, r25
    while(!(TWCR&0x80));            // TWINT 가 1값으로 클리어 될때까지 기다림
     53c:	90 91 bc 00 	lds	r25, 0x00BC
     540:	97 ff       	sbrs	r25, 7
     542:	fc cf       	rjmp	.-8      	; 0x53c <i2c_read+0xa>
    
    TWDR = dev_add<<1;              // 슬레이브 디바이스 어드레스설정 : 최하단 비트 0 : write
     544:	98 2f       	mov	r25, r24
     546:	99 0f       	add	r25, r25
     548:	90 93 bb 00 	sts	0x00BB, r25
    TWCR = 1<<TWINT| 1<<TWEN;
     54c:	94 e8       	ldi	r25, 0x84	; 132
     54e:	90 93 bc 00 	sts	0x00BC, r25
    while(!(TWCR&0x80));
     552:	90 91 bc 00 	lds	r25, 0x00BC
     556:	97 ff       	sbrs	r25, 7
     558:	fc cf       	rjmp	.-8      	; 0x552 <i2c_read+0x20>
    
    TWDR = reg_add;                 // 읽고자 할 레지스터 주소를 셋
     55a:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = 1<<TWINT| 1<<TWEN;
     55e:	94 e8       	ldi	r25, 0x84	; 132
     560:	90 93 bc 00 	sts	0x00BC, r25
    while(!(TWCR&0x80));
     564:	90 91 bc 00 	lds	r25, 0x00BC
     568:	97 ff       	sbrs	r25, 7
     56a:	fc cf       	rjmp	.-8      	; 0x564 <i2c_read+0x32>
    
    TWCR |= 1<<TWINT | 1<< TWSTA| 1<<TWEN;
     56c:	90 91 bc 00 	lds	r25, 0x00BC
     570:	94 6a       	ori	r25, 0xA4	; 164
     572:	90 93 bc 00 	sts	0x00BC, r25
    while(!(TWCR&0x80));
     576:	90 91 bc 00 	lds	r25, 0x00BC
     57a:	97 ff       	sbrs	r25, 7
     57c:	fc cf       	rjmp	.-8      	; 0x576 <i2c_read+0x44>
    
    TWDR = dev_add<<1 | 0x01;       // 데이터를 읽겠다는 주소 셋
     57e:	88 0f       	add	r24, r24
     580:	81 60       	ori	r24, 0x01	; 1
     582:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = 1<<TWINT| 1<<TWEN;
     586:	84 e8       	ldi	r24, 0x84	; 132
     588:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR&0x80));
     58c:	80 91 bc 00 	lds	r24, 0x00BC
     590:	87 ff       	sbrs	r24, 7
     592:	fc cf       	rjmp	.-8      	; 0x58c <i2c_read+0x5a>
    
    TWCR = 1<<TWINT| 1<<TWEN;
     594:	84 e8       	ldi	r24, 0x84	; 132
     596:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR&0x80));
     59a:	80 91 bc 00 	lds	r24, 0x00BC
     59e:	87 ff       	sbrs	r24, 7
     5a0:	fc cf       	rjmp	.-8      	; 0x59a <i2c_read+0x68>
    
    data=TWDR;
     5a2:	80 91 bb 00 	lds	r24, 0x00BB
    TWCR = 1<<TWINT | 1<< TWSTO| 1<<TWEN;  //stop 비트
     5a6:	94 e9       	ldi	r25, 0x94	; 148
     5a8:	90 93 bc 00 	sts	0x00BC, r25
    
    return get_time_vale(data);
     5ac:	b9 cf       	rjmp	.-142    	; 0x520 <get_time_vale>

000005ae <__vector_16>:
#include "motor.h"

ISR(TIMER0_COMPA_vect)
{
     5ae:	1f 92       	push	r1
     5b0:	0f 92       	push	r0
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	0f 92       	push	r0
     5b6:	11 24       	eor	r1, r1
    PORTD |= 0x10;
     5b8:	5c 9a       	sbi	0x0b, 4	; 11
}
     5ba:	0f 90       	pop	r0
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	0f 90       	pop	r0
     5c0:	1f 90       	pop	r1
     5c2:	18 95       	reti

000005c4 <init_motor>:
    }
}

void init_motor()
{
    TCCR0A = (1<<WGM01)|(1<<WGM00);
     5c4:	83 e0       	ldi	r24, 0x03	; 3
     5c6:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1<<CS02)|(1<<CS00);
     5c8:	95 e0       	ldi	r25, 0x05	; 5
     5ca:	95 bd       	out	0x25, r25	; 37
    TIMSK0 = (1<<OCIE0A)|(1<<TOIE0);
     5cc:	80 93 6e 00 	sts	0x006E, r24
    
    // 잠금 해제
    OCR0A  = 226;
     5d0:	82 ee       	ldi	r24, 0xE2	; 226
     5d2:	87 bd       	out	0x27, r24	; 39
     5d4:	08 95       	ret

000005d6 <lock_or_unlock>:
}

void lock_or_unlock( unsigned char lock )
{
    // 잠금 명령일경우
    if(lock == 'l')
     5d6:	8c 36       	cpi	r24, 0x6C	; 108
     5d8:	11 f4       	brne	.+4      	; 0x5de <lock_or_unlock+0x8>
        OCR0A = 244;
     5da:	84 ef       	ldi	r24, 0xF4	; 244
     5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <lock_or_unlock+0xa>
    // 잠금 해제 명령일경우
    else
        OCR0A = 226;
     5de:	82 ee       	ldi	r24, 0xE2	; 226
     5e0:	87 bd       	out	0x27, r24	; 39
     5e2:	08 95       	ret

000005e4 <shutdown_motor_voltage>:
}

void shutdown_motor_voltage()
{
    // pwm 발생 인터럽트 해제
    TIMSK0 = (0<<OCIE0A)|(0<<TOIE0);
     5e4:	10 92 6e 00 	sts	0x006E, r1
    PORTD&=~0x10;
     5e8:	5c 98       	cbi	0x0b, 4	; 11
     5ea:	08 95       	ret

000005ec <__vector_18>:
{
    PORTD |= 0x10;
}

ISR(TIMER0_OVF_vect)
{
     5ec:	1f 92       	push	r1
     5ee:	0f 92       	push	r0
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	0f 92       	push	r0
     5f4:	11 24       	eor	r1, r1
     5f6:	2f 93       	push	r18
     5f8:	3f 93       	push	r19
     5fa:	4f 93       	push	r20
     5fc:	5f 93       	push	r21
     5fe:	6f 93       	push	r22
     600:	7f 93       	push	r23
     602:	8f 93       	push	r24
     604:	9f 93       	push	r25
     606:	af 93       	push	r26
     608:	bf 93       	push	r27
     60a:	ef 93       	push	r30
     60c:	ff 93       	push	r31
    static char cnt;
    cnt++;
     60e:	80 91 9c 03 	lds	r24, 0x039C
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	80 93 9c 03 	sts	0x039C, r24
    PORTD &= ~0x10;
     618:	5c 98       	cbi	0x0b, 4	; 11
    TCNT0 = 0x00;
     61a:	16 bc       	out	0x26, r1	; 38
    
    // 최소 모터 동작 주기후 모터 전원해제
    if(cnt==70)
     61c:	80 91 9c 03 	lds	r24, 0x039C
     620:	86 34       	cpi	r24, 0x46	; 70
     622:	19 f4       	brne	.+6      	; 0x62a <__vector_18+0x3e>
    {
        shutdown_motor_voltage();
     624:	df df       	rcall	.-66     	; 0x5e4 <shutdown_motor_voltage>
     626:	10 92 9c 03 	sts	0x039C, r1
        cnt = 0;
     62a:	ff 91       	pop	r31
    }
}
     62c:	ef 91       	pop	r30
     62e:	bf 91       	pop	r27
     630:	af 91       	pop	r26
     632:	9f 91       	pop	r25
     634:	8f 91       	pop	r24
     636:	7f 91       	pop	r23
     638:	6f 91       	pop	r22
     63a:	5f 91       	pop	r21
     63c:	4f 91       	pop	r20
     63e:	3f 91       	pop	r19
     640:	2f 91       	pop	r18
     642:	0f 90       	pop	r0
     644:	0f be       	out	0x3f, r0	; 63
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <turnon_motor_voltage>:
}

void turnon_motor_voltage()
{
    // pwm 발생 인터럽트 설정
    TIMSK0 = (1<<OCIE0A)|(1<<TOIE0);
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	80 93 6e 00 	sts	0x006E, r24
    PORTD|=0x10;
     652:	5c 9a       	sbi	0x0b, 4	; 11
     654:	08 95       	ret

00000656 <init_SPI_master>:
    {0x07,0x07,0x07,0x07,0x07,0xFF,0xFF,0xFF,0xE0,0xE0,0xE0,0xE0,0xE0,0xFF,0xFF,0xFF}  /*"]"*/
};

void init_SPI_master(void)
{
    SPI_DDR |= ((1 << SS) | (1 << SCK) | (1 << MOSI) | (1<<DC)|(1<<RST));
     656:	84 b1       	in	r24, 0x04	; 4
     658:	8c 6b       	ori	r24, 0xBC	; 188
     65a:	84 b9       	out	0x04, r24	; 4
    SPI_PORT|= (1 << SS)|(1<<RST);
     65c:	85 b1       	in	r24, 0x05	; 5
     65e:	84 61       	ori	r24, 0x14	; 20
     660:	85 b9       	out	0x05, r24	; 5
    SPCR     = ((1 << SPE)|(1 << MSTR)|(1 << SPR0)|(0<<SPR1)); // 16M/16=1Mhz
     662:	81 e5       	ldi	r24, 0x51	; 81
     664:	8c bd       	out	0x2c, r24	; 44
     666:	08 95       	ret

00000668 <write_oled>:

}

void write_oled(unsigned char data)
{
    SPI_PORT &=~(1<<SS);
     668:	2c 98       	cbi	0x05, 4	; 5
    SPI_PORT &=~(1<<DC);
     66a:	2b 98       	cbi	0x05, 3	; 5
    SPDR = data;
     66c:	8e bd       	out	0x2e, r24	; 46
    
    while(!(SPSR&(1<<SPIF)));
     66e:	0d b4       	in	r0, 0x2d	; 45
     670:	07 fe       	sbrs	r0, 7
     672:	fd cf       	rjmp	.-6      	; 0x66e <write_oled+0x6>
    SPI_PORT|=(1<<SS);
     674:	2c 9a       	sbi	0x05, 4	; 5
     676:	08 95       	ret

00000678 <write_oled_data>:
}

void write_oled_data(unsigned char data)
{
    SPI_PORT &=~(1<<SS);
     678:	2c 98       	cbi	0x05, 4	; 5
    SPI_PORT |= (1<<DC);
     67a:	2b 9a       	sbi	0x05, 3	; 5
    SPDR = data;
     67c:	8e bd       	out	0x2e, r24	; 46
    
    while(!(SPSR&(1<<SPIF)));
     67e:	0d b4       	in	r0, 0x2d	; 45
     680:	07 fe       	sbrs	r0, 7
     682:	fd cf       	rjmp	.-6      	; 0x67e <write_oled_data+0x6>
    SPI_PORT|=(1<<SS);
     684:	2c 9a       	sbi	0x05, 4	; 5
    SPI_PORT &=~(1<<DC);
     686:	2b 98       	cbi	0x05, 3	; 5
     688:	08 95       	ret

0000068a <draw_char>:
{
    draw_data(128,64,0,0,0x00);
}

void draw_char(int w, int h, int x, int y, char *data)
{
     68a:	a0 e0       	ldi	r26, 0x00	; 0
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	ea e4       	ldi	r30, 0x4A	; 74
     690:	f3 e0       	ldi	r31, 0x03	; 3
     692:	63 c7       	rjmp	.+3782   	; 0x155a <__prologue_saves__+0x6>
     694:	5c 01       	movw	r10, r24
     696:	fb 01       	movw	r30, r22
	 * data : 그려질 데이터 배열
	 */
	
	unsigned char i,j;
	unsigned char idx	= 0 ;
	unsigned height		= h/8; 	    //OLED는 한 페이지당 8픽셀을 차지
     698:	77 fd       	sbrc	r23, 7
     69a:	37 96       	adiw	r30, 0x07	; 7
     69c:	ef 01       	movw	r28, r30
     69e:	83 e0       	ldi	r24, 0x03	; 3
     6a0:	d5 95       	asr	r29
     6a2:	c7 95       	ror	r28
     6a4:	8a 95       	dec	r24
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <draw_char+0x16>
     6a8:	69 01       	movw	r12, r18
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
     6aa:	80 eb       	ldi	r24, 0xB0	; 176
     6ac:	c8 0e       	add	r12, r24
     6ae:	d1 1c       	adc	r13, r1
     6b0:	7a 01       	movw	r14, r20
	unsigned startX     = x+5;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
     6b2:	95 e0       	ldi	r25, 0x05	; 5
     6b4:	e9 0e       	add	r14, r25
     6b6:	f1 1c       	adc	r15, r1
     6b8:	47 01       	movw	r8, r14
	unsigned endX		= startX + w;
     6ba:	8a 0c       	add	r8, r10
     6bc:	9b 1c       	adc	r9, r11
     6be:	61 2c       	mov	r6, r1
	 * y : 그려질 글자의 시작 y 좌표 (0~7)
	 * data : 그려질 데이터 배열
	 */
	
	unsigned char i,j;
	unsigned char idx	= 0 ;
     6c0:	71 2c       	mov	r7, r1
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
	unsigned startX     = x+5;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
	unsigned endX		= startX + w;
    

	for( i=0;i<height;i++ )
     6c2:	87 2d       	mov	r24, r7
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	8c 17       	cp	r24, r28
     6c8:	9d 07       	cpc	r25, r29
     6ca:	18 f5       	brcc	.+70     	; 0x712 <draw_char+0x88>
     6cc:	87 2d       	mov	r24, r7
	{
		write_oled(startY+i);
     6ce:	8c 0d       	add	r24, r12
     6d0:	cb df       	rcall	.-106    	; 0x668 <write_oled>
     6d2:	81 e2       	ldi	r24, 0x21	; 33
     6d4:	c9 df       	rcall	.-110    	; 0x668 <write_oled>
		write_oled(CHANGE_COLUM);
     6d6:	8e 2d       	mov	r24, r14
     6d8:	c7 df       	rcall	.-114    	; 0x668 <write_oled>
     6da:	88 2d       	mov	r24, r8
		write_oled(startX);
     6dc:	c5 df       	rcall	.-118    	; 0x668 <write_oled>
     6de:	86 2d       	mov	r24, r6
     6e0:	28 2f       	mov	r18, r24
		write_oled(endX);
     6e2:	26 19       	sub	r18, r6
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	2a 15       	cp	r18, r10

		for( j=0;j<w;j++ )
     6e8:	3b 05       	cpc	r19, r11
     6ea:	84 f4       	brge	.+32     	; 0x70c <draw_char+0x82>
     6ec:	55 24       	eor	r5, r5
     6ee:	53 94       	inc	r5
     6f0:	58 0e       	add	r5, r24
     6f2:	f8 01       	movw	r30, r16
     6f4:	e8 0f       	add	r30, r24
		{
			write_oled_data(data[idx++]);
     6f6:	f1 1d       	adc	r31, r1
     6f8:	80 81       	ld	r24, Z
     6fa:	be df       	rcall	.-132    	; 0x678 <write_oled_data>
     6fc:	83 ef       	ldi	r24, 0xF3	; 243
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <draw_char+0x76>
     704:	00 c0       	rjmp	.+0      	; 0x706 <draw_char+0x7c>
     706:	00 00       	nop
     708:	85 2d       	mov	r24, r5
     70a:	ea cf       	rjmp	.-44     	; 0x6e0 <draw_char+0x56>
     70c:	73 94       	inc	r7
     70e:	68 2e       	mov	r6, r24
     710:	d8 cf       	rjmp	.-80     	; 0x6c2 <draw_char+0x38>
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	ef e0       	ldi	r30, 0x0F	; 15
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
	unsigned startX     = x+5;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
	unsigned endX		= startX + w;
    

	for( i=0;i<height;i++ )
     718:	3c c7       	rjmp	.+3704   	; 0x1592 <__epilogue_restores__+0x6>

0000071a <draw_data>:
        }
    }
}

void draw_data(int w, int h, int x, int y, char data)
{
     71a:	a0 e0       	ldi	r26, 0x00	; 0
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	e2 e9       	ldi	r30, 0x92	; 146
     720:	f3 e0       	ldi	r31, 0x03	; 3
     722:	1e c7       	rjmp	.+3644   	; 0x1560 <__prologue_saves__+0xc>
     724:	7c 01       	movw	r14, r24
     726:	6a 01       	movw	r12, r20
     728:	fb 01       	movw	r30, r22
	 * y : 그려질 글자의 시작 y 좌표 (0~7)
	 * data : 그려질 데이터
	 */
	
	unsigned char i,j;
	unsigned height		= h/8; 	    //OLED는 한 페이지당 8픽셀을 차지
     72a:	77 fd       	sbrc	r23, 7
     72c:	37 96       	adiw	r30, 0x07	; 7
     72e:	ef 01       	movw	r28, r30
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	d5 95       	asr	r29
     734:	c7 95       	ror	r28
     736:	8a 95       	dec	r24
     738:	e1 f7       	brne	.-8      	; 0x732 <draw_data+0x18>
     73a:	59 01       	movw	r10, r18
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
     73c:	80 eb       	ldi	r24, 0xB0	; 176
     73e:	a8 0e       	add	r10, r24
     740:	b1 1c       	adc	r11, r1
     742:	91 2c       	mov	r9, r1
	unsigned startX     = x;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
	unsigned endX		= startX + w;
    
	for( i=0;i<height;i++ )
     744:	b6 01       	movw	r22, r12
	{
		write_oled(startY+i);
		write_oled(CHANGE_COLUM);
		write_oled(startX);
		write_oled(endX-1);
     746:	6e 0d       	add	r22, r14
     748:	7f 1d       	adc	r23, r15
     74a:	1f ef       	ldi	r17, 0xFF	; 255
     74c:	16 0f       	add	r17, r22
     74e:	29 2d       	mov	r18, r9
	unsigned height		= h/8; 	    //OLED는 한 페이지당 8픽셀을 차지
	unsigned startY		= CHANGE_PAGE + y; //0xB0은 OLED의 어떤 페이지를 선택하는지에대한 명령어이다
	unsigned startX     = x;	    //+1을하는 이유는 가독성을 높이기 위해서이다(이전글자로부터1픽셀 띄어서 )
	unsigned endX		= startX + w;
    
	for( i=0;i<height;i++ )
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	2c 17       	cp	r18, r28
     754:	3d 07       	cpc	r19, r29
     756:	d8 f4       	brcc	.+54     	; 0x78e <draw_data+0x74>
     758:	89 2d       	mov	r24, r9
	{
		write_oled(startY+i);
     75a:	8a 0d       	add	r24, r10
     75c:	85 df       	rcall	.-246    	; 0x668 <write_oled>
     75e:	81 e2       	ldi	r24, 0x21	; 33
     760:	83 df       	rcall	.-250    	; 0x668 <write_oled>
		write_oled(CHANGE_COLUM);
     762:	8c 2d       	mov	r24, r12
     764:	81 df       	rcall	.-254    	; 0x668 <write_oled>
     766:	81 2f       	mov	r24, r17
		write_oled(startX);
     768:	7f df       	rcall	.-258    	; 0x668 <write_oled>
     76a:	81 2c       	mov	r8, r1
     76c:	88 2d       	mov	r24, r8
		write_oled(endX-1);
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	8e 15       	cp	r24, r14
     772:	9f 05       	cpc	r25, r15
        
		for(j=0;j<w;j++)
     774:	54 f4       	brge	.+20     	; 0x78a <draw_data+0x70>
     776:	80 2f       	mov	r24, r16
     778:	7f df       	rcall	.-258    	; 0x678 <write_oled_data>
     77a:	83 ef       	ldi	r24, 0xF3	; 243
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <draw_data+0x64>
     782:	00 c0       	rjmp	.+0      	; 0x784 <draw_data+0x6a>
     784:	00 00       	nop
     786:	83 94       	inc	r8
     788:	f1 cf       	rjmp	.-30     	; 0x76c <draw_data+0x52>
     78a:	93 94       	inc	r9
     78c:	e0 cf       	rjmp	.-64     	; 0x74e <draw_data+0x34>
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	ec e0       	ldi	r30, 0x0C	; 12
     794:	01 c7       	rjmp	.+3586   	; 0x1598 <__epilogue_restores__+0xc>

00000796 <clear_oled>:
    SPI_PORT|=(1<<SS);
    SPI_PORT &=~(1<<DC);
}

void clear_oled(void)
{
     796:	0f 93       	push	r16
    draw_data(128,64,0,0,0x00);
     798:	00 e0       	ldi	r16, 0x00	; 0
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	60 e4       	ldi	r22, 0x40	; 64
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	80 e8       	ldi	r24, 0x80	; 128
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	b7 df       	rcall	.-146    	; 0x71a <draw_data>
     7ac:	0f 91       	pop	r16
}
     7ae:	08 95       	ret

000007b0 <write_num_to_oled>:
		}
	}
}

void write_num_to_oled(unsigned long current_money)
{
     7b0:	aa e0       	ldi	r26, 0x0A	; 10
     7b2:	b0 e0       	ldi	r27, 0x00	; 0
     7b4:	ed ed       	ldi	r30, 0xDD	; 221
     7b6:	f3 e0       	ldi	r31, 0x03	; 3
     7b8:	cf c6       	rjmp	.+3486   	; 0x1558 <__prologue_saves__+0x4>
     7ba:	4b 01       	movw	r8, r22
     7bc:	5c 01       	movw	r10, r24
     7be:	d1 2c       	mov	r13, r1
	unsigned char curr_coin[10];
	unsigned char position 	= 0;
     7c0:	2a e0       	ldi	r18, 0x0A	; 10
	unsigned char startX = 0;

	cu_co = current_money;
	while(1)
	{
		curr_coin[position++] = cu_co%10;
     7c2:	42 2e       	mov	r4, r18
     7c4:	51 2c       	mov	r5, r1
     7c6:	61 2c       	mov	r6, r1
     7c8:	71 2c       	mov	r7, r1
     7ca:	ee 24       	eor	r14, r14
     7cc:	e3 94       	inc	r14
     7ce:	ed 0c       	add	r14, r13
     7d0:	01 e0       	ldi	r16, 0x01	; 1
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	0c 0f       	add	r16, r28
     7d6:	1d 1f       	adc	r17, r29
     7d8:	0d 0d       	add	r16, r13
     7da:	11 1d       	adc	r17, r1
     7dc:	a3 01       	movw	r20, r6
     7de:	92 01       	movw	r18, r4
     7e0:	97 d6       	rcall	.+3374   	; 0x1510 <__udivmodsi4>
     7e2:	f8 01       	movw	r30, r16
     7e4:	60 83       	st	Z, r22
     7e6:	b9 01       	movw	r22, r18
     7e8:	ca 01       	movw	r24, r20
     7ea:	ef e0       	ldi	r30, 0x0F	; 15
     7ec:	f7 e2       	ldi	r31, 0x27	; 39
     7ee:	31 97       	sbiw	r30, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <write_num_to_oled+0x3e>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <write_num_to_oled+0x44>
     7f4:	00 00       	nop
     7f6:	61 15       	cp	r22, r1
     7f8:	71 05       	cpc	r23, r1
		cu_co = cu_co/10;

        _delay_ms(2);
		if(cu_co == 0)
     7fa:	81 05       	cpc	r24, r1
     7fc:	91 05       	cpc	r25, r1
     7fe:	11 f0       	breq	.+4      	; 0x804 <write_num_to_oled+0x54>
     800:	de 2c       	mov	r13, r14
     802:	e3 cf       	rjmp	.-58     	; 0x7ca <write_num_to_oled+0x1a>
	unsigned char startX = 0;

	cu_co = current_money;
	while(1)
	{
		curr_coin[position++] = cu_co%10;
     804:	cd 2c       	mov	r12, r13
     806:	f1 2c       	mov	r15, r1
     808:	e0 94       	com	r14
        _delay_ms(2);
		if(cu_co == 0)
			break;
	}

	startX = (110 - ((position+1) * 8))/2 ; // 출력할 숫자를 가운데 정렬하기위한
     80a:	f0 94       	com	r15
     80c:	8e 2d       	mov	r24, r14
     80e:	88 0f       	add	r24, r24
     810:	88 0f       	add	r24, r24
     812:	17 e3       	ldi	r17, 0x37	; 55
     814:	18 0f       	add	r17, r24
     816:	00 e0       	ldi	r16, 0x00	; 0
     818:	25 e0       	ldi	r18, 0x05	; 5
    
    if(current_money==0)
        draw_data(100,16,5,5,0x00);
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	81 14       	cp	r8, r1
     81e:	91 04       	cpc	r9, r1
			break;
	}

	startX = (110 - ((position+1) * 8))/2 ; // 출력할 숫자를 가운데 정렬하기위한
    
    if(current_money==0)
     820:	a1 04       	cpc	r10, r1
     822:	b1 04       	cpc	r11, r1
     824:	39 f4       	brne	.+14     	; 0x834 <write_num_to_oled+0x84>
     826:	45 e0       	ldi	r20, 0x05	; 5
     828:	50 e0       	ldi	r21, 0x00	; 0
        draw_data(100,16,5,5,0x00);
     82a:	60 e1       	ldi	r22, 0x10	; 16
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	84 e6       	ldi	r24, 0x64	; 100
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	06 c0       	rjmp	.+12     	; 0x840 <write_num_to_oled+0x90>
     834:	44 e0       	ldi	r20, 0x04	; 4
     836:	50 e0       	ldi	r21, 0x00	; 0
        
    else
        draw_data(120,16,4,5,0x00);
     838:	60 e1       	ldi	r22, 0x10	; 16
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	88 e7       	ldi	r24, 0x78	; 120
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	6c df       	rcall	.-296    	; 0x71a <draw_data>
     842:	a1 2c       	mov	r10, r1
     844:	b1 2c       	mov	r11, r1
     846:	e1 2e       	mov	r14, r17
//        draw_data(8*(position+1),16,startX,5,0x00); // 그려진부분에 겹처서 그리는것을 방지하기위해 그리고자하는 부분에 그려져있던것을 클리어

	for( position = position-1 ; position > 0 ; position-- )
     848:	f1 2c       	mov	r15, r1
     84a:	dd 20       	and	r13, r13
     84c:	e1 f0       	breq	.+56     	; 0x886 <write_num_to_oled+0xd6>
     84e:	e1 e0       	ldi	r30, 0x01	; 1
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	ec 0f       	add	r30, r28
   		draw_char(8,16,startX+(i++*10),5,font_num[curr_coin[position]]);
     854:	fd 1f       	adc	r31, r29
     856:	ed 0d       	add	r30, r13
     858:	f1 1d       	adc	r31, r1
     85a:	00 81       	ld	r16, Z
     85c:	f0 e1       	ldi	r31, 0x10	; 16
     85e:	0f 9f       	mul	r16, r31
     860:	80 01       	movw	r16, r0
     862:	11 24       	eor	r1, r1
     864:	00 5a       	subi	r16, 0xA0	; 160
     866:	1e 4f       	sbci	r17, 0xFE	; 254
     868:	a5 01       	movw	r20, r10
     86a:	4e 0d       	add	r20, r14
     86c:	5f 1d       	adc	r21, r15
     86e:	25 e0       	ldi	r18, 0x05	; 5
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	60 e1       	ldi	r22, 0x10	; 16
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	88 e0       	ldi	r24, 0x08	; 8
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	07 df       	rcall	.-498    	; 0x68a <draw_char>
     87c:	da 94       	dec	r13
     87e:	8a e0       	ldi	r24, 0x0A	; 10
     880:	a8 0e       	add	r10, r24
     882:	b1 1c       	adc	r11, r1
        
    else
        draw_data(120,16,4,5,0x00);
//        draw_data(8*(position+1),16,startX,5,0x00); // 그려진부분에 겹처서 그리는것을 방지하기위해 그리고자하는 부분에 그려져있던것을 클리어

	for( position = position-1 ; position > 0 ; position-- )
     884:	e2 cf       	rjmp	.-60     	; 0x84a <write_num_to_oled+0x9a>
     886:	dd 24       	eor	r13, r13
     888:	d3 94       	inc	r13
     88a:	dc 0c       	add	r13, r12
     88c:	09 81       	ldd	r16, Y+1	; 0x01
   		draw_char(8,16,startX+(i++*10),5,font_num[curr_coin[position]]);
	
   	draw_char(8,16,startX+(i++*10),5,font_num[curr_coin[0]]);
     88e:	e0 e1       	ldi	r30, 0x10	; 16
     890:	0e 9f       	mul	r16, r30
     892:	80 01       	movw	r16, r0
     894:	11 24       	eor	r1, r1
     896:	00 5a       	subi	r16, 0xA0	; 160
     898:	1e 4f       	sbci	r17, 0xFE	; 254
     89a:	a7 01       	movw	r20, r14
     89c:	fa e0       	ldi	r31, 0x0A	; 10
     89e:	cf 9e       	mul	r12, r31
     8a0:	40 0d       	add	r20, r0
     8a2:	51 1d       	adc	r21, r1
     8a4:	11 24       	eor	r1, r1
     8a6:	25 e0       	ldi	r18, 0x05	; 5
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	60 e1       	ldi	r22, 0x10	; 16
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	88 e0       	ldi	r24, 0x08	; 8
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	eb de       	rcall	.-554    	; 0x68a <draw_char>
     8b4:	a7 01       	movw	r20, r14
     8b6:	8a e0       	ldi	r24, 0x0A	; 10
     8b8:	d8 9e       	mul	r13, r24
     8ba:	40 0d       	add	r20, r0
     8bc:	51 1d       	adc	r21, r1
   	draw_char(8,16,startX+(i++*10),5,font_num[10]); //글자 "원"출력
     8be:	11 24       	eor	r1, r1
     8c0:	00 e0       	ldi	r16, 0x00	; 0
     8c2:	12 e0       	ldi	r17, 0x02	; 2
     8c4:	25 e0       	ldi	r18, 0x05	; 5
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	60 e1       	ldi	r22, 0x10	; 16
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	88 e0       	ldi	r24, 0x08	; 8
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	dc de       	rcall	.-584    	; 0x68a <draw_char>
     8d2:	2a 96       	adiw	r28, 0x0a	; 10
     8d4:	e0 e1       	ldi	r30, 0x10	; 16
     8d6:	5c c6       	rjmp	.+3256   	; 0x1590 <__epilogue_restores__+0x4>

000008d8 <init_oled>:
}

void init_oled(void)
{
    init_SPI_master(); //init SPI
     8d8:	be de       	rcall	.-644    	; 0x656 <init_SPI_master>
     8da:	8e ea       	ldi	r24, 0xAE	; 174
    
    write_oled(0xAE); //display off
     8dc:	c5 de       	rcall	.-630    	; 0x668 <write_oled>
     8de:	80 e2       	ldi	r24, 0x20	; 32
     8e0:	c3 de       	rcall	.-634    	; 0x668 <write_oled>
    write_oled(0x20); //Set Memory Addressing Mode
     8e2:	82 e0       	ldi	r24, 0x02	; 2
     8e4:	c1 de       	rcall	.-638    	; 0x668 <write_oled>
     8e6:	80 eb       	ldi	r24, 0xB0	; 176
    write_oled(0x02); //00);Horizontal Addressing Mode;01);Vertical Addressing Mode;10);Page Addressing Mode (RESET);11);Invalid
     8e8:	bf de       	rcall	.-642    	; 0x668 <write_oled>
     8ea:	88 ec       	ldi	r24, 0xC8	; 200
     8ec:	bd de       	rcall	.-646    	; 0x668 <write_oled>
    write_oled(CHANGE_PAGE); //Set Page Start Address for Page Addressing Mode);0-7
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	bb de       	rcall	.-650    	; 0x668 <write_oled>
     8f2:	80 e1       	ldi	r24, 0x10	; 16
    write_oled(0xc8); //Set COM Output Scan Direction
     8f4:	b9 de       	rcall	.-654    	; 0x668 <write_oled>
     8f6:	80 e4       	ldi	r24, 0x40	; 64
     8f8:	b7 de       	rcall	.-658    	; 0x668 <write_oled>
    write_oled(0x00); //---set low column address
     8fa:	81 e8       	ldi	r24, 0x81	; 129
     8fc:	b5 de       	rcall	.-662    	; 0x668 <write_oled>
     8fe:	8f e7       	ldi	r24, 0x7F	; 127
    write_oled(0x10); //---set high column address
     900:	b3 de       	rcall	.-666    	; 0x668 <write_oled>
     902:	81 ea       	ldi	r24, 0xA1	; 161
     904:	b1 de       	rcall	.-670    	; 0x668 <write_oled>
    write_oled(0x40); //--set start line address
     906:	88 ea       	ldi	r24, 0xA8	; 168
     908:	af de       	rcall	.-674    	; 0x668 <write_oled>
     90a:	8f e3       	ldi	r24, 0x3F	; 63
    write_oled(0x81); //--set contrast control register
     90c:	ad de       	rcall	.-678    	; 0x668 <write_oled>
     90e:	84 ea       	ldi	r24, 0xA4	; 164
     910:	ab de       	rcall	.-682    	; 0x668 <write_oled>
    write_oled(0x7f);
     912:	83 ed       	ldi	r24, 0xD3	; 211
     914:	a9 de       	rcall	.-686    	; 0x668 <write_oled>
     916:	80 e0       	ldi	r24, 0x00	; 0
    write_oled(0xa1); //--set segment re-map 0 to 127
     918:	a7 de       	rcall	.-690    	; 0x668 <write_oled>
     91a:	85 ed       	ldi	r24, 0xD5	; 213
     91c:	a5 de       	rcall	.-694    	; 0x668 <write_oled>
    write_oled(0xa8); //--set multiplex ratio(1 to 64)
     91e:	80 ef       	ldi	r24, 0xF0	; 240
     920:	a3 de       	rcall	.-698    	; 0x668 <write_oled>
     922:	89 ed       	ldi	r24, 0xD9	; 217
    write_oled(0x3F);
     924:	a1 de       	rcall	.-702    	; 0x668 <write_oled>
     926:	82 e2       	ldi	r24, 0x22	; 34
     928:	9f de       	rcall	.-706    	; 0x668 <write_oled>
    write_oled(0xa4); //0xa4);Output follows RAM content;0xa5);Output ignores RAM content
     92a:	8a ed       	ldi	r24, 0xDA	; 218
     92c:	9d de       	rcall	.-710    	; 0x668 <write_oled>
     92e:	82 e1       	ldi	r24, 0x12	; 18
    write_oled(0xd3); //-set display offset
     930:	9b de       	rcall	.-714    	; 0x668 <write_oled>
     932:	8b ed       	ldi	r24, 0xDB	; 219
     934:	99 de       	rcall	.-718    	; 0x668 <write_oled>
    write_oled(0x00); //-not offset
     936:	80 e2       	ldi	r24, 0x20	; 32
     938:	97 de       	rcall	.-722    	; 0x668 <write_oled>
     93a:	8d e8       	ldi	r24, 0x8D	; 141
    write_oled(0xd5); //--set display clock divide ratio/oscillator frequency
     93c:	95 de       	rcall	.-726    	; 0x668 <write_oled>
     93e:	84 e1       	ldi	r24, 0x14	; 20
     940:	93 de       	rcall	.-730    	; 0x668 <write_oled>
    write_oled(0xf0); //--set divide ratio
     942:	86 ea       	ldi	r24, 0xA6	; 166
     944:	91 de       	rcall	.-734    	; 0x668 <write_oled>
     946:	8f ea       	ldi	r24, 0xAF	; 175
    write_oled(0xd9); //--set pre-charge period
     948:	8f de       	rcall	.-738    	; 0x668 <write_oled>
     94a:	25 cf       	rjmp	.-438    	; 0x796 <clear_oled>

0000094c <draw_percentage>:
    
    clear_oled(); // 화면 클리어
}

void draw_percentage(unsigned char percent)
{
     94c:	0f 93       	push	r16
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
    
    draw_data(percent,8,7,0,0xCf);
     952:	c8 2f       	mov	r28, r24
     954:	d0 e0       	ldi	r29, 0x00	; 0
     956:	0f ec       	ldi	r16, 0xCF	; 207
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	47 e0       	ldi	r20, 0x07	; 7
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	68 e0       	ldi	r22, 0x08	; 8
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	ce 01       	movw	r24, r28
     966:	d9 de       	rcall	.-590    	; 0x71a <draw_data>
     968:	03 ef       	ldi	r16, 0xF3	; 243
    draw_data(percent,8,7,1,0xf3);
     96a:	21 e0       	ldi	r18, 0x01	; 1
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	47 e0       	ldi	r20, 0x07	; 7
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	68 e0       	ldi	r22, 0x08	; 8
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	ce 01       	movw	r24, r28
     978:	d0 de       	rcall	.-608    	; 0x71a <draw_data>
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
}
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <draw_edge>:


void draw_edge(unsigned char ispercent)
{
     982:	0f 93       	push	r16
     984:	cf 93       	push	r28
     986:	c8 2f       	mov	r28, r24
    draw_data(128,8,0,0,0x0f);
     988:	0f e0       	ldi	r16, 0x0F	; 15
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	68 e0       	ldi	r22, 0x08	; 8
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	80 e8       	ldi	r24, 0x80	; 128
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	bf de       	rcall	.-642    	; 0x71a <draw_data>
     99c:	cc 23       	and	r28, r28
    if(ispercent)
     99e:	e9 f0       	breq	.+58     	; 0x9da <draw_edge+0x58>
     9a0:	00 ef       	ldi	r16, 0xF0	; 240
    {
        draw_data(128,8,0,1,0xf0);
     9a2:	21 e0       	ldi	r18, 0x01	; 1
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	68 e0       	ldi	r22, 0x08	; 8
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	b3 de       	rcall	.-666    	; 0x71a <draw_data>
     9b4:	0f e0       	ldi	r16, 0x0F	; 15
     9b6:	22 e0       	ldi	r18, 0x02	; 2
        draw_data(26,8,4,2,0x0f);
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	44 e0       	ldi	r20, 0x04	; 4
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	68 e0       	ldi	r22, 0x08	; 8
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	8a e1       	ldi	r24, 0x1A	; 26
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	a9 de       	rcall	.-686    	; 0x71a <draw_data>
     9c8:	22 e0       	ldi	r18, 0x02	; 2
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	42 e6       	ldi	r20, 0x62	; 98
        draw_data(26,8,98,2,0x0f);
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	68 e0       	ldi	r22, 0x08	; 8
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	8a e1       	ldi	r24, 0x1A	; 26
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 de       	rcall	.-704    	; 0x71a <draw_data>
     9da:	0f ef       	ldi	r16, 0xFF	; 255
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	40 e0       	ldi	r20, 0x00	; 0
    }
    draw_data(4, 64,0,0,0xff);
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	60 e4       	ldi	r22, 0x40	; 64
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	84 e0       	ldi	r24, 0x04	; 4
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	96 de       	rcall	.-724    	; 0x71a <draw_data>
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	4c e7       	ldi	r20, 0x7C	; 124
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	60 e4       	ldi	r22, 0x40	; 64
    draw_data(4, 64,124,0,0xff);
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	84 e0       	ldi	r24, 0x04	; 4
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	8d de       	rcall	.-742    	; 0x71a <draw_data>
     a00:	00 ef       	ldi	r16, 0xF0	; 240
     a02:	28 e0       	ldi	r18, 0x08	; 8
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	44 e0       	ldi	r20, 0x04	; 4
     a08:	50 e0       	ldi	r21, 0x00	; 0
     a0a:	68 e0       	ldi	r22, 0x08	; 8
    draw_data(120,8,4,8,0xf0);
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	88 e7       	ldi	r24, 0x78	; 120
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	83 de       	rcall	.-762    	; 0x71a <draw_data>
     a14:	cf 91       	pop	r28
     a16:	0f 91       	pop	r16
     a18:	08 95       	ret

00000a1a <init_interaction>:
#include "interaction.h"

void init_interaction(void)
{
    // for led interacition
    DDRD  |= (1<<RED_LED)|(1<<BLUE_LED)|(1<<GREEN_LED);
     a1a:	8a b1       	in	r24, 0x0a	; 10
     a1c:	80 6e       	ori	r24, 0xE0	; 224
     a1e:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1<<RED_LED)|(1<<BLUE_LED)|(1<<GREEN_LED);
     a20:	8b b1       	in	r24, 0x0b	; 11
     a22:	80 6e       	ori	r24, 0xE0	; 224
     a24:	8b b9       	out	0x0b, r24	; 11

    // for melody
    DDRA |= (1<<MELODY);
     a26:	0a 9a       	sbi	0x01, 2	; 1
     a28:	08 95       	ret

00000a2a <melody_interaction>:
}

void melody_interaction()
{
    PORTA |= (1<<MELODY);
     a2a:	12 9a       	sbi	0x02, 2	; 2
     a2c:	08 95       	ret

00000a2e <led_interaction>:
}

void led_interaction(unsigned color, unsigned int time, unsigned int speed, unsigned int threshold)
{
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	da 01       	movw	r26, r20
    while(j!= (time*5))
    {
        for(i=0;i<speed;i++)
        {
            if(i<threshold)
                PORTD &= ~(1<<color);
     a34:	e1 e0       	ldi	r30, 0x01	; 1
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	af 01       	movw	r20, r30
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <led_interaction+0x12>
     a3c:	44 0f       	add	r20, r20
     a3e:	55 1f       	adc	r21, r21
     a40:	8a 95       	dec	r24
     a42:	e2 f7       	brpl	.-8      	; 0xa3c <led_interaction+0xe>
     a44:	ca 01       	movw	r24, r20
     a46:	40 95       	com	r20
    int i = 0;
    int j = 0;
    
    unsigned char flag = 0;
    
    while(j!= (time*5))
     a48:	95 e0       	ldi	r25, 0x05	; 5
     a4a:	96 9f       	mul	r25, r22
     a4c:	e0 01       	movw	r28, r0
     a4e:	97 9f       	mul	r25, r23
     a50:	d0 0d       	add	r29, r0
     a52:	11 24       	eor	r1, r1
     */
     
    int i = 0;
    int j = 0;
    
    unsigned char flag = 0;
     a54:	90 e0       	ldi	r25, 0x00	; 0
     speed      : led 최대로 밝아질때까지의 속도 지정
     threshold  : led 최대 밝기 지정
     */
     
    int i = 0;
    int j = 0;
     a56:	e0 e0       	ldi	r30, 0x00	; 0
     a58:	f0 e0       	ldi	r31, 0x00	; 0
    
    unsigned char flag = 0;
    
    while(j!= (time*5))
     a5a:	ec 17       	cp	r30, r28
     a5c:	fd 07       	cpc	r31, r29
     a5e:	09 f1       	breq	.+66     	; 0xaa2 <led_interaction+0x74>
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e0       	ldi	r23, 0x00	; 0
    {
        for(i=0;i<speed;i++)
     a64:	6a 17       	cp	r22, r26
     a66:	7b 07       	cpc	r23, r27
     a68:	59 f0       	breq	.+22     	; 0xa80 <led_interaction+0x52>
        {
            if(i<threshold)
                PORTD &= ~(1<<color);
     a6a:	5b b1       	in	r21, 0x0b	; 11
    
    while(j!= (time*5))
    {
        for(i=0;i<speed;i++)
        {
            if(i<threshold)
     a6c:	62 17       	cp	r22, r18
     a6e:	73 07       	cpc	r23, r19
     a70:	10 f4       	brcc	.+4      	; 0xa76 <led_interaction+0x48>
                PORTD &= ~(1<<color);
     a72:	54 23       	and	r21, r20
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <led_interaction+0x4a>
            else
                PORTD |= (1<<color);
     a76:	58 2b       	or	r21, r24
     a78:	5b b9       	out	0x0b, r21	; 11
    
    unsigned char flag = 0;
    
    while(j!= (time*5))
    {
        for(i=0;i<speed;i++)
     a7a:	6f 5f       	subi	r22, 0xFF	; 255
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	f2 cf       	rjmp	.-28     	; 0xa64 <led_interaction+0x36>
            if(i<threshold)
                PORTD &= ~(1<<color);
            else
                PORTD |= (1<<color);
        }
        if(threshold==speed)
     a80:	2a 17       	cp	r18, r26
     a82:	3b 07       	cpc	r19, r27
     a84:	29 f0       	breq	.+10     	; 0xa90 <led_interaction+0x62>
            flag=1;
        else if(threshold==0)
     a86:	21 15       	cp	r18, r1
     a88:	31 05       	cpc	r19, r1
     a8a:	31 f0       	breq	.+12     	; 0xa98 <led_interaction+0x6a>
            flag=0;
        
        if(flag)
     a8c:	99 23       	and	r25, r25
     a8e:	21 f0       	breq	.+8      	; 0xa98 <led_interaction+0x6a>
            threshold--;
     a90:	21 50       	subi	r18, 0x01	; 1
     a92:	31 09       	sbc	r19, r1
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	03 c0       	rjmp	.+6      	; 0xa9e <led_interaction+0x70>
        else
            threshold++;
     a98:	2f 5f       	subi	r18, 0xFF	; 255
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	90 e0       	ldi	r25, 0x00	; 0
        j++;
     a9e:	31 96       	adiw	r30, 0x01	; 1
     aa0:	dc cf       	rjmp	.-72     	; 0xa5a <led_interaction+0x2c>
    }
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <__vector_20>:
unsigned char temp_pn[17]="1234123412341234";
unsigned long game_money = 0;
unsigned isConnect;

ISR(USART0_RX_vect)
{
     aa8:	1f 92       	push	r1
     aaa:	0f 92       	push	r0
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	0f 92       	push	r0
     ab0:	11 24       	eor	r1, r1
     ab2:	2f 93       	push	r18
     ab4:	3f 93       	push	r19
     ab6:	4f 93       	push	r20
     ab8:	5f 93       	push	r21
     aba:	6f 93       	push	r22
     abc:	7f 93       	push	r23
     abe:	8f 93       	push	r24
     ac0:	9f 93       	push	r25
     ac2:	af 93       	push	r26
     ac4:	bf 93       	push	r27
     ac6:	cf 93       	push	r28
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
    unsigned char data = UDR0;
     acc:	c0 91 c6 00 	lds	r28, 0x00C6
    

    if(data==START_BYTE && idxArr==0)
     ad0:	c3 35       	cpi	r28, 0x53	; 83
     ad2:	41 f4       	brne	.+16     	; 0xae4 <__vector_20+0x3c>
     ad4:	80 91 a2 03 	lds	r24, 0x03A2
     ad8:	81 11       	cpse	r24, r1
     ada:	11 c0       	rjmp	.+34     	; 0xafe <__vector_20+0x56>
        isStart = 1;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 93 ad 03 	sts	0x03AD, r24
     ae2:	0d c0       	rjmp	.+26     	; 0xafe <__vector_20+0x56>
    
    else if(data==END_BYTE && idxArr!=0)
     ae4:	c5 34       	cpi	r28, 0x45	; 69
     ae6:	59 f4       	brne	.+22     	; 0xafe <__vector_20+0x56>
     ae8:	80 91 a2 03 	lds	r24, 0x03A2
     aec:	88 23       	and	r24, r24
     aee:	39 f0       	breq	.+14     	; 0xafe <__vector_20+0x56>
    {
        //s_flag Get_INSTRUCTION bit 1 set
        change_bit_val(GET_INSTRUCTION,1);
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	ad dc       	rcall	.-1702   	; 0x450 <change_bit_val>
     af6:	10 92 a2 03 	sts	0x03A2, r1
        idxArr  = INIT_DATA;
     afa:	10 92 ad 03 	sts	0x03AD, r1
        isStart = INIT_DATA;
     afe:	80 91 ad 03 	lds	r24, 0x03AD

    }
    
    if(isStart && data!=START_BYTE)
     b02:	88 23       	and	r24, r24
     b04:	a9 f0       	breq	.+42     	; 0xb30 <__vector_20+0x88>
     b06:	c3 35       	cpi	r28, 0x53	; 83
     b08:	99 f0       	breq	.+38     	; 0xb30 <__vector_20+0x88>
     b0a:	80 91 a2 03 	lds	r24, 0x03A2
    {
        data_buffer[idxArr] = data;
     b0e:	e8 2f       	mov	r30, r24
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	ee 54       	subi	r30, 0x4E	; 78
     b14:	fc 4f       	sbci	r31, 0xFC	; 252
     b16:	c0 83       	st	Z, r28
     b18:	c3 30       	cpi	r28, 0x03	; 3
        
        // 받은 명령어가 ack 신호 일경우
        if(data==GET_ACK && idxArr==0)
     b1a:	29 f4       	brne	.+10     	; 0xb26 <__vector_20+0x7e>
     b1c:	81 11       	cpse	r24, r1
     b1e:	03 c0       	rjmp	.+6      	; 0xb26 <__vector_20+0x7e>
     b20:	61 e0       	ldi	r22, 0x01	; 1
            change_bit_val(CONNECT,1);
     b22:	80 e4       	ldi	r24, 0x40	; 64
     b24:	95 dc       	rcall	.-1750   	; 0x450 <change_bit_val>
     b26:	80 91 a2 03 	lds	r24, 0x03A2

        idxArr++;
     b2a:	8f 5f       	subi	r24, 0xFF	; 255
     b2c:	80 93 a2 03 	sts	0x03A2, r24
     b30:	ff 91       	pop	r31
     b32:	ef 91       	pop	r30
    }

}
     b34:	cf 91       	pop	r28
     b36:	bf 91       	pop	r27
     b38:	af 91       	pop	r26
     b3a:	9f 91       	pop	r25
     b3c:	8f 91       	pop	r24
     b3e:	7f 91       	pop	r23
     b40:	6f 91       	pop	r22
     b42:	5f 91       	pop	r21
     b44:	4f 91       	pop	r20
     b46:	3f 91       	pop	r19
     b48:	2f 91       	pop	r18
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <__vector_28>:

ISR(USART1_RX_vect)
{
     b54:	1f 92       	push	r1
     b56:	0f 92       	push	r0
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	2f 93       	push	r18
     b60:	3f 93       	push	r19
     b62:	4f 93       	push	r20
     b64:	5f 93       	push	r21
     b66:	6f 93       	push	r22
     b68:	7f 93       	push	r23
     b6a:	8f 93       	push	r24
     b6c:	9f 93       	push	r25
     b6e:	af 93       	push	r26
     b70:	bf 93       	push	r27
     b72:	cf 93       	push	r28
     b74:	ef 93       	push	r30
     b76:	ff 93       	push	r31
    unsigned char data = UDR1;
     b78:	c0 91 ce 00 	lds	r28, 0x00CE
    
    if(data==START_BYTE && idxArr==0)
     b7c:	c3 35       	cpi	r28, 0x53	; 83
     b7e:	41 f4       	brne	.+16     	; 0xb90 <__vector_28+0x3c>
     b80:	80 91 a2 03 	lds	r24, 0x03A2
     b84:	81 11       	cpse	r24, r1
     b86:	11 c0       	rjmp	.+34     	; 0xbaa <__vector_28+0x56>
        isStart = 1;
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	80 93 ad 03 	sts	0x03AD, r24
     b8e:	0d c0       	rjmp	.+26     	; 0xbaa <__vector_28+0x56>
    
    else if(data==END_BYTE && idxArr!=0)
     b90:	c5 34       	cpi	r28, 0x45	; 69
     b92:	59 f4       	brne	.+22     	; 0xbaa <__vector_28+0x56>
     b94:	80 91 a2 03 	lds	r24, 0x03A2
     b98:	88 23       	and	r24, r24
     b9a:	39 f0       	breq	.+14     	; 0xbaa <__vector_28+0x56>
    {
        //s_flag Get_INSTRUCTION bit 1 set
        change_bit_val(GET_INSTRUCTION,1);
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	57 dc       	rcall	.-1874   	; 0x450 <change_bit_val>
     ba2:	10 92 a2 03 	sts	0x03A2, r1
        idxArr  = INIT_DATA;
     ba6:	10 92 ad 03 	sts	0x03AD, r1
        isStart = INIT_DATA;
     baa:	80 91 ad 03 	lds	r24, 0x03AD
    }
    
    if(isStart && data!=START_BYTE)
     bae:	88 23       	and	r24, r24
     bb0:	61 f0       	breq	.+24     	; 0xbca <__vector_28+0x76>
     bb2:	c3 35       	cpi	r28, 0x53	; 83
     bb4:	51 f0       	breq	.+20     	; 0xbca <__vector_28+0x76>
     bb6:	80 91 a2 03 	lds	r24, 0x03A2
    {
        data_buffer[idxArr] = data;
     bba:	e8 2f       	mov	r30, r24
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	ee 54       	subi	r30, 0x4E	; 78
     bc0:	fc 4f       	sbci	r31, 0xFC	; 252
     bc2:	c0 83       	st	Z, r28
     bc4:	8f 5f       	subi	r24, 0xFF	; 255
        idxArr++;
     bc6:	80 93 a2 03 	sts	0x03A2, r24
     bca:	81 e0       	ldi	r24, 0x01	; 1
    }
    
    // 게임보드와 연결상태를 알기위한 변수
    isConnect = 1;
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	90 93 bf 03 	sts	0x03BF, r25
     bd2:	80 93 be 03 	sts	0x03BE, r24
     bd6:	ff 91       	pop	r31
}
     bd8:	ef 91       	pop	r30
     bda:	cf 91       	pop	r28
     bdc:	bf 91       	pop	r27
     bde:	af 91       	pop	r26
     be0:	9f 91       	pop	r25
     be2:	8f 91       	pop	r24
     be4:	7f 91       	pop	r23
     be6:	6f 91       	pop	r22
     be8:	5f 91       	pop	r21
     bea:	4f 91       	pop	r20
     bec:	3f 91       	pop	r19
     bee:	2f 91       	pop	r18
     bf0:	0f 90       	pop	r0
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	0f 90       	pop	r0
     bf6:	1f 90       	pop	r1
     bf8:	18 95       	reti

00000bfa <check_gameboard_connect>:

unsigned char check_gameboard_connect()
{
    unsigned temp = isConnect;
     bfa:	80 91 be 03 	lds	r24, 0x03BE
    // 현재 게임보드 연결상태를 위한 변수
    
    isConnect = INIT_DATA;
     bfe:	10 92 bf 03 	sts	0x03BF, r1
     c02:	10 92 be 03 	sts	0x03BE, r1
    
    return temp;
}
     c06:	08 95       	ret

00000c08 <init_uart>:
{
    /*
     uart0 사용
     속도 : 57600
     */
    UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     c08:	e1 ec       	ldi	r30, 0xC1	; 193
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	88 69       	ori	r24, 0x98	; 152
     c10:	80 83       	st	Z, r24
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
     c12:	e2 ec       	ldi	r30, 0xC2	; 194
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	86 60       	ori	r24, 0x06	; 6
     c1a:	80 83       	st	Z, r24
    UBRR0L  = 21; // 20Mhz에서 57600은 21 16Mhz에서 57600은 16
     c1c:	85 e1       	ldi	r24, 0x15	; 21
     c1e:	80 93 c4 00 	sts	0x00C4, r24
    
    /*
     uart1 사용
     속도 : 57600
     */
    UCSR1B |= (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
     c22:	e9 ec       	ldi	r30, 0xC9	; 201
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	88 69       	ori	r24, 0x98	; 152
     c2a:	80 83       	st	Z, r24
    UCSR1C |= (1<<UCSZ11)|(1<<UCSZ10);
     c2c:	ea ec       	ldi	r30, 0xCA	; 202
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	86 60       	ori	r24, 0x06	; 6
     c34:	80 83       	st	Z, r24
    UBRR1L  = 129; // 20Mhz에서 57600은 21 16Mhz에서 57600은 16
     c36:	81 e8       	ldi	r24, 0x81	; 129
     c38:	80 93 cc 00 	sts	0x00CC, r24
     c3c:	08 95       	ret

00000c3e <make_packet>:
                  // 9600은 129
}

void make_packet(unsigned char opcode, char length, unsigned char data[])
{
     c3e:	a4 e1       	ldi	r26, 0x14	; 20
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e4 e2       	ldi	r30, 0x24	; 36
     c44:	f6 e0       	ldi	r31, 0x06	; 6
     c46:	96 c4       	rjmp	.+2348   	; 0x1574 <__prologue_saves__+0x20>
     c48:	93 e5       	ldi	r25, 0x53	; 83
    char idx;
    char i;
    
    idx = 0;
    //start make packet
    packet[idx++] = START_BYTE;
     c4a:	99 83       	std	Y+1, r25	; 0x01
     c4c:	8a 83       	std	Y+2, r24	; 0x02
    packet[idx++] = opcode;
     c4e:	6b 83       	std	Y+3, r22	; 0x03
    packet[idx++] = length;
     c50:	94 2f       	mov	r25, r20
     c52:	fa 01       	movw	r30, r20
    
    for( i=0 ;i<length;i++ )
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	84 1b       	sub	r24, r20
     c58:	38 2f       	mov	r19, r24
     c5a:	3e 0f       	add	r19, r30
     c5c:	2e 2f       	mov	r18, r30
     c5e:	29 1b       	sub	r18, r25
     c60:	26 17       	cp	r18, r22
     c62:	48 f4       	brcc	.+18     	; 0xc76 <make_packet+0x38>
     c64:	21 91       	ld	r18, Z+
        packet[idx++] = data[i];
     c66:	a1 e0       	ldi	r26, 0x01	; 1
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	ac 0f       	add	r26, r28
     c6c:	bd 1f       	adc	r27, r29
     c6e:	a3 0f       	add	r26, r19
     c70:	b1 1d       	adc	r27, r1
     c72:	2c 93       	st	X, r18
     c74:	f1 cf       	rjmp	.-30     	; 0xc58 <make_packet+0x1a>
     c76:	83 e0       	ldi	r24, 0x03	; 3
     c78:	86 0f       	add	r24, r22
     c7a:	e1 e0       	ldi	r30, 0x01	; 1
    
    packet[idx] = END_BYTE;
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	ec 0f       	add	r30, r28
     c80:	fd 1f       	adc	r31, r29
     c82:	e8 0f       	add	r30, r24
     c84:	f1 1d       	adc	r31, r1
     c86:	85 e4       	ldi	r24, 0x45	; 69
     c88:	80 83       	st	Z, r24
     c8a:	20 e0       	ldi	r18, 0x00	; 0
    
    //start send packet
    for( i=0;i<length+4;i++ )
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	6d 5f       	subi	r22, 0xFD	; 253
     c90:	7f 4f       	sbci	r23, 0xFF	; 255
     c92:	82 2f       	mov	r24, r18
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	68 17       	cp	r22, r24
     c98:	79 07       	cpc	r23, r25
     c9a:	7c f0       	brlt	.+30     	; 0xcba <make_packet+0x7c>
     c9c:	30 91 c0 00 	lds	r19, 0x00C0
    {
        while(!(UCSR0A&(1<<UDRE0)));
     ca0:	35 ff       	sbrs	r19, 5
     ca2:	fc cf       	rjmp	.-8      	; 0xc9c <make_packet+0x5e>
     ca4:	e1 e0       	ldi	r30, 0x01	; 1
        UDR0 = packet[i];
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	ec 0f       	add	r30, r28
     caa:	fd 1f       	adc	r31, r29
     cac:	e8 0f       	add	r30, r24
     cae:	f9 1f       	adc	r31, r25
     cb0:	80 81       	ld	r24, Z
     cb2:	80 93 c6 00 	sts	0x00C6, r24
     cb6:	2f 5f       	subi	r18, 0xFF	; 255
        packet[idx++] = data[i];
    
    packet[idx] = END_BYTE;
    
    //start send packet
    for( i=0;i<length+4;i++ )
     cb8:	ec cf       	rjmp	.-40     	; 0xc92 <make_packet+0x54>
     cba:	80 91 c0 00 	lds	r24, 0x00C0
    {
        while(!(UCSR0A&(1<<UDRE0)));
        UDR0 = packet[i];
    }
    while(!(UCSR0A&(1<<UDRE0)));
     cbe:	85 ff       	sbrs	r24, 5
     cc0:	fc cf       	rjmp	.-8      	; 0xcba <make_packet+0x7c>
     cc2:	64 96       	adiw	r28, 0x14	; 20
}
     cc4:	e2 e0       	ldi	r30, 0x02	; 2
     cc6:	72 c4       	rjmp	.+2276   	; 0x15ac <__epilogue_restores__+0x20>

00000cc8 <compare_pn>:
{
    unsigned char length;
    char i;
    char isMatch;
    
    length = data_buffer[idx++];
     cc8:	e1 e0       	ldi	r30, 0x01	; 1
     cca:	e8 0f       	add	r30, r24
     ccc:	a8 2f       	mov	r26, r24
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	ae 54       	subi	r26, 0x4E	; 78
     cd2:	bc 4f       	sbci	r27, 0xFC	; 252
     cd4:	8c 91       	ld	r24, X
     cd6:	20 e8       	ldi	r18, 0x80	; 128
     cd8:	33 e0       	ldi	r19, 0x03	; 3
    
    for( i=0;i<length;i++ )
     cda:	d9 01       	movw	r26, r18
     cdc:	9a 2f       	mov	r25, r26
     cde:	92 1b       	sub	r25, r18
     ce0:	98 17       	cp	r25, r24
     ce2:	58 f4       	brcc	.+22     	; 0xcfa <compare_pn+0x32>
    {
        if(temp_pn[i]==data_buffer[idx++])
     ce4:	5d 91       	ld	r21, X+
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	9e 0f       	add	r25, r30
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	ee 54       	subi	r30, 0x4E	; 78
     cee:	fc 4f       	sbci	r31, 0xFC	; 252
     cf0:	40 81       	ld	r20, Z
     cf2:	54 13       	cpse	r21, r20
     cf4:	04 c0       	rjmp	.+8      	; 0xcfe <compare_pn+0x36>
     cf6:	e9 2f       	mov	r30, r25
     cf8:	f1 cf       	rjmp	.-30     	; 0xcdc <compare_pn+0x14>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	08 95       	ret
            isMatch = 1;
        else
        {
            isMatch = 0;
     cfe:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return isMatch;
}
     d00:	08 95       	ret

00000d02 <get_goal>:

void get_goal( unsigned char idx )
{
     d02:	a1 e0       	ldi	r26, 0x01	; 1
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e6 e8       	ldi	r30, 0x86	; 134
     d08:	f6 e0       	ldi	r31, 0x06	; 6
     d0a:	2c c4       	rjmp	.+2136   	; 0x1564 <__prologue_saves__+0x10>
     d0c:	dd 24       	eor	r13, r13
    unsigned long tmp;
    unsigned char len = data_buffer[idx++];
     d0e:	d3 94       	inc	r13
     d10:	d8 0e       	add	r13, r24
     d12:	e8 2f       	mov	r30, r24
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	ee 54       	subi	r30, 0x4E	; 78
     d18:	fc 4f       	sbci	r31, 0xFC	; 252
     d1a:	c0 80       	ld	r12, Z
     d1c:	10 92 a7 03 	sts	0x03A7, r1
    unsigned char i;
    unsigned char percent;
    
    goal_money = INIT_DATA;
     d20:	10 92 a8 03 	sts	0x03A8, r1
     d24:	10 92 a9 03 	sts	0x03A9, r1
     d28:	10 92 aa 03 	sts	0x03AA, r1
     d2c:	a1 2c       	mov	r10, r1
    
    for( i=0;i<len;i++ )
     d2e:	b1 2c       	mov	r11, r1
     d30:	03 e0       	ldi	r16, 0x03	; 3
     d32:	10 e0       	ldi	r17, 0x00	; 0
     d34:	ec 2c       	mov	r14, r12
        tmp = data_buffer[idx++]&0xff;
        _delay_ms(2);
        
        goal_money = goal_money|tmp;
        eeprom_write(GOALMONEY_ADDRESS-i,(unsigned char)tmp);
        if( i < len-1 )
     d36:	f1 2c       	mov	r15, r1
     d38:	21 e0       	ldi	r18, 0x01	; 1
     d3a:	e2 1a       	sub	r14, r18
     d3c:	f1 08       	sbc	r15, r1
     d3e:	ea 2d       	mov	r30, r10
     d40:	ed 0d       	add	r30, r13
     d42:	ac 14       	cp	r10, r12
    unsigned char i;
    unsigned char percent;
    
    goal_money = INIT_DATA;
    
    for( i=0;i<len;i++ )
     d44:	d0 f5       	brcc	.+116    	; 0xdba <get_goal+0xb8>
     d46:	f0 e0       	ldi	r31, 0x00	; 0
    {
        tmp = data_buffer[idx++]&0xff;
     d48:	ee 54       	subi	r30, 0x4E	; 78
     d4a:	fc 4f       	sbci	r31, 0xFC	; 252
     d4c:	60 81       	ld	r22, Z
     d4e:	8f e0       	ldi	r24, 0x0F	; 15
     d50:	97 e2       	ldi	r25, 0x27	; 39
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	f1 f7       	brne	.-4      	; 0xd52 <get_goal+0x50>
     d56:	00 c0       	rjmp	.+0      	; 0xd58 <get_goal+0x56>
     d58:	00 00       	nop
     d5a:	80 91 a7 03 	lds	r24, 0x03A7
        _delay_ms(2);
        
        goal_money = goal_money|tmp;
     d5e:	90 91 a8 03 	lds	r25, 0x03A8
     d62:	a0 91 a9 03 	lds	r26, 0x03A9
     d66:	b0 91 aa 03 	lds	r27, 0x03AA
     d6a:	86 2b       	or	r24, r22
     d6c:	80 93 a7 03 	sts	0x03A7, r24
     d70:	90 93 a8 03 	sts	0x03A8, r25
     d74:	a0 93 a9 03 	sts	0x03A9, r26
     d78:	b0 93 aa 03 	sts	0x03AA, r27
     d7c:	c8 01       	movw	r24, r16
        eeprom_write(GOALMONEY_ADDRESS-i,(unsigned char)tmp);
     d7e:	8a 19       	sub	r24, r10
     d80:	9b 09       	sbc	r25, r11
     d82:	60 db       	rcall	.-2368   	; 0x444 <eeprom_write>
     d84:	ae 14       	cp	r10, r14
     d86:	bf 04       	cpc	r11, r15
        if( i < len-1 )
     d88:	a4 f4       	brge	.+40     	; 0xdb2 <get_goal+0xb0>
     d8a:	80 91 a7 03 	lds	r24, 0x03A7
            goal_money = goal_money<<8;
     d8e:	90 91 a8 03 	lds	r25, 0x03A8
     d92:	a0 91 a9 03 	lds	r26, 0x03A9
     d96:	b0 91 aa 03 	lds	r27, 0x03AA
     d9a:	ba 2f       	mov	r27, r26
     d9c:	a9 2f       	mov	r26, r25
     d9e:	98 2f       	mov	r25, r24
     da0:	88 27       	eor	r24, r24
     da2:	80 93 a7 03 	sts	0x03A7, r24
     da6:	90 93 a8 03 	sts	0x03A8, r25
     daa:	a0 93 a9 03 	sts	0x03A9, r26
     dae:	b0 93 aa 03 	sts	0x03AA, r27
     db2:	9f ef       	ldi	r25, 0xFF	; 255
     db4:	a9 1a       	sub	r10, r25
     db6:	b9 0a       	sbc	r11, r25
     db8:	c2 cf       	rjmp	.-124    	; 0xd3e <get_goal+0x3c>
     dba:	90 e2       	ldi	r25, 0x20	; 32
     dbc:	e9 2e       	mov	r14, r25
     dbe:	93 e0       	ldi	r25, 0x03	; 3
     dc0:	f9 2e       	mov	r15, r25
     dc2:	c1 2c       	mov	r12, r1
     dc4:	d1 2c       	mov	r13, r1
    unsigned char i;
    unsigned char percent;
    
    goal_money = INIT_DATA;
    
    for( i=0;i<len;i++ )
     dc6:	a6 01       	movw	r20, r12
     dc8:	42 5e       	subi	r20, 0xE2	; 226
     dca:	5f 4f       	sbci	r21, 0xFF	; 255
     dcc:	87 01       	movw	r16, r14
     dce:	22 e0       	ldi	r18, 0x02	; 2
            goal_money = goal_money<<8;
    }
    
    // 목표금액 등록문구 출력
    for(i=0;i<6;i++)
        draw_char(8,16,30+(i*10),2,font_goal[i]);
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	60 e1       	ldi	r22, 0x10	; 16
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	88 e0       	ldi	r24, 0x08	; 8
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	57 dc       	rcall	.-1874   	; 0x68a <draw_char>
     ddc:	2a e0       	ldi	r18, 0x0A	; 10
     dde:	c2 0e       	add	r12, r18
     de0:	d1 1c       	adc	r13, r1
     de2:	80 e1       	ldi	r24, 0x10	; 16
     de4:	e8 0e       	add	r14, r24
     de6:	f1 1c       	adc	r15, r1
     de8:	9c e3       	ldi	r25, 0x3C	; 60
     dea:	c9 16       	cp	r12, r25
     dec:	d1 04       	cpc	r13, r1
        if( i < len-1 )
            goal_money = goal_money<<8;
    }
    
    // 목표금액 등록문구 출력
    for(i=0;i<6;i++)
     dee:	59 f7       	brne	.-42     	; 0xdc6 <get_goal+0xc4>
     df0:	60 91 a7 03 	lds	r22, 0x03A7
     df4:	70 91 a8 03 	lds	r23, 0x03A8
        draw_char(8,16,30+(i*10),2,font_goal[i]);
    
    write_num_to_oled(goal_money);
     df8:	80 91 a9 03 	lds	r24, 0x03A9
     dfc:	90 91 aa 03 	lds	r25, 0x03AA
     e00:	d7 dc       	rcall	.-1618   	; 0x7b0 <write_num_to_oled>
     e02:	2f ef       	ldi	r18, 0xFF	; 255
     e04:	8a e1       	ldi	r24, 0x1A	; 26
     e06:	97 eb       	ldi	r25, 0xB7	; 183
     e08:	21 50       	subi	r18, 0x01	; 1
     e0a:	80 40       	sbci	r24, 0x00	; 0
     e0c:	90 40       	sbci	r25, 0x00	; 0
     e0e:	e1 f7       	brne	.-8      	; 0xe08 <get_goal+0x106>
     e10:	00 c0       	rjmp	.+0      	; 0xe12 <get_goal+0x110>
     e12:	00 00       	nop
     e14:	20 91 ae 03 	lds	r18, 0x03AE
     e18:	30 91 af 03 	lds	r19, 0x03AF
    _delay_ms(3000);
    
    // 현재금액에 따라 저축금액 퍼센테이지 출력
    percent = (current_money*112)/goal_money;
     e1c:	40 91 b0 03 	lds	r20, 0x03B0
     e20:	50 91 b1 03 	lds	r21, 0x03B1
     e24:	a0 e7       	ldi	r26, 0x70	; 112
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	5d d3       	rcall	.+1722   	; 0x14e4 <__muluhisi3>
     e2a:	20 91 a7 03 	lds	r18, 0x03A7
     e2e:	30 91 a8 03 	lds	r19, 0x03A8
     e32:	40 91 a9 03 	lds	r20, 0x03A9
     e36:	50 91 aa 03 	lds	r21, 0x03AA
     e3a:	6a d3       	rcall	.+1748   	; 0x1510 <__udivmodsi4>
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	29 83       	std	Y+1, r18	; 0x01
     e40:	a0 dd       	rcall	.-1216   	; 0x982 <draw_edge>
     e42:	29 81       	ldd	r18, Y+1	; 0x01
     e44:	82 2f       	mov	r24, r18
     e46:	82 dd       	rcall	.-1276   	; 0x94c <draw_percentage>
    
    draw_edge(1);
     e48:	80 e2       	ldi	r24, 0x20	; 32
     e4a:	e8 2e       	mov	r14, r24
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	f8 2e       	mov	r15, r24
    draw_percentage(percent);
     e50:	c1 2c       	mov	r12, r1
     e52:	d1 2c       	mov	r13, r1
     e54:	a6 01       	movw	r20, r12
     e56:	42 5e       	subi	r20, 0xE2	; 226
     e58:	5f 4f       	sbci	r21, 0xFF	; 255
     e5a:	87 01       	movw	r16, r14
     e5c:	22 e0       	ldi	r18, 0x02	; 2
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	60 e1       	ldi	r22, 0x10	; 16
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	88 e0       	ldi	r24, 0x08	; 8
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	10 dc       	rcall	.-2016   	; 0x68a <draw_char>
    
    for(i=0;i<6;i++)
        draw_char(8,16,30+(i*10),2,font_money[i]);
     e6a:	2a e0       	ldi	r18, 0x0A	; 10
     e6c:	c2 0e       	add	r12, r18
     e6e:	d1 1c       	adc	r13, r1
     e70:	80 e1       	ldi	r24, 0x10	; 16
     e72:	e8 0e       	add	r14, r24
     e74:	f1 1c       	adc	r15, r1
     e76:	9c e3       	ldi	r25, 0x3C	; 60
     e78:	c9 16       	cp	r12, r25
     e7a:	d1 04       	cpc	r13, r1
     e7c:	59 f7       	brne	.-42     	; 0xe54 <get_goal+0x152>
     e7e:	60 91 ae 03 	lds	r22, 0x03AE
     e82:	70 91 af 03 	lds	r23, 0x03AF
     e86:	80 91 b0 03 	lds	r24, 0x03B0
    percent = (current_money*112)/goal_money;
    
    draw_edge(1);
    draw_percentage(percent);
    
    for(i=0;i<6;i++)
     e8a:	90 91 b1 03 	lds	r25, 0x03B1
     e8e:	90 dc       	rcall	.-1760   	; 0x7b0 <write_num_to_oled>
        draw_char(8,16,30+(i*10),2,font_money[i]);
    
    write_num_to_oled(current_money);
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	88 e0       	ldi	r24, 0x08	; 8
     e94:	dd da       	rcall	.-2630   	; 0x450 <change_bit_val>
     e96:	21 96       	adiw	r28, 0x01	; 1
     e98:	ea e0       	ldi	r30, 0x0A	; 10
     e9a:	80 c3       	rjmp	.+1792   	; 0x159c <__epilogue_restores__+0x10>

00000e9c <proccess_instruction>:
    change_bit_val(ISGOAL,1);	// s_flag ISGOAL bit 1로 set
}

void proccess_instruction(void)
{
     e9c:	a9 e0       	ldi	r26, 0x09	; 9
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e3 e5       	ldi	r30, 0x53	; 83
     ea2:	f7 e0       	ldi	r31, 0x07	; 7
     ea4:	61 c3       	rjmp	.+1730   	; 0x1568 <__prologue_saves__+0x14>
     ea6:	87 e8       	ldi	r24, 0x87	; 135
     ea8:	93 e1       	ldi	r25, 0x13	; 19
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <proccess_instruction+0xe>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <proccess_instruction+0x14>
     eb0:	00 00       	nop
     eb2:	80 91 b2 03 	lds	r24, 0x03B2
    int m=0;
    int len ;
    int k;
    
    _delay_ms(1);
    switch(data_buffer[idx++])
     eb6:	89 30       	cpi	r24, 0x09	; 9
     eb8:	09 f4       	brne	.+2      	; 0xebc <proccess_instruction+0x20>
     eba:	fc c0       	rjmp	.+504    	; 0x10b4 <proccess_instruction+0x218>
     ebc:	90 f4       	brcc	.+36     	; 0xee2 <proccess_instruction+0x46>
     ebe:	84 30       	cpi	r24, 0x04	; 4
     ec0:	09 f4       	brne	.+2      	; 0xec4 <proccess_instruction+0x28>
     ec2:	58 c1       	rjmp	.+688    	; 0x1174 <proccess_instruction+0x2d8>
     ec4:	20 f4       	brcc	.+8      	; 0xece <proccess_instruction+0x32>
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	09 f4       	brne	.+2      	; 0xecc <proccess_instruction+0x30>
     eca:	5f c0       	rjmp	.+190    	; 0xf8a <proccess_instruction+0xee>
     ecc:	95 c1       	rjmp	.+810    	; 0x11f8 <proccess_instruction+0x35c>
     ece:	85 30       	cpi	r24, 0x05	; 5
     ed0:	09 f4       	brne	.+2      	; 0xed4 <proccess_instruction+0x38>
     ed2:	72 c1       	rjmp	.+740    	; 0x11b8 <proccess_instruction+0x31c>
     ed4:	87 30       	cpi	r24, 0x07	; 7
     ed6:	09 f0       	breq	.+2      	; 0xeda <proccess_instruction+0x3e>
     ed8:	8f c1       	rjmp	.+798    	; 0x11f8 <proccess_instruction+0x35c>
     eda:	b8 db       	rcall	.-2192   	; 0x64c <turnon_motor_voltage>
            led_interaction(BLUE_LED,350,1000,10);
            break;
            
            // 잠금or 해제명령어일경우
        case LOCK_UNLOCK:
            turnon_motor_voltage();
     edc:	80 91 b4 03 	lds	r24, 0x03B4
            lock_or_unlock(data_buffer[++idx]);
     ee0:	70 c1       	rjmp	.+736    	; 0x11c2 <proccess_instruction+0x326>
     ee2:	81 31       	cpi	r24, 0x11	; 17
     ee4:	09 f4       	brne	.+2      	; 0xee8 <proccess_instruction+0x4c>
    int m=0;
    int len ;
    int k;
    
    _delay_ms(1);
    switch(data_buffer[idx++])
     ee6:	c4 c0       	rjmp	.+392    	; 0x1070 <proccess_instruction+0x1d4>
     ee8:	20 f4       	brcc	.+8      	; 0xef2 <proccess_instruction+0x56>
     eea:	80 31       	cpi	r24, 0x10	; 16
     eec:	09 f4       	brne	.+2      	; 0xef0 <proccess_instruction+0x54>
     eee:	78 c1       	rjmp	.+752    	; 0x11e0 <proccess_instruction+0x344>
     ef0:	83 c1       	rjmp	.+774    	; 0x11f8 <proccess_instruction+0x35c>
     ef2:	82 31       	cpi	r24, 0x12	; 18
     ef4:	09 f4       	brne	.+2      	; 0xef8 <proccess_instruction+0x5c>
     ef6:	17 c1       	rjmp	.+558    	; 0x1126 <proccess_instruction+0x28a>
     ef8:	87 34       	cpi	r24, 0x47	; 71
     efa:	09 f0       	breq	.+2      	; 0xefe <proccess_instruction+0x62>
     efc:	7d c1       	rjmp	.+762    	; 0x11f8 <proccess_instruction+0x35c>
     efe:	40 91 b5 03 	lds	r20, 0x03B5
        
        case SEND_GAMEDATA:
            game_money = 0;
            len = data_buffer[idx++];
            game_money += data_buffer[idx++]*500;
            game_money += data_buffer[idx++]*100;
     f02:	00 91 b6 03 	lds	r16, 0x03B6
            game_money += data_buffer[idx++]*50;
     f06:	80 91 b7 03 	lds	r24, 0x03B7
            game_money += data_buffer[idx++]*10;
     f0a:	14 e6       	ldi	r17, 0x64	; 100
     f0c:	41 9f       	mul	r20, r17
        
        case SEND_GAMEDATA:
            game_money = 0;
            len = data_buffer[idx++];
            game_money += data_buffer[idx++]*500;
            game_money += data_buffer[idx++]*100;
     f0e:	a0 01       	movw	r20, r0
     f10:	11 24       	eor	r1, r1
     f12:	6a 01       	movw	r12, r20
     f14:	ee 24       	eor	r14, r14
     f16:	d7 fc       	sbrc	r13, 7
     f18:	e0 94       	com	r14
     f1a:	fe 2c       	mov	r15, r14
     f1c:	90 91 b4 03 	lds	r25, 0x03B4
            break;
        
        case SEND_GAMEDATA:
            game_money = 0;
            len = data_buffer[idx++];
            game_money += data_buffer[idx++]*500;
     f20:	24 ef       	ldi	r18, 0xF4	; 244
     f22:	31 e0       	ldi	r19, 0x01	; 1
     f24:	92 9f       	mul	r25, r18
     f26:	a0 01       	movw	r20, r0
     f28:	93 9f       	mul	r25, r19
     f2a:	50 0d       	add	r21, r0
     f2c:	11 24       	eor	r1, r1
     f2e:	66 27       	eor	r22, r22
     f30:	57 fd       	sbrc	r21, 7
     f32:	60 95       	com	r22
     f34:	76 2f       	mov	r23, r22
     f36:	4c 0d       	add	r20, r12
     f38:	5d 1d       	adc	r21, r13
            game_money += data_buffer[idx++]*100;
     f3a:	6e 1d       	adc	r22, r14
     f3c:	7f 1d       	adc	r23, r15
     f3e:	22 e3       	ldi	r18, 0x32	; 50
     f40:	02 9f       	mul	r16, r18
            game_money += data_buffer[idx++]*50;
     f42:	80 01       	movw	r16, r0
     f44:	11 24       	eor	r1, r1
     f46:	22 27       	eor	r18, r18
     f48:	17 fd       	sbrc	r17, 7
     f4a:	20 95       	com	r18
     f4c:	32 2f       	mov	r19, r18
     f4e:	40 0f       	add	r20, r16
     f50:	51 1f       	adc	r21, r17
     f52:	62 1f       	adc	r22, r18
     f54:	73 1f       	adc	r23, r19
     f56:	3a e0       	ldi	r19, 0x0A	; 10
     f58:	83 9f       	mul	r24, r19
            game_money += data_buffer[idx++]*10;
     f5a:	c0 01       	movw	r24, r0
     f5c:	11 24       	eor	r1, r1
     f5e:	aa 27       	eor	r26, r26
     f60:	97 fd       	sbrc	r25, 7
     f62:	a0 95       	com	r26
     f64:	ba 2f       	mov	r27, r26
     f66:	8a 01       	movw	r16, r20
     f68:	9b 01       	movw	r18, r22
     f6a:	08 0f       	add	r16, r24
     f6c:	19 1f       	adc	r17, r25
     f6e:	2a 1f       	adc	r18, r26
     f70:	3b 1f       	adc	r19, r27
     f72:	c9 01       	movw	r24, r18
     f74:	b8 01       	movw	r22, r16
     f76:	00 93 9d 03 	sts	0x039D, r16
     f7a:	10 93 9e 03 	sts	0x039E, r17
     f7e:	20 93 9f 03 	sts	0x039F, r18
     f82:	30 93 a0 03 	sts	0x03A0, r19
     f86:	14 dc       	rcall	.-2008   	; 0x7b0 <write_num_to_oled>
     f88:	37 c1       	rjmp	.+622    	; 0x11f8 <proccess_instruction+0x35c>
            write_num_to_oled(game_money);
     f8a:	80 91 a1 03 	lds	r24, 0x03A1
            break;
     f8e:	87 fd       	sbrc	r24, 7
    
    _delay_ms(1);
    switch(data_buffer[idx++])
    {
        case REQUEST_PN:
            if(!(s_flag&CONFIRM))
     f90:	33 c1       	rjmp	.+614    	; 0x11f8 <proccess_instruction+0x35c>
     f92:	ef e4       	ldi	r30, 0x4F	; 79
     f94:	f3 ec       	ldi	r31, 0xC3	; 195
     f96:	31 97       	sbiw	r30, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <proccess_instruction+0xfa>
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <proccess_instruction+0x100>
     f9c:	00 00       	nop
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	93 de       	rcall	.-730    	; 0xcc8 <compare_pn>
     fa2:	81 11       	cpse	r24, r1
            {
                // PN 등록요청이오면 PN번호를 비교한다
                _delay_ms(10);
                if(compare_pn(idx++))
     fa4:	2d c0       	rjmp	.+90     	; 0x1000 <proccess_instruction+0x164>
     fa6:	00 e8       	ldi	r16, 0x80	; 128
     fa8:	12 e0       	ldi	r17, 0x02	; 2
     faa:	25 e0       	ldi	r18, 0x05	; 5
     fac:	30 e0       	ldi	r19, 0x00	; 0
                
                else
                {
                    //실패 문구 출력
                    for(k=0;k<2;k++)
                        draw_char(8,16,45+(k*10),5,font_fail[k]);
     fae:	4d e2       	ldi	r20, 0x2D	; 45
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	60 e1       	ldi	r22, 0x10	; 16
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	88 e0       	ldi	r24, 0x08	; 8
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	67 db       	rcall	.-2354   	; 0x68a <draw_char>
     fbc:	00 e9       	ldi	r16, 0x90	; 144
     fbe:	12 e0       	ldi	r17, 0x02	; 2
     fc0:	25 e0       	ldi	r18, 0x05	; 5
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	47 e3       	ldi	r20, 0x37	; 55
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	60 e1       	ldi	r22, 0x10	; 16
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	88 e0       	ldi	r24, 0x08	; 8
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	5c db       	rcall	.-2376   	; 0x68a <draw_char>
     fd2:	fa e2       	ldi	r31, 0x2A	; 42
     fd4:	00 e5       	ldi	r16, 0x50	; 80
     fd6:	1e ef       	ldi	r17, 0xFE	; 254
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	f1 50       	subi	r31, 0x01	; 1
     fdc:	00 40       	sbci	r16, 0x00	; 0
     fde:	10 40       	sbci	r17, 0x00	; 0
     fe0:	20 40       	sbci	r18, 0x00	; 0
     fe2:	d9 f7       	brne	.-10     	; 0xfda <proccess_instruction+0x13e>
     fe4:	00 00       	nop
     fe6:	00 e0       	ldi	r16, 0x00	; 0
     fe8:	25 e0       	ldi	r18, 0x05	; 5
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4d e2       	ldi	r20, 0x2D	; 45
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	60 e1       	ldi	r22, 0x10	; 16
                    
                    _delay_ms(5000);
                    
                    //앞에 그렸던 문구 클리어
                    draw_data(30, 16, 45,5,0x00);
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	8e e1       	ldi	r24, 0x1E	; 30
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	90 db       	rcall	.-2272   	; 0x71a <draw_data>
     ffa:	43 e9       	ldi	r20, 0x93	; 147
     ffc:	53 e0       	ldi	r21, 0x03	; 3
     ffe:	35 c0       	rjmp	.+106    	; 0x106a <proccess_instruction+0x1ce>
    1000:	60 91 a1 03 	lds	r22, 0x03A1
    1004:	60 54       	subi	r22, 0x40	; 64
    1006:	80 e8       	ldi	r24, 0x80	; 128
                    make_packet(RESPONSE_PN,1,FAIL_PN);
    1008:	23 da       	rcall	.-3002   	; 0x450 <change_bit_val>
    100a:	60 e8       	ldi	r22, 0x80	; 128
    100c:	80 e0       	ldi	r24, 0x00	; 0
            {
                // PN 등록요청이오면 PN번호를 비교한다
                _delay_ms(10);
                if(compare_pn(idx++))
                {
                    change_bit_val(CONFIRM,s_flag-64);	// s_flag CONFIRM bit 1로 set
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	19 da       	rcall	.-3022   	; 0x444 <eeprom_write>
    1012:	00 ea       	ldi	r16, 0xA0	; 160
    1014:	12 e0       	ldi	r17, 0x02	; 2
    1016:	25 e0       	ldi	r18, 0x05	; 5
    1018:	30 e0       	ldi	r19, 0x00	; 0
                    eeprom_write(S_FLAG_ADDRESS, 0x80);	// eeprom에 인증여부 저장
    101a:	4d e2       	ldi	r20, 0x2D	; 45
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	60 e1       	ldi	r22, 0x10	; 16
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	88 e0       	ldi	r24, 0x08	; 8
                    
                    //성공 문구 출력
                    for(k=0;k<2;k++)
                        draw_char(8,16,45+(k*10),5,font_success[k]);
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	31 db       	rcall	.-2462   	; 0x68a <draw_char>
    1028:	00 eb       	ldi	r16, 0xB0	; 176
    102a:	12 e0       	ldi	r17, 0x02	; 2
    102c:	25 e0       	ldi	r18, 0x05	; 5
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	47 e3       	ldi	r20, 0x37	; 55
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	60 e1       	ldi	r22, 0x10	; 16
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	88 e0       	ldi	r24, 0x08	; 8
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	26 db       	rcall	.-2484   	; 0x68a <draw_char>
    103e:	3a e2       	ldi	r19, 0x2A	; 42
    1040:	60 e5       	ldi	r22, 0x50	; 80
    1042:	8e ef       	ldi	r24, 0xFE	; 254
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	31 50       	subi	r19, 0x01	; 1
    1048:	60 40       	sbci	r22, 0x00	; 0
    104a:	80 40       	sbci	r24, 0x00	; 0
    104c:	90 40       	sbci	r25, 0x00	; 0
    104e:	d9 f7       	brne	.-10     	; 0x1046 <proccess_instruction+0x1aa>
    1050:	00 00       	nop
    1052:	00 e0       	ldi	r16, 0x00	; 0
    1054:	25 e0       	ldi	r18, 0x05	; 5
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	4d e2       	ldi	r20, 0x2D	; 45
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	60 e1       	ldi	r22, 0x10	; 16
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	8e e1       	ldi	r24, 0x1E	; 30
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	5a db       	rcall	.-2380   	; 0x71a <draw_data>
    1066:	45 e9       	ldi	r20, 0x95	; 149
                    
                    _delay_ms(5000);
                    
                    //앞에 그렸던 문구 클리어
                    draw_data(30, 16, 45,5,0x00);
    1068:	53 e0       	ldi	r21, 0x03	; 3
    106a:	61 e0       	ldi	r22, 0x01	; 1
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	c3 c0       	rjmp	.+390    	; 0x11f6 <proccess_instruction+0x35a>
    1070:	92 db       	rcall	.-2268   	; 0x796 <clear_oled>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	86 dc       	rcall	.-1780   	; 0x982 <draw_edge>
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	c3 2e       	mov	r12, r19
    107a:	31 e0       	ldi	r19, 0x01	; 1
    107c:	d3 2e       	mov	r13, r19
                    make_packet(RESPONSE_PN,1,SUCCESS_PN);
    107e:	e1 2c       	mov	r14, r1
    1080:	f1 2c       	mov	r15, r1
    1082:	a7 01       	movw	r20, r14
    1084:	42 5e       	subi	r20, 0xE2	; 226
    1086:	5f 4f       	sbci	r21, 0xFF	; 255
            }
            break;
            
        case START_GAME:
            //이전화면 모두 클리어
            clear_oled();
    1088:	86 01       	movw	r16, r12
    108a:	22 e0       	ldi	r18, 0x02	; 2
            draw_edge(0);
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	60 e1       	ldi	r22, 0x10	; 16
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	88 e0       	ldi	r24, 0x08	; 8
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	f9 da       	rcall	.-2574   	; 0x68a <draw_char>
    1098:	ea e0       	ldi	r30, 0x0A	; 10
    109a:	ee 0e       	add	r14, r30
    109c:	f1 1c       	adc	r15, r1
    109e:	f0 e1       	ldi	r31, 0x10	; 16
    10a0:	cf 0e       	add	r12, r31
    10a2:	d1 1c       	adc	r13, r1
            
            for(k=0;k<6;k++)
                draw_char(8,16,30+(k*10),2,font_game[k]);
    10a4:	0c e3       	ldi	r16, 0x3C	; 60
    10a6:	e0 16       	cp	r14, r16
    10a8:	f1 04       	cpc	r15, r1
    10aa:	59 f7       	brne	.-42     	; 0x1082 <proccess_instruction+0x1e6>
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	80 e1       	ldi	r24, 0x10	; 16
    10b0:	cf d9       	rcall	.-3170   	; 0x450 <change_bit_val>
    10b2:	a2 c0       	rjmp	.+324    	; 0x11f8 <proccess_instruction+0x35c>
    10b4:	87 e0       	ldi	r24, 0x07	; 7
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	c8 d9       	rcall	.-3184   	; 0x44a <eeprom_read>
    10ba:	80 93 bc 03 	sts	0x03BC, r24
    10be:	e1 2c       	mov	r14, r1
    10c0:	f1 2c       	mov	r15, r1
        case START_GAME:
            //이전화면 모두 클리어
            clear_oled();
            draw_edge(0);
            
            for(k=0;k<6;k++)
    10c2:	08 e0       	ldi	r16, 0x08	; 8
    10c4:	80 91 bc 03 	lds	r24, 0x03BC
    10c8:	90 e0       	ldi	r25, 0x00	; 0
                draw_char(8,16,30+(k*10),2,font_game[k]);
            change_bit_val(ISGAME,1);	// s_flag ISGAME bit 1로 set
    10ca:	e8 16       	cp	r14, r24
    10cc:	f9 06       	cpc	r15, r25
    10ce:	d4 f4       	brge	.+52     	; 0x1104 <proccess_instruction+0x268>
    10d0:	9e 01       	movw	r18, r28
            break;
    10d2:	2f 5f       	subi	r18, 0xFF	; 255
            game_money += data_buffer[idx++]*10;
            write_num_to_oled(game_money);
            break;
            
        case REQUEST_SAVED_COIN:
            saved_coin_cnt = eeprom_read(UNCONNECT_COIN_CNT_ADD);
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	69 01       	movw	r12, r18
    10d8:	10 e0       	ldi	r17, 0x00	; 0
    10da:	81 2f       	mov	r24, r17
    10dc:	80 0f       	add	r24, r16
    10de:	90 e0       	ldi	r25, 0x00	; 0
            for(m=0;m<saved_coin_cnt;m++)
    10e0:	b4 d9       	rcall	.-3224   	; 0x44a <eeprom_read>
    10e2:	f6 01       	movw	r30, r12
{
    unsigned char idx = 0;
    unsigned char d[3];
    unsigned char data[6];
    unsigned char tmp;
    unsigned char add = UNCONNECT_COIN_DATA_ADD;
    10e4:	81 93       	st	Z+, r24
            write_num_to_oled(game_money);
            break;
            
        case REQUEST_SAVED_COIN:
            saved_coin_cnt = eeprom_read(UNCONNECT_COIN_CNT_ADD);
            for(m=0;m<saved_coin_cnt;m++)
    10e6:	6f 01       	movw	r12, r30
    10e8:	1f 5f       	subi	r17, 0xFF	; 255
    10ea:	16 30       	cpi	r17, 0x06	; 6
    10ec:	b1 f7       	brne	.-20     	; 0x10da <proccess_instruction+0x23e>
    10ee:	0a 5f       	subi	r16, 0xFA	; 250
    10f0:	ae 01       	movw	r20, r28
    10f2:	4f 5f       	subi	r20, 0xFF	; 255
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	66 e0       	ldi	r22, 0x06	; 6
    10f8:	86 e0       	ldi	r24, 0x06	; 6
    10fa:	a1 dd       	rcall	.-1214   	; 0xc3e <make_packet>
    10fc:	ff ef       	ldi	r31, 0xFF	; 255
    10fe:	ef 1a       	sub	r14, r31
            {
                for(k=0;k<6;k++)
                    data[k] = eeprom_read(add++);
    1100:	ff 0a       	sbc	r15, r31
    1102:	e0 cf       	rjmp	.-64     	; 0x10c4 <proccess_instruction+0x228>
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	87 e0       	ldi	r24, 0x07	; 7
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	9c d9       	rcall	.-3272   	; 0x444 <eeprom_write>
    110c:	87 e0       	ldi	r24, 0x07	; 7
            
        case REQUEST_SAVED_COIN:
            saved_coin_cnt = eeprom_read(UNCONNECT_COIN_CNT_ADD);
            for(m=0;m<saved_coin_cnt;m++)
            {
                for(k=0;k<6;k++)
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	9c d9       	rcall	.-3272   	; 0x44a <eeprom_read>
    1112:	80 93 bc 03 	sts	0x03BC, r24
                    data[k] = eeprom_read(add++);
                make_packet(SYNC_DATA,6,data);
    1116:	98 2f       	mov	r25, r24
    1118:	99 0f       	add	r25, r25
    111a:	89 0f       	add	r24, r25
    111c:	88 0f       	add	r24, r24
    111e:	88 5f       	subi	r24, 0xF8	; 248
    1120:	80 93 bd 03 	sts	0x03BD, r24
            write_num_to_oled(game_money);
            break;
            
        case REQUEST_SAVED_COIN:
            saved_coin_cnt = eeprom_read(UNCONNECT_COIN_CNT_ADD);
            for(m=0;m<saved_coin_cnt;m++)
    1124:	69 c0       	rjmp	.+210    	; 0x11f8 <proccess_instruction+0x35c>
    1126:	80 91 9d 03 	lds	r24, 0x039D
            {
                for(k=0;k<6;k++)
                    data[k] = eeprom_read(add++);
                make_packet(SYNC_DATA,6,data);
            }
            eeprom_write(UNCONNECT_COIN_CNT_ADD,INIT_DATA);
    112a:	90 91 9e 03 	lds	r25, 0x039E
    112e:	a0 91 9f 03 	lds	r26, 0x039F
    1132:	b0 91 a0 03 	lds	r27, 0x03A0
            
            // 블루투스 미연결때 저장되어있던 동전갯수를 eeprom으로 부터 얻는다
            saved_coin_cnt  = eeprom_read(UNCONNECT_COIN_CNT_ADD);
    1136:	89 87       	std	Y+9, r24	; 0x09
    1138:	98 87       	std	Y+8, r25	; 0x08
    113a:	af 83       	std	Y+7, r26	; 0x07
    113c:	8b 2f       	mov	r24, r27
    113e:	99 27       	eor	r25, r25
            last_coin_add   = UNCONNECT_COIN_DATA_ADD + (saved_coin_cnt * 6);
    1140:	aa 27       	eor	r26, r26
    1142:	bb 27       	eor	r27, r27
    1144:	80 93 9d 03 	sts	0x039D, r24
    1148:	90 93 9e 03 	sts	0x039E, r25
    114c:	a0 93 9f 03 	sts	0x039F, r26
            break;
    1150:	b0 93 a0 03 	sts	0x03A0, r27
    1154:	ae 01       	movw	r20, r28
    1156:	49 5f       	subi	r20, 0xF9	; 249
    1158:	5f 4f       	sbci	r21, 0xFF	; 255
    115a:	63 e0       	ldi	r22, 0x03	; 3
    115c:	82 e1       	ldi	r24, 0x12	; 18
    115e:	6f dd       	rcall	.-1314   	; 0xc3e <make_packet>
            
        case SUMMIT_DATA:
            for(m=0;m<3;m++ )
            {
                // 8비트씩 char 배열에 저장
                d[2-m] = game_money & 0xff;
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	48 ee       	ldi	r20, 0xE8	; 232
                game_money = game_money>>8;
    1166:	53 e0       	ldi	r21, 0x03	; 3
    1168:	6e e5       	ldi	r22, 0x5E	; 94
    116a:	71 e0       	ldi	r23, 0x01	; 1
    116c:	87 e0       	ldi	r24, 0x07	; 7
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	5e dc       	rcall	.-1860   	; 0xa2e <led_interaction>
    1172:	42 c0       	rjmp	.+132    	; 0x11f8 <proccess_instruction+0x35c>
    1174:	30 91 b3 03 	lds	r19, 0x03B3
    1178:	a4 eb       	ldi	r26, 0xB4	; 180
    117a:	b3 e0       	ldi	r27, 0x03	; 3
    117c:	fe 01       	movw	r30, r28
            }
            
            // 게임보드에서 전송 버튼을 클릭했을경우 전송
            make_packet(SUMMIT_DATA,3,d);
    117e:	31 96       	adiw	r30, 0x01	; 1
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	4a e0       	ldi	r20, 0x0A	; 10
    1184:	23 17       	cp	r18, r19
    1186:	61 f0       	breq	.+24     	; 0x11a0 <proccess_instruction+0x304>
    1188:	8d 91       	ld	r24, X+
    118a:	64 2f       	mov	r22, r20
            led_interaction(BLUE_LED,350,1000,10);
    118c:	b5 d1       	rcall	.+874    	; 0x14f8 <__udivmodqi4>
    118e:	59 2f       	mov	r21, r25
    1190:	60 e1       	ldi	r22, 0x10	; 16
    1192:	86 9f       	mul	r24, r22
    1194:	c0 01       	movw	r24, r0
    1196:	11 24       	eor	r1, r1
    1198:	85 2b       	or	r24, r21
    119a:	81 93       	st	Z+, r24
    119c:	2f 5f       	subi	r18, 0xFF	; 255
    119e:	f2 cf       	rjmp	.-28     	; 0x1184 <proccess_instruction+0x2e8>
            break;
    11a0:	09 81       	ldd	r16, Y+1	; 0x01
            
        case GET_UTC_TIME:
            m   = 0;
            tmp = 0;
            
            len = data_buffer[idx++];
    11a2:	10 e0       	ldi	r17, 0x00	; 0
    11a4:	2a 81       	ldd	r18, Y+2	; 0x02
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	4b 81       	ldd	r20, Y+3	; 0x03
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	6c 81       	ldd	r22, Y+4	; 0x04
            for(m=0;m<len;m++)
    11ae:	70 e0       	ldi	r23, 0x00	; 0
            {
                data[m] = 0;
                tmp = data_buffer[idx++];
                data[m] |= (tmp/10)<<4;
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
        case GET_UTC_TIME:
            m   = 0;
            tmp = 0;
            
            len = data_buffer[idx++];
            for(m=0;m<len;m++)
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	8e d9       	rcall	.-3300   	; 0x4d2 <set_rtc>
            {
                data[m] = 0;
                tmp = data_buffer[idx++];
    11b6:	0f c0       	rjmp	.+30     	; 0x11d6 <proccess_instruction+0x33a>
                data[m] |= (tmp/10)<<4;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	a3 dd       	rcall	.-1210   	; 0xd02 <get_goal>
    11bc:	47 da       	rcall	.-2930   	; 0x64c <turnon_motor_voltage>
    11be:	80 91 b5 03 	lds	r24, 0x03B5
    11c2:	09 da       	rcall	.-3054   	; 0x5d6 <lock_or_unlock>
    11c4:	2a e0       	ldi	r18, 0x0A	; 10
    11c6:	30 e0       	ldi	r19, 0x00	; 0
                data[m] |= (tmp%10);
    11c8:	48 ee       	ldi	r20, 0xE8	; 232
    11ca:	53 e0       	ldi	r21, 0x03	; 3
    11cc:	6e e5       	ldi	r22, 0x5E	; 94
    11ce:	71 e0       	ldi	r23, 0x01	; 1
            }
            
            set_rtc(data[4],data[3],data[2],data[1],data[0]);
    11d0:	86 e0       	ldi	r24, 0x06	; 6
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	2c dc       	rcall	.-1960   	; 0xa2e <led_interaction>
    11d6:	45 e9       	ldi	r20, 0x95	; 149
    11d8:	53 e0       	ldi	r21, 0x03	; 3
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	83 e0       	ldi	r24, 0x03	; 3
    11de:	0b c0       	rjmp	.+22     	; 0x11f6 <proccess_instruction+0x35a>
    11e0:	80 91 a1 03 	lds	r24, 0x03A1
    11e4:	84 ff       	sbrs	r24, 4
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <proccess_instruction+0x352>
    11e8:	47 e9       	ldi	r20, 0x97	; 151

            break;
            
            // 목표데이터를 전송받을경우
        case GET_GOAL:
            get_goal(idx++);
    11ea:	53 e0       	ldi	r21, 0x03	; 3
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <proccess_instruction+0x356>
    11ee:	49 e9       	ldi	r20, 0x99	; 153
            turnon_motor_voltage();
    11f0:	53 e0       	ldi	r21, 0x03	; 3
    11f2:	61 e0       	ldi	r22, 0x01	; 1
            lock_or_unlock(data_buffer[++idx]);
    11f4:	81 e1       	ldi	r24, 0x11	; 17
    11f6:	23 dd       	rcall	.-1466   	; 0xc3e <make_packet>
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	82 e0       	ldi	r24, 0x02	; 2
            
            //성공적으로 데이터 수신했음을 앱에게 알림
            led_interaction(GREEN_LED,350,1000,10);
    11fc:	29 d9       	rcall	.-3502   	; 0x450 <change_bit_val>
    11fe:	29 96       	adiw	r28, 0x09	; 9
    1200:	e8 e0       	ldi	r30, 0x08	; 8
    1202:	ce c1       	rjmp	.+924    	; 0x15a0 <__epilogue_restores__+0x14>

00001204 <init_adc>:
#include "eeprom.h"
#include "i2c.h"

void init_adc()
{
    ADMUX   |= (1<<REFS0) | (1<<REFS1) | (1<<MUX0);
    1204:	ec e7       	ldi	r30, 0x7C	; 124
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	81 6c       	ori	r24, 0xC1	; 193
    120c:	80 83       	st	Z, r24
    ADCSRA  |= (1<<ADEN)  | (1<<ADPS2) | (2<<ADPS1)|(ADPS0)|
    120e:	ea e7       	ldi	r30, 0x7A	; 122
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	84 6e       	ori	r24, 0xE4	; 228
    1216:	80 83       	st	Z, r24
               (1<<ADSC)  | (1<<ADATE) | (0<<ADIE);
    
    DDRB &= ~(1<<COINDETEC_PIN);
    1218:	20 98       	cbi	0x04, 0	; 4
    
    adc_max = 1024;
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	94 e0       	ldi	r25, 0x04	; 4
    121e:	90 93 ac 03 	sts	0x03AC, r25
    1222:	80 93 ab 03 	sts	0x03AB, r24
    1226:	08 95       	ret

00001228 <proccess_coin>:
}

void proccess_coin()
{
    1228:	a3 e0       	ldi	r26, 0x03	; 3
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e9 e1       	ldi	r30, 0x19	; 25
    122e:	f9 e0       	ldi	r31, 0x09	; 9
    1230:	91 c1       	rjmp	.+802    	; 0x1554 <__prologue_saves__>
    1232:	83 ec       	ldi	r24, 0xC3	; 195
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1234:	99 e0       	ldi	r25, 0x09	; 9
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <proccess_coin+0xe>
    123a:	00 c0       	rjmp	.+0      	; 0x123c <proccess_coin+0x14>
    123c:	00 00       	nop
    123e:	80 91 ab 03 	lds	r24, 0x03AB
    unsigned long   coin_flag;
    unsigned char   percent;
    
    _delay_us(500);
    // 금액 처리
    if( adc_max>800 && adc_max<1000 )
    1242:	90 91 ac 03 	lds	r25, 0x03AC
    1246:	9c 01       	movw	r18, r24
    1248:	21 52       	subi	r18, 0x21	; 33
    124a:	33 40       	sbci	r19, 0x03	; 3
    124c:	27 3c       	cpi	r18, 0xC7	; 199
    124e:	31 05       	cpc	r19, r1
    1250:	98 f0       	brcs	.+38     	; 0x1278 <proccess_coin+0x50>
    1252:	2a 56       	subi	r18, 0x6A	; 106
        coin_flag = SHIPWON;
    else if( adc_max>650 && adc_max<800)
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	25 39       	cpi	r18, 0x95	; 149
    1258:	31 05       	cpc	r19, r1
    125a:	a0 f0       	brcs	.+40     	; 0x1284 <proccess_coin+0x5c>
    125c:	28 53       	subi	r18, 0x38	; 56
        coin_flag = OHSHIPWON;
    else if( adc_max>450 && adc_max<600 )
    125e:	3f 4f       	sbci	r19, 0xFF	; 255
    1260:	25 39       	cpi	r18, 0x95	; 149
    1262:	31 05       	cpc	r19, r1
    1264:	a8 f0       	brcs	.+42     	; 0x1290 <proccess_coin+0x68>
    1266:	89 5c       	subi	r24, 0xC9	; 201
        coin_flag = BACKWON;
    else if (adc_max>200 && adc_max<400 )
    1268:	91 09       	sbc	r25, r1
    126a:	87 3c       	cpi	r24, 0xC7	; 199
    126c:	91 05       	cpc	r25, r1
    126e:	b0 f0       	brcs	.+44     	; 0x129c <proccess_coin+0x74>
    1270:	c1 2c       	mov	r12, r1
        coin_flag = OHBACKWON;
    else
        coin_flag = 0;
    1272:	d1 2c       	mov	r13, r1
    1274:	76 01       	movw	r14, r12
    1276:	18 c0       	rjmp	.+48     	; 0x12a8 <proccess_coin+0x80>
    1278:	6a e0       	ldi	r22, 0x0A	; 10
    unsigned char   percent;
    
    _delay_us(500);
    // 금액 처리
    if( adc_max>800 && adc_max<1000 )
        coin_flag = SHIPWON;
    127a:	c6 2e       	mov	r12, r22
    127c:	d1 2c       	mov	r13, r1
    127e:	e1 2c       	mov	r14, r1
    1280:	f1 2c       	mov	r15, r1
    1282:	12 c0       	rjmp	.+36     	; 0x12a8 <proccess_coin+0x80>
    1284:	52 e3       	ldi	r21, 0x32	; 50
    else if( adc_max>650 && adc_max<800)
        coin_flag = OHSHIPWON;
    1286:	c5 2e       	mov	r12, r21
    1288:	d1 2c       	mov	r13, r1
    128a:	e1 2c       	mov	r14, r1
    128c:	f1 2c       	mov	r15, r1
    128e:	0c c0       	rjmp	.+24     	; 0x12a8 <proccess_coin+0x80>
    1290:	44 e6       	ldi	r20, 0x64	; 100
    else if( adc_max>450 && adc_max<600 )
        coin_flag = BACKWON;
    1292:	c4 2e       	mov	r12, r20
    1294:	d1 2c       	mov	r13, r1
    1296:	e1 2c       	mov	r14, r1
    1298:	f1 2c       	mov	r15, r1
    129a:	06 c0       	rjmp	.+12     	; 0x12a8 <proccess_coin+0x80>
    129c:	34 ef       	ldi	r19, 0xF4	; 244
    else if (adc_max>200 && adc_max<400 )
        coin_flag = OHBACKWON;
    129e:	c3 2e       	mov	r12, r19
    12a0:	dd 24       	eor	r13, r13
    12a2:	d3 94       	inc	r13
    12a4:	e1 2c       	mov	r14, r1
    12a6:	f1 2c       	mov	r15, r1
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
        coin_flag = 0;
    
    tpm = coin_flag/10;
    
    
    UDR0 = 0xff;
    12aa:	80 93 c6 00 	sts	0x00C6, r24
    12ae:	c1 14       	cp	r12, r1
    
    // 제대로 인식되었을경우 led 인터렉션
    if(coin_flag!=0)
    12b0:	d1 04       	cpc	r13, r1
    12b2:	e1 04       	cpc	r14, r1
    12b4:	f1 04       	cpc	r15, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <proccess_coin+0x92>
    12b8:	04 c1       	rjmp	.+520    	; 0x14c2 <proccess_coin+0x29a>
    12ba:	80 90 ae 03 	lds	r8, 0x03AE
    {
        current_money += coin_flag; // 현재 저축된 총금액 연산
    12be:	90 90 af 03 	lds	r9, 0x03AF
    12c2:	a0 90 b0 03 	lds	r10, 0x03B0
    12c6:	b0 90 b1 03 	lds	r11, 0x03B1
    12ca:	8c 0c       	add	r8, r12
    12cc:	9d 1c       	adc	r9, r13
    12ce:	ae 1c       	adc	r10, r14
    12d0:	bf 1c       	adc	r11, r15
    12d2:	80 92 ae 03 	sts	0x03AE, r8
    12d6:	90 92 af 03 	sts	0x03AF, r9
    12da:	a0 92 b0 03 	sts	0x03B0, r10
    12de:	b0 92 b1 03 	sts	0x03B1, r11
    12e2:	8e 01       	movw	r16, r28
    12e4:	0c 5f       	subi	r16, 0xFC	; 252
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	16 01       	movw	r2, r12
    12ea:	27 01       	movw	r4, r14
    12ec:	24 e0       	ldi	r18, 0x04	; 4
    12ee:	62 2e       	mov	r6, r18
    12f0:	71 2c       	mov	r7, r1
    12f2:	f8 01       	movw	r30, r16
        tmp_current    = current_money;
        
        for( i=0;i<length;i++ )
        {
            // 8비트씩 char 배열에 저장
            data[2-i] = coin_flag & 0xff;
    12f4:	22 92       	st	-Z, r2
    12f6:	8f 01       	movw	r16, r30
    12f8:	23 2c       	mov	r2, r3
            coin_flag = coin_flag>>8;
    12fa:	34 2c       	mov	r3, r4
    12fc:	45 2c       	mov	r4, r5
    12fe:	55 24       	eor	r5, r5
    1300:	68 2d       	mov	r22, r8
            tmp = tmp_current & 0xff;
            
            //eeprom에 현재금액 저장
            eeprom_write((CURRENT_MONEY-2)+i,tmp);
    1302:	c3 01       	movw	r24, r6
    1304:	9f d8       	rcall	.-3778   	; 0x444 <eeprom_write>
    1306:	89 2c       	mov	r8, r9
    1308:	9a 2c       	mov	r9, r10
            tmp_current = tmp_current>>8;
    130a:	ab 2c       	mov	r10, r11
    130c:	bb 24       	eor	r11, r11
    130e:	ff ef       	ldi	r31, 0xFF	; 255
    1310:	6f 1a       	sub	r6, r31
    1312:	7f 0a       	sbc	r7, r31
    1314:	27 e0       	ldi	r18, 0x07	; 7
    1316:	62 16       	cp	r6, r18
    if(coin_flag!=0)
    {
        current_money += coin_flag; // 현재 저축된 총금액 연산
        tmp_current    = current_money;
        
        for( i=0;i<length;i++ )
    1318:	71 04       	cpc	r7, r1
    131a:	59 f7       	brne	.-42     	; 0x12f2 <proccess_coin+0xca>
    131c:	ae 01       	movw	r20, r28
    131e:	4f 5f       	subi	r20, 0xFF	; 255
            eeprom_write((CURRENT_MONEY-2)+i,tmp);
            tmp_current = tmp_current>>8;
        }
        
        // 저금한 금액 전송 시도
        make_packet(SEND_MONEY,length,data);
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	63 e0       	ldi	r22, 0x03	; 3
    1324:	88 e0       	ldi	r24, 0x08	; 8
    1326:	8b dc       	rcall	.-1770   	; 0xc3e <make_packet>
    1328:	86 e0       	ldi	r24, 0x06	; 6
    132a:	90 91 a1 03 	lds	r25, 0x03A1
    132e:	96 fd       	sbrc	r25, 6
        i=0;
        
        while(1)
        {
            if(s_flag&CONNECT)
    1330:	0b c0       	rjmp	.+22     	; 0x1348 <proccess_coin+0x120>
    1332:	3f e7       	ldi	r19, 0x7F	; 127
    1334:	9a e1       	ldi	r25, 0x1A	; 26
    1336:	e6 e0       	ldi	r30, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1338:	31 50       	subi	r19, 0x01	; 1
    133a:	90 40       	sbci	r25, 0x00	; 0
    133c:	e0 40       	sbci	r30, 0x00	; 0
    133e:	e1 f7       	brne	.-8      	; 0x1338 <proccess_coin+0x110>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <proccess_coin+0x11a>
    1342:	00 00       	nop
    1344:	81 50       	subi	r24, 0x01	; 1
    1346:	89 f7       	brne	.-30     	; 0x132a <proccess_coin+0x102>
    1348:	80 91 a1 03 	lds	r24, 0x03A1
                break;
            
            _delay_ms(100);  // 전송성공 ack 대기
            if(i>4)         // 전송성공 ack를 200ms 동안 대기
    134c:	86 fd       	sbrc	r24, 6
                break;
            i++;
        }
        
        // 블루투스 미연결 상태일경우 정보 eeprom에 저장
        if(!(s_flag&CONNECT))
    134e:	87 c0       	rjmp	.+270    	; 0x145e <proccess_coin+0x236>
    1350:	60 91 bc 03 	lds	r22, 0x03BC
    1354:	6f 5f       	subi	r22, 0xFF	; 255
        {
            saved_coin_cnt++;
    1356:	60 93 bc 03 	sts	0x03BC, r22
    135a:	87 e0       	ldi	r24, 0x07	; 7
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	72 d8       	rcall	.-3868   	; 0x444 <eeprom_write>
            eeprom_write(UNCONNECT_COIN_CNT_ADD,saved_coin_cnt);
    1360:	66 e0       	ldi	r22, 0x06	; 6
    1362:	88 e6       	ldi	r24, 0x68	; 104
    1364:	e6 d8       	rcall	.-3636   	; 0x532 <i2c_read>
    1366:	90 91 bd 03 	lds	r25, 0x03BD
            // 블루 투스 미연결시 데이터 저장
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x06)); // 년
    136a:	21 e0       	ldi	r18, 0x01	; 1
    136c:	29 0f       	add	r18, r25
    136e:	20 93 bd 03 	sts	0x03BD, r18
    1372:	68 2f       	mov	r22, r24
    1374:	89 2f       	mov	r24, r25
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	65 d8       	rcall	.-3894   	; 0x444 <eeprom_write>
    137a:	87 e8       	ldi	r24, 0x87	; 135
    137c:	93 e1       	ldi	r25, 0x13	; 19
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <proccess_coin+0x156>
    1382:	00 c0       	rjmp	.+0      	; 0x1384 <proccess_coin+0x15c>
    1384:	00 00       	nop
    1386:	65 e0       	ldi	r22, 0x05	; 5
    1388:	88 e6       	ldi	r24, 0x68	; 104
    138a:	d3 d8       	rcall	.-3674   	; 0x532 <i2c_read>
    138c:	90 91 bd 03 	lds	r25, 0x03BD
    1390:	21 e0       	ldi	r18, 0x01	; 1
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x05)); // 월
    1392:	29 0f       	add	r18, r25
    1394:	20 93 bd 03 	sts	0x03BD, r18
    1398:	68 2f       	mov	r22, r24
    139a:	89 2f       	mov	r24, r25
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	52 d8       	rcall	.-3932   	; 0x444 <eeprom_write>
    13a0:	e7 e8       	ldi	r30, 0x87	; 135
    13a2:	f3 e1       	ldi	r31, 0x13	; 19
    13a4:	31 97       	sbiw	r30, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <proccess_coin+0x17c>
    13a8:	00 c0       	rjmp	.+0      	; 0x13aa <proccess_coin+0x182>
    13aa:	00 00       	nop
    13ac:	64 e0       	ldi	r22, 0x04	; 4
    13ae:	88 e6       	ldi	r24, 0x68	; 104
    13b0:	c0 d8       	rcall	.-3712   	; 0x532 <i2c_read>
    13b2:	90 91 bd 03 	lds	r25, 0x03BD
    13b6:	21 e0       	ldi	r18, 0x01	; 1
    13b8:	29 0f       	add	r18, r25
    13ba:	20 93 bd 03 	sts	0x03BD, r18
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x04)); // 일
    13be:	68 2f       	mov	r22, r24
    13c0:	89 2f       	mov	r24, r25
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	3f d8       	rcall	.-3970   	; 0x444 <eeprom_write>
    13c6:	87 e8       	ldi	r24, 0x87	; 135
    13c8:	93 e1       	ldi	r25, 0x13	; 19
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <proccess_coin+0x1a2>
    13ce:	00 c0       	rjmp	.+0      	; 0x13d0 <proccess_coin+0x1a8>
    13d0:	00 00       	nop
    13d2:	62 e0       	ldi	r22, 0x02	; 2
    13d4:	88 e6       	ldi	r24, 0x68	; 104
    13d6:	ad d8       	rcall	.-3750   	; 0x532 <i2c_read>
    13d8:	90 91 bd 03 	lds	r25, 0x03BD
    13dc:	21 e0       	ldi	r18, 0x01	; 1
    13de:	29 0f       	add	r18, r25
    13e0:	20 93 bd 03 	sts	0x03BD, r18
    13e4:	68 2f       	mov	r22, r24
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x02)); // 시
    13e6:	89 2f       	mov	r24, r25
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	2c d8       	rcall	.-4008   	; 0x444 <eeprom_write>
    13ec:	e7 e8       	ldi	r30, 0x87	; 135
    13ee:	f3 e1       	ldi	r31, 0x13	; 19
    13f0:	31 97       	sbiw	r30, 0x01	; 1
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <proccess_coin+0x1c8>
    13f4:	00 c0       	rjmp	.+0      	; 0x13f6 <proccess_coin+0x1ce>
    13f6:	00 00       	nop
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	88 e6       	ldi	r24, 0x68	; 104
    13fc:	9a d8       	rcall	.-3788   	; 0x532 <i2c_read>
    13fe:	90 91 bd 03 	lds	r25, 0x03BD
    1402:	21 e0       	ldi	r18, 0x01	; 1
    1404:	29 0f       	add	r18, r25
    1406:	20 93 bd 03 	sts	0x03BD, r18
    140a:	68 2f       	mov	r22, r24
    140c:	89 2f       	mov	r24, r25
    140e:	90 e0       	ldi	r25, 0x00	; 0
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x01)); // 분
    1410:	19 d8       	rcall	.-4046   	; 0x444 <eeprom_write>
    1412:	87 e8       	ldi	r24, 0x87	; 135
    1414:	93 e1       	ldi	r25, 0x13	; 19
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <proccess_coin+0x1ee>
    141a:	00 c0       	rjmp	.+0      	; 0x141c <proccess_coin+0x1f4>
    141c:	00 00       	nop
    141e:	10 91 bd 03 	lds	r17, 0x03BD
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	81 0f       	add	r24, r17
    1426:	80 93 bd 03 	sts	0x03BD, r24
    142a:	c7 01       	movw	r24, r14
    142c:	b6 01       	movw	r22, r12
    142e:	2a e0       	ldi	r18, 0x0A	; 10
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	6c d0       	rcall	.+216    	; 0x1510 <__udivmodsi4>
    1438:	62 2f       	mov	r22, r18
            _delay_ms(1);
            eeprom_write(last_coin_add++,tpm); // 돈
    143a:	81 2f       	mov	r24, r17
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 d8       	rcall	.-4092   	; 0x444 <eeprom_write>
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	80 e2       	ldi	r24, 0x20	; 32
    1444:	05 d8       	rcall	.-4086   	; 0x450 <change_bit_val>
    else if (adc_max>200 && adc_max<400 )
        coin_flag = OHBACKWON;
    else
        coin_flag = 0;
    
    tpm = coin_flag/10;
    1446:	60 91 a1 03 	lds	r22, 0x03A1
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 22 02 	call	0x444	; 0x444 <eeprom_write>
    1452:	e7 e8       	ldi	r30, 0x87	; 135
    1454:	f3 e1       	ldi	r31, 0x13	; 19
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x02)); // 시
            _delay_ms(1);
            eeprom_write(last_coin_add++,i2c_read(DS1307_ADD,0x01)); // 분
            _delay_ms(1);
            eeprom_write(last_coin_add++,tpm); // 돈
    1456:	31 97       	sbiw	r30, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <proccess_coin+0x22e>
    145a:	00 c0       	rjmp	.+0      	; 0x145c <proccess_coin+0x234>
    145c:	00 00       	nop
    145e:	80 91 a1 03 	lds	r24, 0x03A1
            
            change_bit_val( ISDATA, 1 );
    1462:	84 fd       	sbrc	r24, 4
    1464:	2e c0       	rjmp	.+92     	; 0x14c2 <proccess_coin+0x29a>
    1466:	e1 da       	rcall	.-2622   	; 0xa2a <melody_interaction>
    1468:	80 91 a1 03 	lds	r24, 0x03A1
    146c:	83 ff       	sbrs	r24, 3
    146e:	17 c0       	rjmp	.+46     	; 0x149e <proccess_coin+0x276>
    1470:	20 91 ae 03 	lds	r18, 0x03AE
    1474:	30 91 af 03 	lds	r19, 0x03AF
    1478:	40 91 b0 03 	lds	r20, 0x03B0
    147c:	50 91 b1 03 	lds	r21, 0x03B1
            eeprom_write( S_FLAG_ADDRESS, s_flag);
            _delay_ms(1);
        }
        
        if(!(s_flag&ISGAME))
    1480:	a0 e7       	ldi	r26, 0x70	; 112
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	2f d0       	rcall	.+94     	; 0x14e4 <__muluhisi3>
    1486:	20 91 a7 03 	lds	r18, 0x03A7
        {
            melody_interaction();
    148a:	30 91 a8 03 	lds	r19, 0x03A8
            if(s_flag&ISGOAL)
    148e:	40 91 a9 03 	lds	r20, 0x03A9
    1492:	50 91 aa 03 	lds	r21, 0x03AA
            {
                percent = (current_money*112)/goal_money;
    1496:	3c d0       	rcall	.+120    	; 0x1510 <__udivmodsi4>
    1498:	82 2f       	mov	r24, r18
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	57 da       	rcall	.-2898   	; 0x94c <draw_percentage>
    149e:	60 91 ae 03 	lds	r22, 0x03AE
    14a2:	70 91 af 03 	lds	r23, 0x03AF
    14a6:	80 91 b0 03 	lds	r24, 0x03B0
    14aa:	90 91 b1 03 	lds	r25, 0x03B1
    14ae:	80 d9       	rcall	.-3328   	; 0x7b0 <write_num_to_oled>
    14b0:	2a e0       	ldi	r18, 0x0A	; 10
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	48 ee       	ldi	r20, 0xE8	; 232
    14b6:	53 e0       	ldi	r21, 0x03	; 3
    14b8:	6e e5       	ldi	r22, 0x5E	; 94
    14ba:	71 e0       	ldi	r23, 0x01	; 1
    14bc:	85 e0       	ldi	r24, 0x05	; 5
    14be:	90 e0       	ldi	r25, 0x00	; 0
                draw_percentage(percent);
    14c0:	b6 da       	rcall	.-2708   	; 0xa2e <led_interaction>
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	0e 94 28 02 	call	0x450	; 0x450 <change_bit_val>
            }
            
            write_num_to_oled(current_money);
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	80 e4       	ldi	r24, 0x40	; 64
    14ce:	0e 94 28 02 	call	0x450	; 0x450 <change_bit_val>
    14d2:	87 e8       	ldi	r24, 0x87	; 135
    14d4:	93 e1       	ldi	r25, 0x13	; 19
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <proccess_coin+0x2ae>
    14da:	00 c0       	rjmp	.+0      	; 0x14dc <proccess_coin+0x2b4>
            led_interaction(RED_LED,350,1000,10);
    14dc:	00 00       	nop
    14de:	23 96       	adiw	r28, 0x03	; 3
    14e0:	e2 e1       	ldi	r30, 0x12	; 18
    14e2:	54 c0       	rjmp	.+168    	; 0x158c <__epilogue_restores__>

000014e4 <__muluhisi3>:
    14e4:	6e d0       	rcall	.+220    	; 0x15c2 <__umulhisi3>
    14e6:	a5 9f       	mul	r26, r21
    14e8:	90 0d       	add	r25, r0
    14ea:	b4 9f       	mul	r27, r20
    14ec:	90 0d       	add	r25, r0
    14ee:	a4 9f       	mul	r26, r20
    14f0:	80 0d       	add	r24, r0
    14f2:	91 1d       	adc	r25, r1
    14f4:	11 24       	eor	r1, r1
    14f6:	08 95       	ret

000014f8 <__udivmodqi4>:
    14f8:	99 1b       	sub	r25, r25
    14fa:	79 e0       	ldi	r23, 0x09	; 9
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <__udivmodqi4_ep>

000014fe <__udivmodqi4_loop>:
    14fe:	99 1f       	adc	r25, r25
    1500:	96 17       	cp	r25, r22
    1502:	08 f0       	brcs	.+2      	; 0x1506 <__udivmodqi4_ep>
    1504:	96 1b       	sub	r25, r22

00001506 <__udivmodqi4_ep>:
    1506:	88 1f       	adc	r24, r24
    1508:	7a 95       	dec	r23
    150a:	c9 f7       	brne	.-14     	; 0x14fe <__udivmodqi4_loop>
    150c:	80 95       	com	r24
    150e:	08 95       	ret

00001510 <__udivmodsi4>:
    1510:	a1 e2       	ldi	r26, 0x21	; 33
    1512:	1a 2e       	mov	r1, r26
    1514:	aa 1b       	sub	r26, r26
    1516:	bb 1b       	sub	r27, r27
    1518:	fd 01       	movw	r30, r26
    151a:	0d c0       	rjmp	.+26     	; 0x1536 <__udivmodsi4_ep>

0000151c <__udivmodsi4_loop>:
    151c:	aa 1f       	adc	r26, r26
    151e:	bb 1f       	adc	r27, r27
    1520:	ee 1f       	adc	r30, r30
    1522:	ff 1f       	adc	r31, r31
    1524:	a2 17       	cp	r26, r18
    1526:	b3 07       	cpc	r27, r19
    1528:	e4 07       	cpc	r30, r20
    152a:	f5 07       	cpc	r31, r21
    152c:	20 f0       	brcs	.+8      	; 0x1536 <__udivmodsi4_ep>
    152e:	a2 1b       	sub	r26, r18
    1530:	b3 0b       	sbc	r27, r19
    1532:	e4 0b       	sbc	r30, r20
    1534:	f5 0b       	sbc	r31, r21

00001536 <__udivmodsi4_ep>:
    1536:	66 1f       	adc	r22, r22
    1538:	77 1f       	adc	r23, r23
    153a:	88 1f       	adc	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	1a 94       	dec	r1
    1540:	69 f7       	brne	.-38     	; 0x151c <__udivmodsi4_loop>
    1542:	60 95       	com	r22
    1544:	70 95       	com	r23
    1546:	80 95       	com	r24
    1548:	90 95       	com	r25
    154a:	9b 01       	movw	r18, r22
    154c:	ac 01       	movw	r20, r24
    154e:	bd 01       	movw	r22, r26
    1550:	cf 01       	movw	r24, r30
    1552:	08 95       	ret

00001554 <__prologue_saves__>:
    1554:	2f 92       	push	r2
    1556:	3f 92       	push	r3
    1558:	4f 92       	push	r4
    155a:	5f 92       	push	r5
    155c:	6f 92       	push	r6
    155e:	7f 92       	push	r7
    1560:	8f 92       	push	r8
    1562:	9f 92       	push	r9
    1564:	af 92       	push	r10
    1566:	bf 92       	push	r11
    1568:	cf 92       	push	r12
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	ca 1b       	sub	r28, r26
    157e:	db 0b       	sbc	r29, r27
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	09 94       	ijmp

0000158c <__epilogue_restores__>:
    158c:	2a 88       	ldd	r2, Y+18	; 0x12
    158e:	39 88       	ldd	r3, Y+17	; 0x11
    1590:	48 88       	ldd	r4, Y+16	; 0x10
    1592:	5f 84       	ldd	r5, Y+15	; 0x0f
    1594:	6e 84       	ldd	r6, Y+14	; 0x0e
    1596:	7d 84       	ldd	r7, Y+13	; 0x0d
    1598:	8c 84       	ldd	r8, Y+12	; 0x0c
    159a:	9b 84       	ldd	r9, Y+11	; 0x0b
    159c:	aa 84       	ldd	r10, Y+10	; 0x0a
    159e:	b9 84       	ldd	r11, Y+9	; 0x09
    15a0:	c8 84       	ldd	r12, Y+8	; 0x08
    15a2:	df 80       	ldd	r13, Y+7	; 0x07
    15a4:	ee 80       	ldd	r14, Y+6	; 0x06
    15a6:	fd 80       	ldd	r15, Y+5	; 0x05
    15a8:	0c 81       	ldd	r16, Y+4	; 0x04
    15aa:	1b 81       	ldd	r17, Y+3	; 0x03
    15ac:	aa 81       	ldd	r26, Y+2	; 0x02
    15ae:	b9 81       	ldd	r27, Y+1	; 0x01
    15b0:	ce 0f       	add	r28, r30
    15b2:	d1 1d       	adc	r29, r1
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	ed 01       	movw	r28, r26
    15c0:	08 95       	ret

000015c2 <__umulhisi3>:
    15c2:	a2 9f       	mul	r26, r18
    15c4:	b0 01       	movw	r22, r0
    15c6:	b3 9f       	mul	r27, r19
    15c8:	c0 01       	movw	r24, r0
    15ca:	a3 9f       	mul	r26, r19
    15cc:	70 0d       	add	r23, r0
    15ce:	81 1d       	adc	r24, r1
    15d0:	11 24       	eor	r1, r1
    15d2:	91 1d       	adc	r25, r1
    15d4:	b2 9f       	mul	r27, r18
    15d6:	70 0d       	add	r23, r0
    15d8:	81 1d       	adc	r24, r1
    15da:	11 24       	eor	r1, r1
    15dc:	91 1d       	adc	r25, r1
    15de:	08 95       	ret

000015e0 <__eerd_byte_m324p>:
    15e0:	f9 99       	sbic	0x1f, 1	; 31
    15e2:	fe cf       	rjmp	.-4      	; 0x15e0 <__eerd_byte_m324p>
    15e4:	92 bd       	out	0x22, r25	; 34
    15e6:	81 bd       	out	0x21, r24	; 33
    15e8:	f8 9a       	sbi	0x1f, 0	; 31
    15ea:	99 27       	eor	r25, r25
    15ec:	80 b5       	in	r24, 0x20	; 32
    15ee:	08 95       	ret

000015f0 <__eewr_byte_m324p>:
    15f0:	26 2f       	mov	r18, r22

000015f2 <__eewr_r18_m324p>:
    15f2:	f9 99       	sbic	0x1f, 1	; 31
    15f4:	fe cf       	rjmp	.-4      	; 0x15f2 <__eewr_r18_m324p>
    15f6:	1f ba       	out	0x1f, r1	; 31
    15f8:	92 bd       	out	0x22, r25	; 34
    15fa:	81 bd       	out	0x21, r24	; 33
    15fc:	20 bd       	out	0x20, r18	; 32
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	fa 9a       	sbi	0x1f, 2	; 31
    1604:	f9 9a       	sbi	0x1f, 1	; 31
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	01 96       	adiw	r24, 0x01	; 1
    160a:	08 95       	ret

0000160c <_exit>:
    160c:	f8 94       	cli

0000160e <__stop_program>:
    160e:	ff cf       	rjmp	.-2      	; 0x160e <__stop_program>
